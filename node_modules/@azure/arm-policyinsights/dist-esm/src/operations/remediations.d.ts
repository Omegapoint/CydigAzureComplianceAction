import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Remediations } from "../operationsInterfaces";
import { PolicyInsightsClient } from "../policyInsightsClient";
import { RemediationDeployment, RemediationsListDeploymentsAtManagementGroupOptionalParams, Remediation, RemediationsListForManagementGroupOptionalParams, RemediationsListDeploymentsAtSubscriptionOptionalParams, RemediationsListForSubscriptionOptionalParams, RemediationsListDeploymentsAtResourceGroupOptionalParams, RemediationsListForResourceGroupOptionalParams, RemediationsListDeploymentsAtResourceOptionalParams, RemediationsListForResourceOptionalParams, RemediationsCancelAtManagementGroupOptionalParams, RemediationsCancelAtManagementGroupResponse, RemediationsCreateOrUpdateAtManagementGroupOptionalParams, RemediationsCreateOrUpdateAtManagementGroupResponse, RemediationsGetAtManagementGroupOptionalParams, RemediationsGetAtManagementGroupResponse, RemediationsDeleteAtManagementGroupOptionalParams, RemediationsDeleteAtManagementGroupResponse, RemediationsCancelAtSubscriptionOptionalParams, RemediationsCancelAtSubscriptionResponse, RemediationsCreateOrUpdateAtSubscriptionOptionalParams, RemediationsCreateOrUpdateAtSubscriptionResponse, RemediationsGetAtSubscriptionOptionalParams, RemediationsGetAtSubscriptionResponse, RemediationsDeleteAtSubscriptionOptionalParams, RemediationsDeleteAtSubscriptionResponse, RemediationsCancelAtResourceGroupOptionalParams, RemediationsCancelAtResourceGroupResponse, RemediationsCreateOrUpdateAtResourceGroupOptionalParams, RemediationsCreateOrUpdateAtResourceGroupResponse, RemediationsGetAtResourceGroupOptionalParams, RemediationsGetAtResourceGroupResponse, RemediationsDeleteAtResourceGroupOptionalParams, RemediationsDeleteAtResourceGroupResponse, RemediationsCancelAtResourceOptionalParams, RemediationsCancelAtResourceResponse, RemediationsCreateOrUpdateAtResourceOptionalParams, RemediationsCreateOrUpdateAtResourceResponse, RemediationsGetAtResourceOptionalParams, RemediationsGetAtResourceResponse, RemediationsDeleteAtResourceOptionalParams, RemediationsDeleteAtResourceResponse } from "../models";
/** Class containing Remediations operations. */
export declare class RemediationsImpl implements Remediations {
    private readonly client;
    /**
     * Initialize a new instance of the class Remediations class.
     * @param client Reference to the service client
     */
    constructor(client: PolicyInsightsClient);
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsListDeploymentsAtManagementGroupOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    private listDeploymentsAtManagementGroupPagingPage;
    private listDeploymentsAtManagementGroupPagingAll;
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId: string, options?: RemediationsListForManagementGroupOptionalParams): PagedAsyncIterableIterator<Remediation>;
    private listForManagementGroupPagingPage;
    private listForManagementGroupPagingAll;
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtSubscription(remediationName: string, options?: RemediationsListDeploymentsAtSubscriptionOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    private listDeploymentsAtSubscriptionPagingPage;
    private listDeploymentsAtSubscriptionPagingAll;
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options?: RemediationsListForSubscriptionOptionalParams): PagedAsyncIterableIterator<Remediation>;
    private listForSubscriptionPagingPage;
    private listForSubscriptionPagingAll;
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsListDeploymentsAtResourceGroupOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    private listDeploymentsAtResourceGroupPagingPage;
    private listDeploymentsAtResourceGroupPagingAll;
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: RemediationsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<Remediation>;
    private listForResourceGroupPagingPage;
    private listForResourceGroupPagingAll;
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResource(resourceId: string, remediationName: string, options?: RemediationsListDeploymentsAtResourceOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    private listDeploymentsAtResourcePagingPage;
    private listDeploymentsAtResourcePagingAll;
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId: string, options?: RemediationsListForResourceOptionalParams): PagedAsyncIterableIterator<Remediation>;
    private listForResourcePagingPage;
    private listForResourcePagingAll;
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    private _listDeploymentsAtManagementGroup;
    /**
     * Cancels a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsCancelAtManagementGroupOptionalParams): Promise<RemediationsCancelAtManagementGroupResponse>;
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    private _listForManagementGroup;
    /**
     * Creates or updates a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtManagementGroupOptionalParams): Promise<RemediationsCreateOrUpdateAtManagementGroupResponse>;
    /**
     * Gets an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsGetAtManagementGroupOptionalParams): Promise<RemediationsGetAtManagementGroupResponse>;
    /**
     * Deletes an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsDeleteAtManagementGroupOptionalParams): Promise<RemediationsDeleteAtManagementGroupResponse>;
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    private _listDeploymentsAtSubscription;
    /**
     * Cancels a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtSubscription(remediationName: string, options?: RemediationsCancelAtSubscriptionOptionalParams): Promise<RemediationsCancelAtSubscriptionResponse>;
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    private _listForSubscription;
    /**
     * Creates or updates a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtSubscription(remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtSubscriptionOptionalParams): Promise<RemediationsCreateOrUpdateAtSubscriptionResponse>;
    /**
     * Gets an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtSubscription(remediationName: string, options?: RemediationsGetAtSubscriptionOptionalParams): Promise<RemediationsGetAtSubscriptionResponse>;
    /**
     * Deletes an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtSubscription(remediationName: string, options?: RemediationsDeleteAtSubscriptionOptionalParams): Promise<RemediationsDeleteAtSubscriptionResponse>;
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    private _listDeploymentsAtResourceGroup;
    /**
     * Cancels a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsCancelAtResourceGroupOptionalParams): Promise<RemediationsCancelAtResourceGroupResponse>;
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    private _listForResourceGroup;
    /**
     * Creates or updates a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceGroup(resourceGroupName: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtResourceGroupOptionalParams): Promise<RemediationsCreateOrUpdateAtResourceGroupResponse>;
    /**
     * Gets an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsGetAtResourceGroupOptionalParams): Promise<RemediationsGetAtResourceGroupResponse>;
    /**
     * Deletes an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsDeleteAtResourceGroupOptionalParams): Promise<RemediationsDeleteAtResourceGroupResponse>;
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    private _listDeploymentsAtResource;
    /**
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResource(resourceId: string, remediationName: string, options?: RemediationsCancelAtResourceOptionalParams): Promise<RemediationsCancelAtResourceResponse>;
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    private _listForResource;
    /**
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtResourceOptionalParams): Promise<RemediationsCreateOrUpdateAtResourceResponse>;
    /**
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResource(resourceId: string, remediationName: string, options?: RemediationsGetAtResourceOptionalParams): Promise<RemediationsGetAtResourceResponse>;
    /**
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId: string, remediationName: string, options?: RemediationsDeleteAtResourceOptionalParams): Promise<RemediationsDeleteAtResourceResponse>;
    /**
     * ListDeploymentsAtManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListDeploymentsAtManagementGroup method.
     * @param options The options parameters.
     */
    private _listDeploymentsAtManagementGroupNext;
    /**
     * ListForManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
     * @param options The options parameters.
     */
    private _listForManagementGroupNext;
    /**
     * ListDeploymentsAtSubscriptionNext
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtSubscription
     *                 method.
     * @param options The options parameters.
     */
    private _listDeploymentsAtSubscriptionNext;
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    private _listForSubscriptionNext;
    /**
     * ListDeploymentsAtResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    private _listDeploymentsAtResourceGroupNext;
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    private _listForResourceGroupNext;
    /**
     * ListDeploymentsAtResourceNext
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResource
     *                 method.
     * @param options The options parameters.
     */
    private _listDeploymentsAtResourceNext;
    /**
     * ListForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    private _listForResourceNext;
}
//# sourceMappingURL=remediations.d.ts.map