import { PolicyRestrictions } from "../operationsInterfaces";
import { PolicyInsightsClient } from "../policyInsightsClient";
import { CheckRestrictionsRequest, PolicyRestrictionsCheckAtSubscriptionScopeOptionalParams, PolicyRestrictionsCheckAtSubscriptionScopeResponse, PolicyRestrictionsCheckAtResourceGroupScopeOptionalParams, PolicyRestrictionsCheckAtResourceGroupScopeResponse } from "../models";
/** Class containing PolicyRestrictions operations. */
export declare class PolicyRestrictionsImpl implements PolicyRestrictions {
    private readonly client;
    /**
     * Initialize a new instance of the class PolicyRestrictions class.
     * @param client Reference to the service client
     */
    constructor(client: PolicyInsightsClient);
    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtSubscriptionScope(parameters: CheckRestrictionsRequest, options?: PolicyRestrictionsCheckAtSubscriptionScopeOptionalParams): Promise<PolicyRestrictionsCheckAtSubscriptionScopeResponse>;
    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this
     * when the resource group the resource will be created in is already known.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtResourceGroupScope(resourceGroupName: string, parameters: CheckRestrictionsRequest, options?: PolicyRestrictionsCheckAtResourceGroupScopeOptionalParams): Promise<PolicyRestrictionsCheckAtResourceGroupScopeResponse>;
}
//# sourceMappingURL=policyRestrictions.d.ts.map