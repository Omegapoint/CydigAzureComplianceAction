/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyStates operations. */
export class PolicyStatesImpl {
    /**
     * Initialize a new instance of the class PolicyStates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Queries policy states for the resources under the management group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options) {
        const iter = this.listQueryResultsForManagementGroupPagingAll(policyStatesResource, managementGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options);
            }
        };
    }
    listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingPage_1() {
            let result = yield __await(this._listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForManagementGroupNext(policyStatesResource, managementGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForManagementGroupPagingAll(policyStatesResource, managementGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the subscription.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(policyStatesResource, subscriptionId, options) {
        const iter = this.listQueryResultsForSubscriptionPagingAll(policyStatesResource, subscriptionId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options);
            }
        };
    }
    listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingPage_1() {
            let result = yield __await(this._listQueryResultsForSubscription(policyStatesResource, subscriptionId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForSubscriptionNext(policyStatesResource, subscriptionId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionPagingAll(policyStatesResource, subscriptionId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the resource group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options) {
        const iter = this.listQueryResultsForResourceGroupPagingAll(policyStatesResource, subscriptionId, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options);
            }
        };
    }
    listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingPage_1() {
            let result = yield __await(this._listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForResourceGroupNext(policyStatesResource, subscriptionId, resourceGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupPagingAll(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Queries policy states for the resource.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(policyStatesResource, resourceId, options) {
        const iter = this.listQueryResultsForResourcePagingAll(policyStatesResource, resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options);
            }
        };
    }
    listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingPage_1() {
            let result = yield __await(this._listQueryResultsForResource(policyStatesResource, resourceId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForResourceNext(policyStatesResource, resourceId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForResourcePagingAll(policyStatesResource, resourceId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy set definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        const iter = this.listQueryResultsForPolicySetDefinitionPagingAll(policyStatesResource, subscriptionId, policySetDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingPage_1() {
            let result = yield __await(this._listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForPolicySetDefinitionNext(policyStatesResource, subscriptionId, policySetDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicySetDefinitionPagingAll(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        const iter = this.listQueryResultsForPolicyDefinitionPagingAll(policyStatesResource, subscriptionId, policyDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingPage_1() {
            let result = yield __await(this._listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForPolicyDefinitionNext(policyStatesResource, subscriptionId, policyDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicyDefinitionPagingAll(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        const iter = this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage_1() {
            let result = yield __await(this._listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForSubscriptionLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Queries policy states for the resource group level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        const iter = this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage_1() {
            let result = yield __await(this._listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForResourceGroupLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the management group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, managementGroupName, options }, listQueryResultsForManagementGroupOperationSpec);
    }
    /**
     * Summarizes policy states for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    summarizeForManagementGroup(managementGroupName, options) {
        return this.client.sendOperationRequest({ managementGroupName, options }, summarizeForManagementGroupOperationSpec);
    }
    /**
     * Queries policy states for the resources under the subscription.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscription(policyStatesResource, subscriptionId, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, options }, listQueryResultsForSubscriptionOperationSpec);
    }
    /**
     * Summarizes policy states for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    summarizeForSubscription(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, summarizeForSubscriptionOperationSpec);
    }
    /**
     * Queries policy states for the resources under the resource group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, resourceGroupName, options }, listQueryResultsForResourceGroupOperationSpec);
    }
    /**
     * Summarizes policy states for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    summarizeForResourceGroup(subscriptionId, resourceGroupName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, options }, summarizeForResourceGroupOperationSpec);
    }
    /**
     * Queries policy states for the resource.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listQueryResultsForResource(policyStatesResource, resourceId, options) {
        return this.client.sendOperationRequest({ policyStatesResource, resourceId, options }, listQueryResultsForResourceOperationSpec);
    }
    /**
     * Summarizes policy states for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    summarizeForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, summarizeForResourceOperationSpec);
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluation(subscriptionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { subscriptionId, options }, triggerSubscriptionEvaluationOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluationAndWait(subscriptionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerSubscriptionEvaluation(subscriptionId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluation(subscriptionId, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { subscriptionId, resourceGroupName, options }, triggerResourceGroupEvaluationOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluationAndWait(subscriptionId, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerResourceGroupEvaluation(subscriptionId, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Queries policy states for the subscription level policy set definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policySetDefinitionName,
            options
        }, listQueryResultsForPolicySetDefinitionOperationSpec);
    }
    /**
     * Summarizes policy states for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    summarizeForPolicySetDefinition(subscriptionId, policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policySetDefinitionName, options }, summarizeForPolicySetDefinitionOperationSpec);
    }
    /**
     * Queries policy states for the subscription level policy definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, policyDefinitionName, options }, listQueryResultsForPolicyDefinitionOperationSpec);
    }
    /**
     * Summarizes policy states for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    summarizeForPolicyDefinition(subscriptionId, policyDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyDefinitionName, options }, summarizeForPolicyDefinitionOperationSpec);
    }
    /**
     * Queries policy states for the subscription level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, policyAssignmentName, options }, listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec);
    }
    /**
     * Summarizes policy states for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyAssignmentName, options }, summarizeForSubscriptionLevelPolicyAssignmentOperationSpec);
    }
    /**
     * Queries policy states for the resource group level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            policyAssignmentName,
            options
        }, listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec);
    }
    /**
     * Summarizes policy states for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, policyAssignmentName, options }, summarizeForResourceGroupLevelPolicyAssignmentOperationSpec);
    }
    /**
     * ListQueryResultsForManagementGroupNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForManagementGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroupNext(policyStatesResource, managementGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, managementGroupName, nextLink, options }, listQueryResultsForManagementGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForSubscriptionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscription method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionNext(policyStatesResource, subscriptionId, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, nextLink, options }, listQueryResultsForSubscriptionNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceGroupNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupNext(policyStatesResource, subscriptionId, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            nextLink,
            options
        }, listQueryResultsForResourceGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
     *                 method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceNext(policyStatesResource, resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, resourceId, nextLink, options }, listQueryResultsForResourceNextOperationSpec);
    }
    /**
     * ListQueryResultsForPolicySetDefinitionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicySetDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinitionNext(policyStatesResource, subscriptionId, policySetDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policySetDefinitionName,
            nextLink,
            options
        }, listQueryResultsForPolicySetDefinitionNextOperationSpec);
    }
    /**
     * ListQueryResultsForPolicyDefinitionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicyDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinitionNext(policyStatesResource, subscriptionId, policyDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policyDefinitionName,
            nextLink,
            options
        }, listQueryResultsForPolicyDefinitionNextOperationSpec);
    }
    /**
     * ListQueryResultsForSubscriptionLevelPolicyAssignmentNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscriptionLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policyAssignmentName,
            nextLink,
            options
        }, listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceGroupLevelPolicyAssignmentNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroupLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            policyAssignmentName,
            nextLink,
            options
        }, listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listQueryResultsForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupName,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId1,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId1,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken,
        Parameters.expand
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const triggerSubscriptionEvaluationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.$host, Parameters.subscriptionId1],
    headerParameters: [Parameters.accept],
    serializer
};
const triggerResourceGroupEvaluationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForPolicySetDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policySetDefinitionName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForPolicySetDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policySetDefinitionName,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForPolicyDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyDefinitionName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForPolicyDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyDefinitionName,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForSubscriptionLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const summarizeForResourceGroupLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SummarizeResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.fromParam,
        Parameters.to
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesSummaryResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupName,
        Parameters.nextLink,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken,
        Parameters.expand
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.nextLink,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForPolicySetDefinitionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policySetDefinitionName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForPolicyDefinitionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyDefinitionName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyStatesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [
        Parameters.top,
        Parameters.filter,
        Parameters.apiVersion2,
        Parameters.orderBy,
        Parameters.select,
        Parameters.fromParam,
        Parameters.to,
        Parameters.apply,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.subscriptionId1,
        Parameters.authorizationNamespace,
        Parameters.policyAssignmentName,
        Parameters.policyStatesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=policyStates.js.map