/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Remediations operations. */
export class RemediationsImpl {
    /**
     * Initialize a new instance of the class Remediations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtManagementGroup(managementGroupId, remediationName, options) {
        const iter = this.listDeploymentsAtManagementGroupPagingAll(managementGroupId, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options);
            }
        };
    }
    listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtManagementGroupPagingPage_1() {
            let result = yield __await(this._listDeploymentsAtManagementGroup(managementGroupId, remediationName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listDeploymentsAtManagementGroupNext(managementGroupId, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listDeploymentsAtManagementGroupPagingAll(managementGroupId, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId, options) {
        const iter = this.listForManagementGroupPagingAll(managementGroupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForManagementGroupPagingPage(managementGroupId, options);
            }
        };
    }
    listForManagementGroupPagingPage(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listForManagementGroupPagingPage_1() {
            let result = yield __await(this._listForManagementGroup(managementGroupId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForManagementGroupNext(managementGroupId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForManagementGroupPagingAll(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listForManagementGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listForManagementGroupPagingPage(managementGroupId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtSubscription(remediationName, options) {
        const iter = this.listDeploymentsAtSubscriptionPagingAll(remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtSubscriptionPagingPage(remediationName, options);
            }
        };
    }
    listDeploymentsAtSubscriptionPagingPage(remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtSubscriptionPagingPage_1() {
            let result = yield __await(this._listDeploymentsAtSubscription(remediationName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listDeploymentsAtSubscriptionNext(remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listDeploymentsAtSubscriptionPagingAll(remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtSubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listDeploymentsAtSubscriptionPagingPage(remediationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options) {
        const iter = this.listForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForSubscriptionPagingPage(options);
            }
        };
    }
    listForSubscriptionPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingPage_1() {
            let result = yield __await(this._listForSubscription(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listForSubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options) {
        const iter = this.listDeploymentsAtResourceGroupPagingAll(resourceGroupName, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options);
            }
        };
    }
    listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtResourceGroupPagingPage_1() {
            let result = yield __await(this._listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listDeploymentsAtResourceGroupNext(resourceGroupName, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listDeploymentsAtResourceGroupPagingAll(resourceGroupName, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtResourceGroupPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result = yield __await(this._listForResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResource(resourceId, remediationName, options) {
        const iter = this.listDeploymentsAtResourcePagingAll(resourceId, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtResourcePagingPage(resourceId, remediationName, options);
            }
        };
    }
    listDeploymentsAtResourcePagingPage(resourceId, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtResourcePagingPage_1() {
            let result = yield __await(this._listDeploymentsAtResource(resourceId, remediationName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listDeploymentsAtResourceNext(resourceId, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listDeploymentsAtResourcePagingAll(resourceId, remediationName, options) {
        return __asyncGenerator(this, arguments, function* listDeploymentsAtResourcePagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = __asyncValues(this.listDeploymentsAtResourcePagingPage(resourceId, remediationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId, options) {
        const iter = this.listForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourcePagingPage(resourceId, options);
            }
        };
    }
    listForResourcePagingPage(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result = yield __await(this._listForResource(resourceId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForResourcePagingAll(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = __asyncValues(this.listForResourcePagingPage(resourceId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, listDeploymentsAtManagementGroupOperationSpec);
    }
    /**
     * Cancels a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, cancelAtManagementGroupOperationSpec);
    }
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    _listForManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, listForManagementGroupOperationSpec);
    }
    /**
     * Creates or updates a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(managementGroupId, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, parameters, options }, createOrUpdateAtManagementGroupOperationSpec);
    }
    /**
     * Gets an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, getAtManagementGroupOperationSpec);
    }
    /**
     * Deletes an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, deleteAtManagementGroupOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, listDeploymentsAtSubscriptionOperationSpec);
    }
    /**
     * Cancels a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, cancelAtSubscriptionOperationSpec);
    }
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    _listForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listForSubscriptionOperationSpec);
    }
    /**
     * Creates or updates a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtSubscription(remediationName, parameters, options) {
        return this.client.sendOperationRequest({ remediationName, parameters, options }, createOrUpdateAtSubscriptionOperationSpec);
    }
    /**
     * Gets an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, getAtSubscriptionOperationSpec);
    }
    /**
     * Deletes an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, deleteAtSubscriptionOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, listDeploymentsAtResourceGroupOperationSpec);
    }
    /**
     * Cancels a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, cancelAtResourceGroupOperationSpec);
    }
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceGroup(resourceGroupName, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, parameters, options }, createOrUpdateAtResourceGroupOperationSpec);
    }
    /**
     * Gets an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, getAtResourceGroupOperationSpec);
    }
    /**
     * Deletes an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, deleteAtResourceGroupOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, listDeploymentsAtResourceOperationSpec);
    }
    /**
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, cancelAtResourceOperationSpec);
    }
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listForResourceOperationSpec);
    }
    /**
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResource(resourceId, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, parameters, options }, createOrUpdateAtResourceOperationSpec);
    }
    /**
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, getAtResourceOperationSpec);
    }
    /**
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, deleteAtResourceOperationSpec);
    }
    /**
     * ListDeploymentsAtManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListDeploymentsAtManagementGroup method.
     * @param options The options parameters.
     */
    _listDeploymentsAtManagementGroupNext(managementGroupId, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, nextLink, options }, listDeploymentsAtManagementGroupNextOperationSpec);
    }
    /**
     * ListForManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
     * @param options The options parameters.
     */
    _listForManagementGroupNext(managementGroupId, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, nextLink, options }, listForManagementGroupNextOperationSpec);
    }
    /**
     * ListDeploymentsAtSubscriptionNext
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtSubscription
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtSubscriptionNext(remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ remediationName, nextLink, options }, listDeploymentsAtSubscriptionNextOperationSpec);
    }
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    _listForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listForSubscriptionNextOperationSpec);
    }
    /**
     * ListDeploymentsAtResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceGroupNext(resourceGroupName, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, nextLink, options }, listDeploymentsAtResourceGroupNextOperationSpec);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec);
    }
    /**
     * ListDeploymentsAtResourceNext
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResource
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceNext(resourceId, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, nextLink, options }, listDeploymentsAtResourceNextOperationSpec);
    }
    /**
     * ListForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listForResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listDeploymentsAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        201: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        201: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        201: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        201: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.Remediation
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.nextLink,
        Parameters.managementGroupId,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.nextLink,
        Parameters.managementGroupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listDeploymentsAtResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.nextLink,
        Parameters.remediationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RemediationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=remediations.js.map