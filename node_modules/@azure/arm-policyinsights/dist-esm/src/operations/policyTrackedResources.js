/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyTrackedResources operations. */
export class PolicyTrackedResourcesImpl {
    /**
     * Initialize a new instance of the class PolicyTrackedResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Queries policy tracked resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(managementGroupName, options) {
        const iter = this.listQueryResultsForManagementGroupPagingAll(managementGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options);
            }
        };
    }
    listQueryResultsForManagementGroupPagingPage(managementGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingPage_1() {
            let result = yield __await(this._listQueryResultsForManagementGroup(managementGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForManagementGroupNext(managementGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForManagementGroupPagingAll(managementGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the subscription.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(options) {
        const iter = this.listQueryResultsForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionPagingPage(options);
            }
        };
    }
    listQueryResultsForSubscriptionPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingPage_1() {
            let result = yield __await(this._listQueryResultsForSubscription(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForSubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the resource group.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(resourceGroupName, options) {
        const iter = this.listQueryResultsForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listQueryResultsForResourceGroupPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingPage_1() {
            let result = yield __await(this._listQueryResultsForResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(resourceId, options) {
        const iter = this.listQueryResultsForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourcePagingPage(resourceId, options);
            }
        };
    }
    listQueryResultsForResourcePagingPage(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingPage_1() {
            let result = yield __await(this._listQueryResultsForResource(resourceId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listQueryResultsForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listQueryResultsForResourcePagingAll(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listQueryResultsForResourcePagingPage(resourceId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroup(managementGroupName, options) {
        return this.client.sendOperationRequest({ managementGroupName, options }, listQueryResultsForManagementGroupOperationSpec);
    }
    /**
     * Queries policy tracked resources under the subscription.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listQueryResultsForSubscriptionOperationSpec);
    }
    /**
     * Queries policy tracked resources under the resource group.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listQueryResultsForResourceGroupOperationSpec);
    }
    /**
     * Queries policy tracked resources under the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listQueryResultsForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listQueryResultsForResourceOperationSpec);
    }
    /**
     * ListQueryResultsForManagementGroupNext
     * @param managementGroupName Management group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForManagementGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroupNext(managementGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupName, nextLink, options }, listQueryResultsForManagementGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscription method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listQueryResultsForSubscriptionNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listQueryResultsForResourceGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
     *                 method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listQueryResultsForResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listQueryResultsForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupName,
        Parameters.policyTrackedResourcesResource
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.resourceId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupsNamespace,
        Parameters.managementGroupName,
        Parameters.policyTrackedResourcesResource,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listQueryResultsForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: Mappers.QueryFailure
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.policyTrackedResourcesResource,
        Parameters.resourceId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=policyTrackedResources.js.map