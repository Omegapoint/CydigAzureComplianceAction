/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Attestations operations. */
export class AttestationsImpl {
    /**
     * Initialize a new instance of the class Attestations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all attestations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options) {
        const iter = this.listForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForSubscriptionPagingPage(options);
            }
        };
    }
    listForSubscriptionPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingPage_1() {
            let result = yield __await(this._listForSubscription(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listForSubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all attestations for the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result = yield __await(this._listForResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all attestations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId, options) {
        const iter = this.listForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourcePagingPage(resourceId, options);
            }
        };
    }
    listForResourcePagingPage(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result = yield __await(this._listForResource(resourceId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listForResourcePagingAll(resourceId, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listForResourcePagingPage(resourceId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets all attestations for the subscription.
     * @param options The options parameters.
     */
    _listForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listForSubscriptionOperationSpec);
    }
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscription(attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { attestationName, parameters, options }, createOrUpdateAtSubscriptionOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscriptionAndWait(attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtSubscription(attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtSubscription(attestationName, options) {
        return this.client.sendOperationRequest({ attestationName, options }, getAtSubscriptionOperationSpec);
    }
    /**
     * Deletes an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtSubscription(attestationName, options) {
        return this.client.sendOperationRequest({ attestationName, options }, deleteAtSubscriptionOperationSpec);
    }
    /**
     * Gets all attestations for the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec);
    }
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroup(resourceGroupName, attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, attestationName, parameters, options }, createOrUpdateAtResourceGroupOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroupAndWait(resourceGroupName, attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtResourceGroup(resourceGroupName, attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName, attestationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, attestationName, options }, getAtResourceGroupOperationSpec);
    }
    /**
     * Deletes an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName, attestationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, attestationName, options }, deleteAtResourceGroupOperationSpec);
    }
    /**
     * Gets all attestations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listForResourceOperationSpec);
    }
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResource(resourceId, attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceId, attestationName, parameters, options }, createOrUpdateAtResourceOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceAndWait(resourceId, attestationName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtResource(resourceId, attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResource(resourceId, attestationName, options) {
        return this.client.sendOperationRequest({ resourceId, attestationName, options }, getAtResourceOperationSpec);
    }
    /**
     * Deletes an existing attestation at individual resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId, attestationName, options) {
        return this.client.sendOperationRequest({ resourceId, attestationName, options }, deleteAtResourceOperationSpec);
    }
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    _listForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listForSubscriptionNextOperationSpec);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec);
    }
    /**
     * ListForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listForResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        201: {
            bodyMapper: Mappers.Attestation
        },
        202: {
            bodyMapper: Mappers.Attestation
        },
        204: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        201: {
            bodyMapper: Mappers.Attestation
        },
        202: {
            bodyMapper: Mappers.Attestation
        },
        204: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName1,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName1,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName1,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        201: {
            bodyMapper: Mappers.Attestation
        },
        202: {
            bodyMapper: Mappers.Attestation
        },
        204: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Attestation
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceId,
        Parameters.attestationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion4],
    urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=attestations.js.map