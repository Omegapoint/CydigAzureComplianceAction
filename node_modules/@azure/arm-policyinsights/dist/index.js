'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (KnownResourceDiscoveryMode) {
    /** Remediate resources that are already known to be non-compliant. */
    KnownResourceDiscoveryMode["ExistingNonCompliant"] = "ExistingNonCompliant";
    /** Re-evaluate the compliance state of resources and then remediate the resources found to be non-compliant. */
    KnownResourceDiscoveryMode["ReEvaluateCompliance"] = "ReEvaluateCompliance";
})(exports.KnownResourceDiscoveryMode || (exports.KnownResourceDiscoveryMode = {}));
(function (KnownCreatedByType) {
    KnownCreatedByType["User"] = "User";
    KnownCreatedByType["Application"] = "Application";
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
(function (KnownPolicyStatesResource) {
    KnownPolicyStatesResource["Default"] = "default";
    KnownPolicyStatesResource["Latest"] = "latest";
})(exports.KnownPolicyStatesResource || (exports.KnownPolicyStatesResource = {}));
(function (KnownFieldRestrictionResult) {
    /** The field and/or values are required by policy. */
    KnownFieldRestrictionResult["Required"] = "Required";
    /** The field will be removed by policy. */
    KnownFieldRestrictionResult["Removed"] = "Removed";
    /** The field and/or values will be denied by policy. */
    KnownFieldRestrictionResult["Deny"] = "Deny";
})(exports.KnownFieldRestrictionResult || (exports.KnownFieldRestrictionResult = {}));
(function (KnownComplianceState) {
    /** The resource is in compliance with the policy. */
    KnownComplianceState["Compliant"] = "Compliant";
    /** The resource is not in compliance with the policy. */
    KnownComplianceState["NonCompliant"] = "NonCompliant";
    /** The compliance state of the resource is not known. */
    KnownComplianceState["Unknown"] = "Unknown";
})(exports.KnownComplianceState || (exports.KnownComplianceState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const PolicyTrackedResourcesQueryResults = {
    type: {
        name: "Composite",
        className: "PolicyTrackedResourcesQueryResults",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyTrackedResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyTrackedResource = {
    type: {
        name: "Composite",
        className: "PolicyTrackedResource",
        modelProperties: {
            trackedResourceId: {
                serializedName: "trackedResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyDetails: {
                serializedName: "policyDetails",
                type: {
                    name: "Composite",
                    className: "PolicyDetails"
                }
            },
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "Composite",
                    className: "TrackedResourceModificationDetails"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "Composite",
                    className: "TrackedResourceModificationDetails"
                }
            },
            lastUpdateUtc: {
                serializedName: "lastUpdateUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PolicyDetails = {
    type: {
        name: "Composite",
        className: "PolicyDetails",
        modelProperties: {
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentDisplayName: {
                serializedName: "policyAssignmentDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentScope: {
                serializedName: "policyAssignmentScope",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policySetDefinitionId: {
                serializedName: "policySetDefinitionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackedResourceModificationDetails = {
    type: {
        name: "Composite",
        className: "TrackedResourceModificationDetails",
        modelProperties: {
            policyDetails: {
                serializedName: "policyDetails",
                type: {
                    name: "Composite",
                    className: "PolicyDetails"
                }
            },
            deploymentId: {
                serializedName: "deploymentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deploymentTime: {
                serializedName: "deploymentTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const QueryFailure = {
    type: {
        name: "Composite",
        className: "QueryFailure",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "QueryFailureError"
                }
            }
        }
    }
};
const QueryFailureError = {
    type: {
        name: "Composite",
        className: "QueryFailureError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RemediationDeploymentsListResult = {
    type: {
        name: "Composite",
        className: "RemediationDeploymentsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RemediationDeployment"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RemediationDeployment = {
    type: {
        name: "Composite",
        className: "RemediationDeployment",
        modelProperties: {
            remediatedResourceId: {
                serializedName: "remediatedResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deploymentId: {
                serializedName: "deploymentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceLocation: {
                serializedName: "resourceLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDefinition"
                }
            },
            createdOn: {
                serializedName: "createdOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "lastUpdatedOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorDefinition = {
    type: {
        name: "Composite",
        className: "ErrorDefinition",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDefinition"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TypedErrorInfo"
                        }
                    }
                }
            }
        }
    }
};
const TypedErrorInfo = {
    type: {
        name: "Composite",
        className: "TypedErrorInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDefinition"
                }
            }
        }
    }
};
const Remediation = {
    type: {
        name: "Composite",
        className: "Remediation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            policyAssignmentId: {
                serializedName: "properties.policyAssignmentId",
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "properties.policyDefinitionReferenceId",
                type: {
                    name: "String"
                }
            },
            resourceDiscoveryMode: {
                serializedName: "properties.resourceDiscoveryMode",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "properties.createdOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "properties.lastUpdatedOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            filters: {
                serializedName: "properties.filters",
                type: {
                    name: "Composite",
                    className: "RemediationFilters"
                }
            },
            deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                type: {
                    name: "Composite",
                    className: "RemediationDeploymentSummary"
                }
            },
            statusMessage: {
                serializedName: "properties.statusMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            correlationId: {
                serializedName: "properties.correlationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceCount: {
                serializedName: "properties.resourceCount",
                type: {
                    name: "Number"
                }
            },
            parallelDeployments: {
                serializedName: "properties.parallelDeployments",
                type: {
                    name: "Number"
                }
            },
            failureThreshold: {
                serializedName: "properties.failureThreshold",
                type: {
                    name: "Composite",
                    className: "RemediationPropertiesFailureThreshold"
                }
            }
        }
    }
};
const RemediationFilters = {
    type: {
        name: "Composite",
        className: "RemediationFilters",
        modelProperties: {
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RemediationDeploymentSummary = {
    type: {
        name: "Composite",
        className: "RemediationDeploymentSummary",
        modelProperties: {
            totalDeployments: {
                serializedName: "totalDeployments",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            successfulDeployments: {
                serializedName: "successfulDeployments",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            failedDeployments: {
                serializedName: "failedDeployments",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RemediationPropertiesFailureThreshold = {
    type: {
        name: "Composite",
        className: "RemediationPropertiesFailureThreshold",
        modelProperties: {
            percentage: {
                serializedName: "percentage",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const RemediationListResult = {
    type: {
        name: "Composite",
        className: "RemediationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Remediation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyEventsQueryResults = {
    type: {
        name: "Composite",
        className: "PolicyEventsQueryResults",
        modelProperties: {
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            odataCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyEvent"
                        }
                    }
                }
            }
        }
    }
};
const PolicyEvent = {
    type: {
        name: "Composite",
        className: "PolicyEvent",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            odataId: {
                serializedName: "@odata\\.id",
                type: {
                    name: "String"
                }
            },
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                type: {
                    name: "String"
                }
            },
            effectiveParameters: {
                serializedName: "effectiveParameters",
                type: {
                    name: "String"
                }
            },
            isCompliant: {
                serializedName: "isCompliant",
                type: {
                    name: "Boolean"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            resourceLocation: {
                serializedName: "resourceLocation",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            },
            resourceTags: {
                serializedName: "resourceTags",
                type: {
                    name: "String"
                }
            },
            policyAssignmentName: {
                serializedName: "policyAssignmentName",
                type: {
                    name: "String"
                }
            },
            policyAssignmentOwner: {
                serializedName: "policyAssignmentOwner",
                type: {
                    name: "String"
                }
            },
            policyAssignmentParameters: {
                serializedName: "policyAssignmentParameters",
                type: {
                    name: "String"
                }
            },
            policyAssignmentScope: {
                serializedName: "policyAssignmentScope",
                type: {
                    name: "String"
                }
            },
            policyDefinitionName: {
                serializedName: "policyDefinitionName",
                type: {
                    name: "String"
                }
            },
            policyDefinitionAction: {
                serializedName: "policyDefinitionAction",
                type: {
                    name: "String"
                }
            },
            policyDefinitionCategory: {
                serializedName: "policyDefinitionCategory",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionId: {
                serializedName: "policySetDefinitionId",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionName: {
                serializedName: "policySetDefinitionName",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionOwner: {
                serializedName: "policySetDefinitionOwner",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionCategory: {
                serializedName: "policySetDefinitionCategory",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionParameters: {
                serializedName: "policySetDefinitionParameters",
                type: {
                    name: "String"
                }
            },
            managementGroupIds: {
                serializedName: "managementGroupIds",
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            principalOid: {
                serializedName: "principalOid",
                type: {
                    name: "String"
                }
            },
            components: {
                serializedName: "components",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentEventDetails"
                        }
                    }
                }
            }
        }
    }
};
const ComponentEventDetails = {
    type: {
        name: "Composite",
        className: "ComponentEventDetails",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            principalOid: {
                serializedName: "principalOid",
                type: {
                    name: "String"
                }
            },
            policyDefinitionAction: {
                serializedName: "policyDefinitionAction",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyStatesQueryResults = {
    type: {
        name: "Composite",
        className: "PolicyStatesQueryResults",
        modelProperties: {
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            odataCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyState"
                        }
                    }
                }
            }
        }
    }
};
const PolicyState = {
    type: {
        name: "Composite",
        className: "PolicyState",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            odataId: {
                serializedName: "@odata\\.id",
                type: {
                    name: "String"
                }
            },
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                type: {
                    name: "String"
                }
            },
            effectiveParameters: {
                serializedName: "effectiveParameters",
                type: {
                    name: "String"
                }
            },
            isCompliant: {
                serializedName: "isCompliant",
                type: {
                    name: "Boolean"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            resourceLocation: {
                serializedName: "resourceLocation",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            },
            resourceTags: {
                serializedName: "resourceTags",
                type: {
                    name: "String"
                }
            },
            policyAssignmentName: {
                serializedName: "policyAssignmentName",
                type: {
                    name: "String"
                }
            },
            policyAssignmentOwner: {
                serializedName: "policyAssignmentOwner",
                type: {
                    name: "String"
                }
            },
            policyAssignmentParameters: {
                serializedName: "policyAssignmentParameters",
                type: {
                    name: "String"
                }
            },
            policyAssignmentScope: {
                serializedName: "policyAssignmentScope",
                type: {
                    name: "String"
                }
            },
            policyDefinitionName: {
                serializedName: "policyDefinitionName",
                type: {
                    name: "String"
                }
            },
            policyDefinitionAction: {
                serializedName: "policyDefinitionAction",
                type: {
                    name: "String"
                }
            },
            policyDefinitionCategory: {
                serializedName: "policyDefinitionCategory",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionId: {
                serializedName: "policySetDefinitionId",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionName: {
                serializedName: "policySetDefinitionName",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionOwner: {
                serializedName: "policySetDefinitionOwner",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionCategory: {
                serializedName: "policySetDefinitionCategory",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionParameters: {
                serializedName: "policySetDefinitionParameters",
                type: {
                    name: "String"
                }
            },
            managementGroupIds: {
                serializedName: "managementGroupIds",
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                type: {
                    name: "String"
                }
            },
            policyEvaluationDetails: {
                serializedName: "policyEvaluationDetails",
                type: {
                    name: "Composite",
                    className: "PolicyEvaluationDetails"
                }
            },
            policyDefinitionGroupNames: {
                serializedName: "policyDefinitionGroupNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            components: {
                serializedName: "components",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentStateDetails"
                        }
                    }
                }
            },
            policyDefinitionVersion: {
                serializedName: "policyDefinitionVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policySetDefinitionVersion: {
                serializedName: "policySetDefinitionVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentVersion: {
                serializedName: "policyAssignmentVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyEvaluationDetails = {
    type: {
        name: "Composite",
        className: "PolicyEvaluationDetails",
        modelProperties: {
            evaluatedExpressions: {
                serializedName: "evaluatedExpressions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExpressionEvaluationDetails"
                        }
                    }
                }
            },
            ifNotExistsDetails: {
                serializedName: "ifNotExistsDetails",
                type: {
                    name: "Composite",
                    className: "IfNotExistsEvaluationDetails"
                }
            }
        }
    }
};
const ExpressionEvaluationDetails = {
    type: {
        name: "Composite",
        className: "ExpressionEvaluationDetails",
        modelProperties: {
            result: {
                serializedName: "result",
                type: {
                    name: "String"
                }
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String"
                }
            },
            expressionKind: {
                serializedName: "expressionKind",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            expressionValue: {
                serializedName: "expressionValue",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            targetValue: {
                serializedName: "targetValue",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IfNotExistsEvaluationDetails = {
    type: {
        name: "Composite",
        className: "IfNotExistsEvaluationDetails",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            totalResources: {
                serializedName: "totalResources",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ComponentStateDetails = {
    type: {
        name: "Composite",
        className: "ComponentStateDetails",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SummarizeResults = {
    type: {
        name: "Composite",
        className: "SummarizeResults",
        modelProperties: {
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            odataCount: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 1
                },
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Summary"
                        }
                    }
                }
            }
        }
    }
};
const Summary = {
    type: {
        name: "Composite",
        className: "Summary",
        modelProperties: {
            odataId: {
                serializedName: "@odata\\.id",
                type: {
                    name: "String"
                }
            },
            odataContext: {
                serializedName: "@odata\\.context",
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SummaryResults"
                }
            },
            policyAssignments: {
                serializedName: "policyAssignments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyAssignmentSummary"
                        }
                    }
                }
            }
        }
    }
};
const SummaryResults = {
    type: {
        name: "Composite",
        className: "SummaryResults",
        modelProperties: {
            queryResultsUri: {
                serializedName: "queryResultsUri",
                type: {
                    name: "String"
                }
            },
            nonCompliantResources: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "nonCompliantResources",
                type: {
                    name: "Number"
                }
            },
            nonCompliantPolicies: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "nonCompliantPolicies",
                type: {
                    name: "Number"
                }
            },
            resourceDetails: {
                serializedName: "resourceDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComplianceDetail"
                        }
                    }
                }
            },
            policyDetails: {
                serializedName: "policyDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComplianceDetail"
                        }
                    }
                }
            },
            policyGroupDetails: {
                serializedName: "policyGroupDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComplianceDetail"
                        }
                    }
                }
            }
        }
    }
};
const ComplianceDetail = {
    type: {
        name: "Composite",
        className: "ComplianceDetail",
        modelProperties: {
            complianceState: {
                serializedName: "complianceState",
                type: {
                    name: "String"
                }
            },
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PolicyAssignmentSummary = {
    type: {
        name: "Composite",
        className: "PolicyAssignmentSummary",
        modelProperties: {
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                type: {
                    name: "String"
                }
            },
            policySetDefinitionId: {
                serializedName: "policySetDefinitionId",
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SummaryResults"
                }
            },
            policyDefinitions: {
                serializedName: "policyDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyDefinitionSummary"
                        }
                    }
                }
            },
            policyGroups: {
                serializedName: "policyGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyGroupSummary"
                        }
                    }
                }
            }
        }
    }
};
const PolicyDefinitionSummary = {
    type: {
        name: "Composite",
        className: "PolicyDefinitionSummary",
        modelProperties: {
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                type: {
                    name: "String"
                }
            },
            policyDefinitionGroupNames: {
                serializedName: "policyDefinitionGroupNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            effect: {
                serializedName: "effect",
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SummaryResults"
                }
            }
        }
    }
};
const PolicyGroupSummary = {
    type: {
        name: "Composite",
        className: "PolicyGroupSummary",
        modelProperties: {
            policyGroupName: {
                serializedName: "policyGroupName",
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SummaryResults"
                }
            }
        }
    }
};
const OperationsListResults = {
    type: {
        name: "Composite",
        className: "OperationsListResults",
        modelProperties: {
            odataCount: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyMetadata = {
    type: {
        name: "Composite",
        className: "PolicyMetadata",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadataId: {
                serializedName: "properties.metadataId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "properties.category",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "properties.title",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            owner: {
                serializedName: "properties.owner",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            additionalContentUrl: {
                serializedName: "properties.additionalContentUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "properties.metadata",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requirements: {
                serializedName: "properties.requirements",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyMetadataSlimProperties = {
    type: {
        name: "Composite",
        className: "PolicyMetadataSlimProperties",
        modelProperties: {
            metadataId: {
                serializedName: "metadataId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            owner: {
                serializedName: "owner",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            additionalContentUrl: {
                serializedName: "additionalContentUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ErrorResponseAutoGenerated = {
    type: {
        name: "Composite",
        className: "ErrorResponseAutoGenerated",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDefinitionAutoGenerated"
                }
            }
        }
    }
};
const ErrorDefinitionAutoGenerated = {
    type: {
        name: "Composite",
        className: "ErrorDefinitionAutoGenerated",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDefinitionAutoGenerated"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TypedErrorInfo"
                        }
                    }
                }
            }
        }
    }
};
const PolicyMetadataCollection = {
    type: {
        name: "Composite",
        className: "PolicyMetadataCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SlimPolicyMetadata"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SlimPolicyMetadata = {
    type: {
        name: "Composite",
        className: "SlimPolicyMetadata",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadataId: {
                serializedName: "properties.metadataId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "properties.category",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "properties.title",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            owner: {
                serializedName: "properties.owner",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            additionalContentUrl: {
                serializedName: "properties.additionalContentUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "properties.metadata",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const CheckRestrictionsRequest = {
    type: {
        name: "Composite",
        className: "CheckRestrictionsRequest",
        modelProperties: {
            resourceDetails: {
                serializedName: "resourceDetails",
                type: {
                    name: "Composite",
                    className: "CheckRestrictionsResourceDetails"
                }
            },
            pendingFields: {
                serializedName: "pendingFields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PendingField"
                        }
                    }
                }
            }
        }
    }
};
const CheckRestrictionsResourceDetails = {
    type: {
        name: "Composite",
        className: "CheckRestrictionsResourceDetails",
        modelProperties: {
            resourceContent: {
                serializedName: "resourceContent",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            apiVersion: {
                serializedName: "apiVersion",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PendingField = {
    type: {
        name: "Composite",
        className: "PendingField",
        modelProperties: {
            field: {
                serializedName: "field",
                required: true,
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CheckRestrictionsResult = {
    type: {
        name: "Composite",
        className: "CheckRestrictionsResult",
        modelProperties: {
            fieldRestrictions: {
                serializedName: "fieldRestrictions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldRestrictions"
                        }
                    }
                }
            },
            contentEvaluationResult: {
                serializedName: "contentEvaluationResult",
                type: {
                    name: "Composite",
                    className: "CheckRestrictionsResultContentEvaluationResult"
                }
            }
        }
    }
};
const FieldRestrictions = {
    type: {
        name: "Composite",
        className: "FieldRestrictions",
        modelProperties: {
            field: {
                serializedName: "field",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            restrictions: {
                serializedName: "restrictions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldRestriction"
                        }
                    }
                }
            }
        }
    }
};
const FieldRestriction = {
    type: {
        name: "Composite",
        className: "FieldRestriction",
        modelProperties: {
            result: {
                serializedName: "result",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "PolicyReference"
                }
            }
        }
    }
};
const PolicyReference = {
    type: {
        name: "Composite",
        className: "PolicyReference",
        modelProperties: {
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policySetDefinitionId: {
                serializedName: "policySetDefinitionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckRestrictionsResultContentEvaluationResult = {
    type: {
        name: "Composite",
        className: "CheckRestrictionsResultContentEvaluationResult",
        modelProperties: {
            policyEvaluations: {
                serializedName: "policyEvaluations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PolicyEvaluationResult"
                        }
                    }
                }
            }
        }
    }
};
const PolicyEvaluationResult = {
    type: {
        name: "Composite",
        className: "PolicyEvaluationResult",
        modelProperties: {
            policyInfo: {
                serializedName: "policyInfo",
                type: {
                    name: "Composite",
                    className: "PolicyReference"
                }
            },
            evaluationResult: {
                serializedName: "evaluationResult",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            evaluationDetails: {
                serializedName: "evaluationDetails",
                type: {
                    name: "Composite",
                    className: "PolicyEvaluationDetails"
                }
            }
        }
    }
};
const AttestationListResult = {
    type: {
        name: "Composite",
        className: "AttestationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Attestation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AttestationEvidence = {
    type: {
        name: "Composite",
        className: "AttestationEvidence",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            sourceUri: {
                serializedName: "sourceUri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponseAutoGenerated2 = {
    type: {
        name: "Composite",
        className: "ErrorResponseAutoGenerated2",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDefinitionAutoGenerated2"
                }
            }
        }
    }
};
const ErrorDefinitionAutoGenerated2 = {
    type: {
        name: "Composite",
        className: "ErrorDefinitionAutoGenerated2",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDefinitionAutoGenerated2"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TypedErrorInfo"
                        }
                    }
                }
            }
        }
    }
};
const PolicyMetadataProperties = {
    type: {
        name: "Composite",
        className: "PolicyMetadataProperties",
        modelProperties: Object.assign(Object.assign({}, PolicyMetadataSlimProperties.type.modelProperties), { description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requirements: {
                serializedName: "requirements",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Attestation = {
    type: {
        name: "Composite",
        className: "Attestation",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, policyAssignmentId: {
                serializedName: "properties.policyAssignmentId",
                required: true,
                type: {
                    name: "String"
                }
            }, policyDefinitionReferenceId: {
                serializedName: "properties.policyDefinitionReferenceId",
                type: {
                    name: "String"
                }
            }, complianceState: {
                serializedName: "properties.complianceState",
                type: {
                    name: "String"
                }
            }, expiresOn: {
                serializedName: "properties.expiresOn",
                type: {
                    name: "DateTime"
                }
            }, owner: {
                serializedName: "properties.owner",
                type: {
                    name: "String"
                }
            }, comments: {
                serializedName: "properties.comments",
                type: {
                    name: "String"
                }
            }, evidence: {
                serializedName: "properties.evidence",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AttestationEvidence"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastComplianceStateChangeAt: {
                serializedName: "properties.lastComplianceStateChangeAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PolicyTrackedResourcesQueryResults: PolicyTrackedResourcesQueryResults,
    PolicyTrackedResource: PolicyTrackedResource,
    PolicyDetails: PolicyDetails,
    TrackedResourceModificationDetails: TrackedResourceModificationDetails,
    QueryFailure: QueryFailure,
    QueryFailureError: QueryFailureError,
    RemediationDeploymentsListResult: RemediationDeploymentsListResult,
    RemediationDeployment: RemediationDeployment,
    ErrorDefinition: ErrorDefinition,
    TypedErrorInfo: TypedErrorInfo,
    ErrorResponse: ErrorResponse,
    Remediation: Remediation,
    RemediationFilters: RemediationFilters,
    RemediationDeploymentSummary: RemediationDeploymentSummary,
    RemediationPropertiesFailureThreshold: RemediationPropertiesFailureThreshold,
    SystemData: SystemData,
    RemediationListResult: RemediationListResult,
    PolicyEventsQueryResults: PolicyEventsQueryResults,
    PolicyEvent: PolicyEvent,
    ComponentEventDetails: ComponentEventDetails,
    PolicyStatesQueryResults: PolicyStatesQueryResults,
    PolicyState: PolicyState,
    PolicyEvaluationDetails: PolicyEvaluationDetails,
    ExpressionEvaluationDetails: ExpressionEvaluationDetails,
    IfNotExistsEvaluationDetails: IfNotExistsEvaluationDetails,
    ComponentStateDetails: ComponentStateDetails,
    SummarizeResults: SummarizeResults,
    Summary: Summary,
    SummaryResults: SummaryResults,
    ComplianceDetail: ComplianceDetail,
    PolicyAssignmentSummary: PolicyAssignmentSummary,
    PolicyDefinitionSummary: PolicyDefinitionSummary,
    PolicyGroupSummary: PolicyGroupSummary,
    OperationsListResults: OperationsListResults,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    PolicyMetadata: PolicyMetadata,
    PolicyMetadataSlimProperties: PolicyMetadataSlimProperties,
    ErrorResponseAutoGenerated: ErrorResponseAutoGenerated,
    ErrorDefinitionAutoGenerated: ErrorDefinitionAutoGenerated,
    PolicyMetadataCollection: PolicyMetadataCollection,
    SlimPolicyMetadata: SlimPolicyMetadata,
    CheckRestrictionsRequest: CheckRestrictionsRequest,
    CheckRestrictionsResourceDetails: CheckRestrictionsResourceDetails,
    PendingField: PendingField,
    CheckRestrictionsResult: CheckRestrictionsResult,
    FieldRestrictions: FieldRestrictions,
    FieldRestriction: FieldRestriction,
    PolicyReference: PolicyReference,
    CheckRestrictionsResultContentEvaluationResult: CheckRestrictionsResultContentEvaluationResult,
    PolicyEvaluationResult: PolicyEvaluationResult,
    AttestationListResult: AttestationListResult,
    AttestationEvidence: AttestationEvidence,
    Resource: Resource,
    ErrorResponseAutoGenerated2: ErrorResponseAutoGenerated2,
    ErrorDefinitionAutoGenerated2: ErrorDefinitionAutoGenerated2,
    PolicyMetadataProperties: PolicyMetadataProperties,
    Attestation: Attestation
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const managementGroupsNamespace = {
    parameterPath: "managementGroupsNamespace",
    mapper: {
        defaultValue: "Microsoft.Management",
        isConstant: true,
        serializedName: "managementGroupsNamespace",
        type: {
            name: "String"
        }
    }
};
const managementGroupName = {
    parameterPath: "managementGroupName",
    mapper: {
        serializedName: "managementGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const policyTrackedResourcesResource = {
    parameterPath: "policyTrackedResourcesResource",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "policyTrackedResourcesResource",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "queryOptions", "top"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const filter = {
    parameterPath: ["options", "queryOptions", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-07-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceId = {
    parameterPath: "resourceId",
    mapper: {
        serializedName: "resourceId",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const managementGroupId = {
    parameterPath: "managementGroupId",
    mapper: {
        serializedName: "managementGroupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const remediationName = {
    parameterPath: "remediationName",
    mapper: {
        serializedName: "remediationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Remediation
};
const policyEventsResource = {
    parameterPath: "policyEventsResource",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "policyEventsResource",
        type: {
            name: "String"
        }
    }
};
const apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const orderBy = {
    parameterPath: ["options", "queryOptions", "orderBy"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const select = {
    parameterPath: ["options", "queryOptions", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
const fromParam = {
    parameterPath: ["options", "queryOptions", "fromParam"],
    mapper: {
        serializedName: "$from",
        type: {
            name: "DateTime"
        }
    }
};
const to = {
    parameterPath: ["options", "queryOptions", "to"],
    mapper: {
        serializedName: "$to",
        type: {
            name: "DateTime"
        }
    }
};
const apply = {
    parameterPath: ["options", "queryOptions", "apply"],
    mapper: {
        serializedName: "$apply",
        type: {
            name: "String"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "queryOptions", "skipToken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const subscriptionId1 = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "queryOptions", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const authorizationNamespace = {
    parameterPath: "authorizationNamespace",
    mapper: {
        defaultValue: "Microsoft.Authorization",
        isConstant: true,
        serializedName: "authorizationNamespace",
        type: {
            name: "String"
        }
    }
};
const policySetDefinitionName = {
    parameterPath: "policySetDefinitionName",
    mapper: {
        serializedName: "policySetDefinitionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const policyDefinitionName = {
    parameterPath: "policyDefinitionName",
    mapper: {
        serializedName: "policyDefinitionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const policyAssignmentName = {
    parameterPath: "policyAssignmentName",
    mapper: {
        serializedName: "policyAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const policyStatesResource = {
    parameterPath: "policyStatesResource",
    mapper: {
        serializedName: "policyStatesResource",
        required: true,
        type: {
            name: "String"
        }
    }
};
const policyStatesSummaryResource = {
    parameterPath: "policyStatesSummaryResource",
    mapper: {
        defaultValue: "latest",
        isConstant: true,
        serializedName: "policyStatesSummaryResource",
        type: {
            name: "String"
        }
    }
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: CheckRestrictionsRequest
};
const apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion4 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: Attestation
};
const attestationName = {
    parameterPath: "attestationName",
    mapper: {
        serializedName: "attestationName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyTrackedResources operations. */
class PolicyTrackedResourcesImpl {
    /**
     * Initialize a new instance of the class PolicyTrackedResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Queries policy tracked resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(managementGroupName, options) {
        const iter = this.listQueryResultsForManagementGroupPagingAll(managementGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options);
            }
        };
    }
    listQueryResultsForManagementGroupPagingPage(managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForManagementGroup(managementGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForManagementGroupNext(managementGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForManagementGroupPagingAll(managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the subscription.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(options) {
        const iter = this.listQueryResultsForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionPagingPage(options);
            }
        };
    }
    listQueryResultsForSubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForSubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForSubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the resource group.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(resourceGroupName, options) {
        const iter = this.listQueryResultsForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listQueryResultsForResourceGroupPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(resourceId, options) {
        const iter = this.listQueryResultsForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourcePagingPage(resourceId, options);
            }
        };
    }
    listQueryResultsForResourcePagingPage(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResource(resourceId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourcePagingAll(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourcePagingPage(resourceId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Queries policy tracked resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroup(managementGroupName, options) {
        return this.client.sendOperationRequest({ managementGroupName, options }, listQueryResultsForManagementGroupOperationSpec);
    }
    /**
     * Queries policy tracked resources under the subscription.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listQueryResultsForSubscriptionOperationSpec);
    }
    /**
     * Queries policy tracked resources under the resource group.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listQueryResultsForResourceGroupOperationSpec);
    }
    /**
     * Queries policy tracked resources under the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listQueryResultsForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listQueryResultsForResourceOperationSpec);
    }
    /**
     * ListQueryResultsForManagementGroupNext
     * @param managementGroupName Management group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForManagementGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroupNext(managementGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupName, nextLink, options }, listQueryResultsForManagementGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscription method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listQueryResultsForSubscriptionNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listQueryResultsForResourceGroupNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
     *                 method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listQueryResultsForResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listQueryResultsForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        policyTrackedResourcesResource
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        resourceId
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        policyTrackedResourcesResource,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};
const listQueryResultsForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyTrackedResourcesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [top, filter, apiVersion],
    urlParameters: [
        $host,
        policyTrackedResourcesResource,
        resourceId,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Remediations operations. */
class RemediationsImpl {
    /**
     * Initialize a new instance of the class Remediations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtManagementGroup(managementGroupId, remediationName, options) {
        const iter = this.listDeploymentsAtManagementGroupPagingAll(managementGroupId, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options);
            }
        };
    }
    listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtManagementGroupPagingPage_1() {
            let result = yield tslib.__await(this._listDeploymentsAtManagementGroup(managementGroupId, remediationName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listDeploymentsAtManagementGroupNext(managementGroupId, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listDeploymentsAtManagementGroupPagingAll(managementGroupId, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listDeploymentsAtManagementGroupPagingPage(managementGroupId, remediationName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId, options) {
        const iter = this.listForManagementGroupPagingAll(managementGroupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForManagementGroupPagingPage(managementGroupId, options);
            }
        };
    }
    listForManagementGroupPagingPage(managementGroupId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForManagementGroupPagingPage_1() {
            let result = yield tslib.__await(this._listForManagementGroup(managementGroupId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForManagementGroupNext(managementGroupId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForManagementGroupPagingAll(managementGroupId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForManagementGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForManagementGroupPagingPage(managementGroupId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtSubscription(remediationName, options) {
        const iter = this.listDeploymentsAtSubscriptionPagingAll(remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtSubscriptionPagingPage(remediationName, options);
            }
        };
    }
    listDeploymentsAtSubscriptionPagingPage(remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listDeploymentsAtSubscription(remediationName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listDeploymentsAtSubscriptionNext(remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listDeploymentsAtSubscriptionPagingAll(remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtSubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listDeploymentsAtSubscriptionPagingPage(remediationName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options) {
        const iter = this.listForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForSubscriptionPagingPage(options);
            }
        };
    }
    listForSubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listForSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listForSubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForSubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listForSubscriptionPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForSubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options) {
        const iter = this.listDeploymentsAtResourceGroupPagingAll(resourceGroupName, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options);
            }
        };
    }
    listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listDeploymentsAtResourceGroupNext(resourceGroupName, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listDeploymentsAtResourceGroupPagingAll(resourceGroupName, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtResourceGroupPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listDeploymentsAtResourceGroupPagingPage(resourceGroupName, remediationName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listForResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResource(resourceId, remediationName, options) {
        const iter = this.listDeploymentsAtResourcePagingAll(resourceId, remediationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listDeploymentsAtResourcePagingPage(resourceId, remediationName, options);
            }
        };
    }
    listDeploymentsAtResourcePagingPage(resourceId, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtResourcePagingPage_1() {
            let result = yield tslib.__await(this._listDeploymentsAtResource(resourceId, remediationName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listDeploymentsAtResourceNext(resourceId, remediationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listDeploymentsAtResourcePagingAll(resourceId, remediationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listDeploymentsAtResourcePagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listDeploymentsAtResourcePagingPage(resourceId, remediationName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId, options) {
        const iter = this.listForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourcePagingPage(resourceId, options);
            }
        };
    }
    listForResourcePagingPage(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result = yield tslib.__await(this._listForResource(resourceId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForResourcePagingAll(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForResourcePagingPage(resourceId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, listDeploymentsAtManagementGroupOperationSpec);
    }
    /**
     * Cancels a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, cancelAtManagementGroupOperationSpec);
    }
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    _listForManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, listForManagementGroupOperationSpec);
    }
    /**
     * Creates or updates a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(managementGroupId, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, parameters, options }, createOrUpdateAtManagementGroupOperationSpec);
    }
    /**
     * Gets an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, getAtManagementGroupOperationSpec);
    }
    /**
     * Deletes an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(managementGroupId, remediationName, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, options }, deleteAtManagementGroupOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, listDeploymentsAtSubscriptionOperationSpec);
    }
    /**
     * Cancels a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, cancelAtSubscriptionOperationSpec);
    }
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    _listForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listForSubscriptionOperationSpec);
    }
    /**
     * Creates or updates a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtSubscription(remediationName, parameters, options) {
        return this.client.sendOperationRequest({ remediationName, parameters, options }, createOrUpdateAtSubscriptionOperationSpec);
    }
    /**
     * Gets an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, getAtSubscriptionOperationSpec);
    }
    /**
     * Deletes an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtSubscription(remediationName, options) {
        return this.client.sendOperationRequest({ remediationName, options }, deleteAtSubscriptionOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, listDeploymentsAtResourceGroupOperationSpec);
    }
    /**
     * Cancels a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, cancelAtResourceGroupOperationSpec);
    }
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceGroup(resourceGroupName, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, parameters, options }, createOrUpdateAtResourceGroupOperationSpec);
    }
    /**
     * Gets an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, getAtResourceGroupOperationSpec);
    }
    /**
     * Deletes an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName, remediationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, options }, deleteAtResourceGroupOperationSpec);
    }
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    _listDeploymentsAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, listDeploymentsAtResourceOperationSpec);
    }
    /**
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, cancelAtResourceOperationSpec);
    }
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listForResourceOperationSpec);
    }
    /**
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResource(resourceId, remediationName, parameters, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, parameters, options }, createOrUpdateAtResourceOperationSpec);
    }
    /**
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, getAtResourceOperationSpec);
    }
    /**
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId, remediationName, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, options }, deleteAtResourceOperationSpec);
    }
    /**
     * ListDeploymentsAtManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListDeploymentsAtManagementGroup method.
     * @param options The options parameters.
     */
    _listDeploymentsAtManagementGroupNext(managementGroupId, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, remediationName, nextLink, options }, listDeploymentsAtManagementGroupNextOperationSpec);
    }
    /**
     * ListForManagementGroupNext
     * @param managementGroupId Management group ID.
     * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
     * @param options The options parameters.
     */
    _listForManagementGroupNext(managementGroupId, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, nextLink, options }, listForManagementGroupNextOperationSpec);
    }
    /**
     * ListDeploymentsAtSubscriptionNext
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtSubscription
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtSubscriptionNext(remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ remediationName, nextLink, options }, listDeploymentsAtSubscriptionNextOperationSpec);
    }
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    _listForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listForSubscriptionNextOperationSpec);
    }
    /**
     * ListDeploymentsAtResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceGroupNext(resourceGroupName, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, remediationName, nextLink, options }, listDeploymentsAtResourceGroupNextOperationSpec);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec);
    }
    /**
     * ListDeploymentsAtResourceNext
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResource
     *                 method.
     * @param options The options parameters.
     */
    _listDeploymentsAtResourceNext(resourceId, remediationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, remediationName, nextLink, options }, listDeploymentsAtResourceNextOperationSpec);
    }
    /**
     * ListForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listForResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient.createSerializer(Mappers, /* isXml */ false);
const listDeploymentsAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const cancelAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        201: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteAtManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const cancelAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        201: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        remediationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const cancelAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        201: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        remediationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteAtResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const cancelAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [$host, resourceId],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        201: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        remediationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteAtResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Remediation
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        nextLink,
        managementGroupId,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        nextLink,
        managementGroupId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listDeploymentsAtResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationDeploymentsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, apiVersion1],
    urlParameters: [
        $host,
        resourceId,
        nextLink,
        remediationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RemediationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [top, filter, apiVersion1],
    urlParameters: [$host, resourceId, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyEvents operations. */
class PolicyEventsImpl {
    /**
     * Initialize a new instance of the class PolicyEvents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Queries policy events for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(managementGroupName, options) {
        const iter = this.listQueryResultsForManagementGroupPagingAll(managementGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options);
            }
        };
    }
    listQueryResultsForManagementGroupPagingPage(managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForManagementGroup(managementGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForManagementGroupNext(managementGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForManagementGroupPagingAll(managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForManagementGroupPagingPage(managementGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Queries policy events for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(subscriptionId, options) {
        const iter = this.listQueryResultsForSubscriptionPagingAll(subscriptionId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionPagingPage(subscriptionId, options);
            }
        };
    }
    listQueryResultsForSubscriptionPagingPage(subscriptionId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForSubscription(subscriptionId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForSubscriptionNext(subscriptionId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionPagingAll(subscriptionId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForSubscriptionPagingPage(subscriptionId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Queries policy events for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(subscriptionId, resourceGroupName, options) {
        const iter = this.listQueryResultsForResourceGroupPagingAll(subscriptionId, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupPagingPage(subscriptionId, resourceGroupName, options);
            }
        };
    }
    listQueryResultsForResourceGroupPagingPage(subscriptionId, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResourceGroup(subscriptionId, resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceGroupNext(subscriptionId, resourceGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupPagingAll(subscriptionId, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourceGroupPagingPage(subscriptionId, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Queries policy events for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(resourceId, options) {
        const iter = this.listQueryResultsForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourcePagingPage(resourceId, options);
            }
        };
    }
    listQueryResultsForResourcePagingPage(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResource(resourceId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourcePagingAll(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourcePagingPage(resourceId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Queries policy events for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicySetDefinition(subscriptionId, policySetDefinitionName, options) {
        const iter = this.listQueryResultsForPolicySetDefinitionPagingAll(subscriptionId, policySetDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicySetDefinitionPagingPage(subscriptionId, policySetDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicySetDefinitionPagingPage(subscriptionId, policySetDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForPolicySetDefinition(subscriptionId, policySetDefinitionName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForPolicySetDefinitionNext(subscriptionId, policySetDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicySetDefinitionPagingAll(subscriptionId, policySetDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForPolicySetDefinitionPagingPage(subscriptionId, policySetDefinitionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Queries policy events for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicyDefinition(subscriptionId, policyDefinitionName, options) {
        const iter = this.listQueryResultsForPolicyDefinitionPagingAll(subscriptionId, policyDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicyDefinitionPagingPage(subscriptionId, policyDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicyDefinitionPagingPage(subscriptionId, policyDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForPolicyDefinition(subscriptionId, policyDefinitionName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForPolicyDefinitionNext(subscriptionId, policyDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicyDefinitionPagingAll(subscriptionId, policyDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForPolicyDefinitionPagingPage(subscriptionId, policyDefinitionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Queries policy events for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId, policyAssignmentName, options) {
        const iter = this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(subscriptionId, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(subscriptionId, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(subscriptionId, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId, policyAssignmentName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForSubscriptionLevelPolicyAssignmentNext(subscriptionId, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(subscriptionId, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(subscriptionId, policyAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Queries policy events for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        const iter = this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(subscriptionId, resourceGroupName, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(subscriptionId, resourceGroupName, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId, resourceGroupName, policyAssignmentName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceGroupLevelPolicyAssignmentNext(subscriptionId, resourceGroupName, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(subscriptionId, resourceGroupName, policyAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Queries policy events for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroup(managementGroupName, options) {
        return this.client.sendOperationRequest({ managementGroupName, options }, listQueryResultsForManagementGroupOperationSpec$1);
    }
    /**
     * Queries policy events for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscription(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, listQueryResultsForSubscriptionOperationSpec$1);
    }
    /**
     * Queries policy events for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroup(subscriptionId, resourceGroupName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, options }, listQueryResultsForResourceGroupOperationSpec$1);
    }
    /**
     * Queries policy events for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listQueryResultsForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listQueryResultsForResourceOperationSpec$1);
    }
    /**
     * Queries policy events for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinition(subscriptionId, policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policySetDefinitionName, options }, listQueryResultsForPolicySetDefinitionOperationSpec);
    }
    /**
     * Queries policy events for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinition(subscriptionId, policyDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyDefinitionName, options }, listQueryResultsForPolicyDefinitionOperationSpec);
    }
    /**
     * Queries policy events for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyAssignmentName, options }, listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec);
    }
    /**
     * Queries policy events for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, policyAssignmentName, options }, listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec);
    }
    /**
     * ListQueryResultsForManagementGroupNext
     * @param managementGroupName Management group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForManagementGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroupNext(managementGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupName, nextLink, options }, listQueryResultsForManagementGroupNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForSubscriptionNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscription method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionNext(subscriptionId, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, nextLink, options }, listQueryResultsForSubscriptionNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForResourceGroupNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupNext(subscriptionId, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, nextLink, options }, listQueryResultsForResourceGroupNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
     *                 method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listQueryResultsForResourceNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForPolicySetDefinitionNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicySetDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinitionNext(subscriptionId, policySetDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, policySetDefinitionName, nextLink, options }, listQueryResultsForPolicySetDefinitionNextOperationSpec);
    }
    /**
     * ListQueryResultsForPolicyDefinitionNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicyDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinitionNext(subscriptionId, policyDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyDefinitionName, nextLink, options }, listQueryResultsForPolicyDefinitionNextOperationSpec);
    }
    /**
     * ListQueryResultsForSubscriptionLevelPolicyAssignmentNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscriptionLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignmentNext(subscriptionId, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyAssignmentName, nextLink, options }, listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec);
    }
    /**
     * ListQueryResultsForResourceGroupLevelPolicyAssignmentNext
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroupLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignmentNext(subscriptionId, resourceGroupName, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            subscriptionId,
            resourceGroupName,
            policyAssignmentName,
            nextLink,
            options
        }, listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient.createSerializer(Mappers, /* isXml */ false);
const listQueryResultsForManagementGroupOperationSpec$1 = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        policyEventsResource
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForSubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        policyEventsResource,
        subscriptionId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        policyEventsResource,
        subscriptionId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceOperationSpec$1 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken,
        expand
    ],
    urlParameters: [
        $host,
        resourceId,
        policyEventsResource
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForPolicySetDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policySetDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForPolicyDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForManagementGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        nextLink,
        policyEventsResource
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForSubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        policyEventsResource,
        subscriptionId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        nextLink,
        policyEventsResource,
        subscriptionId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken,
        expand
    ],
    urlParameters: [
        $host,
        resourceId,
        nextLink,
        policyEventsResource
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForPolicySetDefinitionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policySetDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForPolicyDefinitionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyEventsQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        nextLink,
        policyEventsResource,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyStates operations. */
class PolicyStatesImpl {
    /**
     * Initialize a new instance of the class PolicyStates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Queries policy states for the resources under the management group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options) {
        const iter = this.listQueryResultsForManagementGroupPagingAll(policyStatesResource, managementGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options);
            }
        };
    }
    listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForManagementGroupNext(policyStatesResource, managementGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForManagementGroupPagingAll(policyStatesResource, managementGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForManagementGroupPagingPage(policyStatesResource, managementGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the subscription.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(policyStatesResource, subscriptionId, options) {
        const iter = this.listQueryResultsForSubscriptionPagingAll(policyStatesResource, subscriptionId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options);
            }
        };
    }
    listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForSubscription(policyStatesResource, subscriptionId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForSubscriptionNext(policyStatesResource, subscriptionId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionPagingAll(policyStatesResource, subscriptionId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForSubscriptionPagingPage(policyStatesResource, subscriptionId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the resource group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options) {
        const iter = this.listQueryResultsForResourceGroupPagingAll(policyStatesResource, subscriptionId, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options);
            }
        };
    }
    listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceGroupNext(policyStatesResource, subscriptionId, resourceGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupPagingAll(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourceGroupPagingPage(policyStatesResource, subscriptionId, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Queries policy states for the resource.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(policyStatesResource, resourceId, options) {
        const iter = this.listQueryResultsForResourcePagingAll(policyStatesResource, resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options);
            }
        };
    }
    listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResource(policyStatesResource, resourceId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceNext(policyStatesResource, resourceId, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourcePagingAll(policyStatesResource, resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourcePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourcePagingPage(policyStatesResource, resourceId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy set definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        const iter = this.listQueryResultsForPolicySetDefinitionPagingAll(policyStatesResource, subscriptionId, policySetDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForPolicySetDefinitionNext(policyStatesResource, subscriptionId, policySetDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicySetDefinitionPagingAll(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicySetDefinitionPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForPolicySetDefinitionPagingPage(policyStatesResource, subscriptionId, policySetDefinitionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        const iter = this.listQueryResultsForPolicyDefinitionPagingAll(policyStatesResource, subscriptionId, policyDefinitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options);
            }
        };
    }
    listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForPolicyDefinitionNext(policyStatesResource, subscriptionId, policyDefinitionName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForPolicyDefinitionPagingAll(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForPolicyDefinitionPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForPolicyDefinitionPagingPage(policyStatesResource, subscriptionId, policyDefinitionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Queries policy states for the subscription level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        const iter = this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForSubscriptionLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, policyAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Queries policy states for the resource group level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        const iter = this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options);
            }
        };
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage_1() {
            let result = yield tslib.__await(this._listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listQueryResultsForResourceGroupLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Queries policy states for the resources under the management group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroup(policyStatesResource, managementGroupName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, managementGroupName, options }, listQueryResultsForManagementGroupOperationSpec$2);
    }
    /**
     * Summarizes policy states for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    summarizeForManagementGroup(managementGroupName, options) {
        return this.client.sendOperationRequest({ managementGroupName, options }, summarizeForManagementGroupOperationSpec);
    }
    /**
     * Queries policy states for the resources under the subscription.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscription(policyStatesResource, subscriptionId, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, options }, listQueryResultsForSubscriptionOperationSpec$2);
    }
    /**
     * Summarizes policy states for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    summarizeForSubscription(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, summarizeForSubscriptionOperationSpec);
    }
    /**
     * Queries policy states for the resources under the resource group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, resourceGroupName, options }, listQueryResultsForResourceGroupOperationSpec$2);
    }
    /**
     * Summarizes policy states for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    summarizeForResourceGroup(subscriptionId, resourceGroupName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, options }, summarizeForResourceGroupOperationSpec);
    }
    /**
     * Queries policy states for the resource.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listQueryResultsForResource(policyStatesResource, resourceId, options) {
        return this.client.sendOperationRequest({ policyStatesResource, resourceId, options }, listQueryResultsForResourceOperationSpec$2);
    }
    /**
     * Summarizes policy states for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    summarizeForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, summarizeForResourceOperationSpec);
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluation(subscriptionId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { subscriptionId, options }, triggerSubscriptionEvaluationOperationSpec);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluationAndWait(subscriptionId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerSubscriptionEvaluation(subscriptionId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluation(subscriptionId, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { subscriptionId, resourceGroupName, options }, triggerResourceGroupEvaluationOperationSpec);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
        });
    }
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluationAndWait(subscriptionId, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerResourceGroupEvaluation(subscriptionId, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Queries policy states for the subscription level policy set definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, policySetDefinitionName, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policySetDefinitionName,
            options
        }, listQueryResultsForPolicySetDefinitionOperationSpec$1);
    }
    /**
     * Summarizes policy states for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    summarizeForPolicySetDefinition(subscriptionId, policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policySetDefinitionName, options }, summarizeForPolicySetDefinitionOperationSpec);
    }
    /**
     * Queries policy states for the subscription level policy definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, policyDefinitionName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, policyDefinitionName, options }, listQueryResultsForPolicyDefinitionOperationSpec$1);
    }
    /**
     * Summarizes policy states for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    summarizeForPolicyDefinition(subscriptionId, policyDefinitionName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyDefinitionName, options }, summarizeForPolicyDefinitionOperationSpec);
    }
    /**
     * Queries policy states for the subscription level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, policyAssignmentName, options }, listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec$1);
    }
    /**
     * Summarizes policy states for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, policyAssignmentName, options }, summarizeForSubscriptionLevelPolicyAssignmentOperationSpec);
    }
    /**
     * Queries policy states for the resource group level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            policyAssignmentName,
            options
        }, listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec$1);
    }
    /**
     * Summarizes policy states for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId, resourceGroupName, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ subscriptionId, resourceGroupName, policyAssignmentName, options }, summarizeForResourceGroupLevelPolicyAssignmentOperationSpec);
    }
    /**
     * ListQueryResultsForManagementGroupNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForManagementGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForManagementGroupNext(policyStatesResource, managementGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, managementGroupName, nextLink, options }, listQueryResultsForManagementGroupNextOperationSpec$2);
    }
    /**
     * ListQueryResultsForSubscriptionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscription method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionNext(policyStatesResource, subscriptionId, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, subscriptionId, nextLink, options }, listQueryResultsForSubscriptionNextOperationSpec$2);
    }
    /**
     * ListQueryResultsForResourceGroupNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroup method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupNext(policyStatesResource, subscriptionId, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            nextLink,
            options
        }, listQueryResultsForResourceGroupNextOperationSpec$2);
    }
    /**
     * ListQueryResultsForResourceNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
     *                 method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceNext(policyStatesResource, resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ policyStatesResource, resourceId, nextLink, options }, listQueryResultsForResourceNextOperationSpec$2);
    }
    /**
     * ListQueryResultsForPolicySetDefinitionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicySetDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicySetDefinitionNext(policyStatesResource, subscriptionId, policySetDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policySetDefinitionName,
            nextLink,
            options
        }, listQueryResultsForPolicySetDefinitionNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForPolicyDefinitionNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForPolicyDefinition method.
     * @param options The options parameters.
     */
    _listQueryResultsForPolicyDefinitionNext(policyStatesResource, subscriptionId, policyDefinitionName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policyDefinitionName,
            nextLink,
            options
        }, listQueryResultsForPolicyDefinitionNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForSubscriptionLevelPolicyAssignmentNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForSubscriptionLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForSubscriptionLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            policyAssignmentName,
            nextLink,
            options
        }, listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec$1);
    }
    /**
     * ListQueryResultsForResourceGroupLevelPolicyAssignmentNext
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListQueryResultsForResourceGroupLevelPolicyAssignment method.
     * @param options The options parameters.
     */
    _listQueryResultsForResourceGroupLevelPolicyAssignmentNext(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            policyAssignmentName,
            nextLink,
            options
        }, listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient.createSerializer(Mappers, /* isXml */ false);
const listQueryResultsForManagementGroupOperationSpec$2 = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForManagementGroupOperationSpec = {
    path: "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForSubscriptionOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceGroupOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId1,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId1,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceOperationSpec$2 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken,
        expand
    ],
    urlParameters: [
        $host,
        resourceId,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForResourceOperationSpec = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        resourceId,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const triggerSubscriptionEvaluationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [$host, subscriptionId1],
    headerParameters: [accept],
    serializer: serializer$3
};
const triggerResourceGroupEvaluationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForPolicySetDefinitionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policySetDefinitionName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForPolicySetDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policySetDefinitionName,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForPolicyDefinitionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policyDefinitionName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForPolicyDefinitionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policyDefinitionName,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForSubscriptionLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const summarizeForResourceGroupLevelPolicyAssignmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SummarizeResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        fromParam,
        to
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesSummaryResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForManagementGroupNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        managementGroupsNamespace,
        managementGroupName,
        nextLink,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForSubscriptionNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId1,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceGroupNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        nextLink,
        subscriptionId1,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken,
        expand
    ],
    urlParameters: [
        $host,
        resourceId,
        nextLink,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForPolicySetDefinitionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId1,
        authorizationNamespace,
        policySetDefinitionName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForPolicyDefinitionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId1,
        authorizationNamespace,
        policyDefinitionName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyStatesQueryResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [
        top,
        filter,
        apiVersion2,
        orderBy,
        select,
        fromParam,
        to,
        apply,
        skipToken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        nextLink,
        subscriptionId1,
        authorizationNamespace,
        policyAssignmentName,
        policyStatesResource
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists available operations.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.PolicyInsights/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsListResults
        },
        default: {
            bodyMapper: QueryFailure
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyMetadataOperations operations. */
class PolicyMetadataOperationsImpl {
    /**
     * Initialize a new instance of the class PolicyMetadataOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of the policy metadata resources.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get policy metadata resource.
     * @param resourceName The name of the policy metadata resource.
     * @param options The options parameters.
     */
    getResource(resourceName, options) {
        return this.client.sendOperationRequest({ resourceName, options }, getResourceOperationSpec);
    }
    /**
     * Get a list of the policy metadata resources.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient.createSerializer(Mappers, /* isXml */ false);
const getResourceOperationSpec = {
    path: "/providers/Microsoft.PolicyInsights/policyMetadata/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyMetadata
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [$host, resourceName],
    headerParameters: [accept],
    serializer: serializer$5
};
const listOperationSpec$1 = {
    path: "/providers/Microsoft.PolicyInsights/policyMetadata",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyMetadataCollection
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated
        }
    },
    queryParameters: [top, apiVersion2],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyMetadataCollection
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated
        }
    },
    queryParameters: [top, apiVersion2],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PolicyRestrictions operations. */
class PolicyRestrictionsImpl {
    /**
     * Initialize a new instance of the class PolicyRestrictions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtSubscriptionScope(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkAtSubscriptionScopeOperationSpec);
    }
    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this
     * when the resource group the resource will be created in is already known.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtResourceGroupScope(resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, parameters, options }, checkAtResourceGroupScopeOperationSpec);
    }
}
// Operation Specifications
const serializer$6 = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkAtSubscriptionScopeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckRestrictionsResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion3],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const checkAtResourceGroupScopeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckRestrictionsResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Attestations operations. */
class AttestationsImpl {
    /**
     * Initialize a new instance of the class Attestations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all attestations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options) {
        const iter = this.listForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForSubscriptionPagingPage(options);
            }
        };
    }
    listForSubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listForSubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listForSubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForSubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listForSubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForSubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all attestations for the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listForResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all attestations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId, options) {
        const iter = this.listForResourcePagingAll(resourceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForResourcePagingPage(resourceId, options);
            }
        };
    }
    listForResourcePagingPage(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result = yield tslib.__await(this._listForResource(resourceId, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForResourceNext(resourceId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForResourcePagingAll(resourceId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForResourcePagingPage(resourceId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets all attestations for the subscription.
     * @param options The options parameters.
     */
    _listForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listForSubscriptionOperationSpec$1);
    }
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscription(attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { attestationName, parameters, options }, createOrUpdateAtSubscriptionOperationSpec$1);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscriptionAndWait(attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtSubscription(attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtSubscription(attestationName, options) {
        return this.client.sendOperationRequest({ attestationName, options }, getAtSubscriptionOperationSpec$1);
    }
    /**
     * Deletes an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtSubscription(attestationName, options) {
        return this.client.sendOperationRequest({ attestationName, options }, deleteAtSubscriptionOperationSpec$1);
    }
    /**
     * Gets all attestations for the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec$1);
    }
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroup(resourceGroupName, attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, attestationName, parameters, options }, createOrUpdateAtResourceGroupOperationSpec$1);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroupAndWait(resourceGroupName, attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtResourceGroup(resourceGroupName, attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName, attestationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, attestationName, options }, getAtResourceGroupOperationSpec$1);
    }
    /**
     * Deletes an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName, attestationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, attestationName, options }, deleteAtResourceGroupOperationSpec$1);
    }
    /**
     * Gets all attestations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    _listForResource(resourceId, options) {
        return this.client.sendOperationRequest({ resourceId, options }, listForResourceOperationSpec$1);
    }
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResource(resourceId, attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceId, attestationName, parameters, options }, createOrUpdateAtResourceOperationSpec$1);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceAndWait(resourceId, attestationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtResource(resourceId, attestationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets an existing attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResource(resourceId, attestationName, options) {
        return this.client.sendOperationRequest({ resourceId, attestationName, options }, getAtResourceOperationSpec$1);
    }
    /**
     * Deletes an existing attestation at individual resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId, attestationName, options) {
        return this.client.sendOperationRequest({ resourceId, attestationName, options }, deleteAtResourceOperationSpec$1);
    }
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    _listForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listForSubscriptionNextOperationSpec$1);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec$1);
    }
    /**
     * ListForResourceNext
     * @param resourceId Resource ID.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceId, nextLink, options }, listForResourceNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$7 = coreClient.createSerializer(Mappers, /* isXml */ false);
const listForSubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateAtSubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        201: {
            bodyMapper: Attestation
        },
        202: {
            bodyMapper: Attestation
        },
        204: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        attestationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getAtSubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const deleteAtSubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listForResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateAtResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        201: {
            bodyMapper: Attestation
        },
        202: {
            bodyMapper: Attestation
        },
        204: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName1,
        attestationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getAtResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName1,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const deleteAtResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName1,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listForResourceOperationSpec$1 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [$host, resourceId],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateAtResourceOperationSpec$1 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        201: {
            bodyMapper: Attestation
        },
        202: {
            bodyMapper: Attestation
        },
        204: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        resourceId,
        attestationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getAtResourceOperationSpec$1 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Attestation
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        resourceId,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const deleteAtResourceOperationSpec$1 = {
    path: "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [apiVersion4],
    urlParameters: [
        $host,
        resourceId,
        attestationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listForSubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listForResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listForResourceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttestationListResult
        },
        default: {
            bodyMapper: ErrorResponseAutoGenerated2
        }
    },
    queryParameters: [top, filter, apiVersion4],
    urlParameters: [$host, resourceId, nextLink],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class PolicyInsightsClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the PolicyInsightsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-policyinsights/5.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: options.endpoint || "https://management.azure.com" });
        super(optionsWithDefaults);
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.policyTrackedResources = new PolicyTrackedResourcesImpl(this);
        this.remediations = new RemediationsImpl(this);
        this.policyEvents = new PolicyEventsImpl(this);
        this.policyStates = new PolicyStatesImpl(this);
        this.operations = new OperationsImpl(this);
        this.policyMetadataOperations = new PolicyMetadataOperationsImpl(this);
        this.policyRestrictions = new PolicyRestrictionsImpl(this);
        this.attestations = new AttestationsImpl(this);
    }
}

exports.PolicyInsightsClient = PolicyInsightsClient;
//# sourceMappingURL=index.js.map
