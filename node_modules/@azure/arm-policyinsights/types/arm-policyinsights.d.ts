import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** An attestation resource. */
export declare type Attestation = Resource & {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The resource ID of the policy assignment that the attestation is setting the state for. */
    policyAssignmentId: string;
    /** The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition. */
    policyDefinitionReferenceId?: string;
    /** The compliance state that should be set on the resource. */
    complianceState?: ComplianceState;
    /** The time the compliance state should expire. */
    expiresOn?: Date;
    /** The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID. */
    owner?: string;
    /** Comments describing why this attestation was created. */
    comments?: string;
    /** The evidence supporting the compliance state set in this attestation. */
    evidence?: AttestationEvidence[];
    /**
     * The status of the attestation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The time the compliance state was last changed in this attestation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastComplianceStateChangeAt?: Date;
};

/** A piece of evidence supporting the compliance state set in the attestation. */
export declare interface AttestationEvidence {
    /** The description for this piece of evidence. */
    description?: string;
    /** The URI location of the evidence. */
    sourceUri?: string;
}

/** List of attestations. */
export declare interface AttestationListResult {
    /**
     * Array of attestation definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Attestation[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Attestations. */
export declare interface Attestations {
    /**
     * Gets all attestations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options?: AttestationsListForSubscriptionOptionalParams): PagedAsyncIterableIterator<Attestation>;
    /**
     * Gets all attestations for the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: AttestationsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<Attestation>;
    /**
     * Gets all attestations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId: string, options?: AttestationsListForResourceOptionalParams): PagedAsyncIterableIterator<Attestation>;
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscription(attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtSubscriptionOptionalParams): Promise<PollerLike<PollOperationState<AttestationsCreateOrUpdateAtSubscriptionResponse>, AttestationsCreateOrUpdateAtSubscriptionResponse>>;
    /**
     * Creates or updates an attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtSubscriptionAndWait(attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtSubscriptionOptionalParams): Promise<AttestationsCreateOrUpdateAtSubscriptionResponse>;
    /**
     * Gets an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtSubscription(attestationName: string, options?: AttestationsGetAtSubscriptionOptionalParams): Promise<AttestationsGetAtSubscriptionResponse>;
    /**
     * Deletes an existing attestation at subscription scope.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtSubscription(attestationName: string, options?: AttestationsDeleteAtSubscriptionOptionalParams): Promise<void>;
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroup(resourceGroupName: string, attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtResourceGroupOptionalParams): Promise<PollerLike<PollOperationState<AttestationsCreateOrUpdateAtResourceGroupResponse>, AttestationsCreateOrUpdateAtResourceGroupResponse>>;
    /**
     * Creates or updates an attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceGroupAndWait(resourceGroupName: string, attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtResourceGroupOptionalParams): Promise<AttestationsCreateOrUpdateAtResourceGroupResponse>;
    /**
     * Gets an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName: string, attestationName: string, options?: AttestationsGetAtResourceGroupOptionalParams): Promise<AttestationsGetAtResourceGroupResponse>;
    /**
     * Deletes an existing attestation at resource group scope.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName: string, attestationName: string, options?: AttestationsDeleteAtResourceGroupOptionalParams): Promise<void>;
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResource(resourceId: string, attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtResourceOptionalParams): Promise<PollerLike<PollOperationState<AttestationsCreateOrUpdateAtResourceResponse>, AttestationsCreateOrUpdateAtResourceResponse>>;
    /**
     * Creates or updates an attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAtResourceAndWait(resourceId: string, attestationName: string, parameters: Attestation, options?: AttestationsCreateOrUpdateAtResourceOptionalParams): Promise<AttestationsCreateOrUpdateAtResourceResponse>;
    /**
     * Gets an existing attestation at resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    getAtResource(resourceId: string, attestationName: string, options?: AttestationsGetAtResourceOptionalParams): Promise<AttestationsGetAtResourceResponse>;
    /**
     * Deletes an existing attestation at individual resource scope.
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId: string, attestationName: string, options?: AttestationsDeleteAtResourceOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AttestationsCreateOrUpdateAtResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdateAtResourceGroup operation. */
export declare type AttestationsCreateOrUpdateAtResourceGroupResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsCreateOrUpdateAtResourceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdateAtResource operation. */
export declare type AttestationsCreateOrUpdateAtResourceResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsCreateOrUpdateAtSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdateAtSubscription operation. */
export declare type AttestationsCreateOrUpdateAtSubscriptionResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsDeleteAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AttestationsDeleteAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AttestationsDeleteAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AttestationsGetAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtResourceGroup operation. */
export declare type AttestationsGetAtResourceGroupResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsGetAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtResource operation. */
export declare type AttestationsGetAtResourceResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsGetAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtSubscription operation. */
export declare type AttestationsGetAtSubscriptionResponse = Attestation;

/** Optional parameters. */
export declare interface AttestationsListForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceGroupNext operation. */
export declare type AttestationsListForResourceGroupNextResponse = AttestationListResult;

/** Optional parameters. */
export declare interface AttestationsListForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceGroup operation. */
export declare type AttestationsListForResourceGroupResponse = AttestationListResult;

/** Optional parameters. */
export declare interface AttestationsListForResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceNext operation. */
export declare type AttestationsListForResourceNextResponse = AttestationListResult;

/** Optional parameters. */
export declare interface AttestationsListForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResource operation. */
export declare type AttestationsListForResourceResponse = AttestationListResult;

/** Optional parameters. */
export declare interface AttestationsListForSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForSubscriptionNext operation. */
export declare type AttestationsListForSubscriptionNextResponse = AttestationListResult;

/** Optional parameters. */
export declare interface AttestationsListForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForSubscription operation. */
export declare type AttestationsListForSubscriptionResponse = AttestationListResult;

/** The check policy restrictions parameters describing the resource that is being evaluated. */
export declare interface CheckRestrictionsRequest {
    /** The information about the resource that will be evaluated. */
    resourceDetails: CheckRestrictionsResourceDetails;
    /** The list of fields and values that should be evaluated for potential restrictions. */
    pendingFields?: PendingField[];
}

/** The information about the resource that will be evaluated. */
export declare interface CheckRestrictionsResourceDetails {
    /** The resource content. This should include whatever properties are already known and can be a partial set of all resource properties. */
    resourceContent: Record<string, unknown>;
    /** The api-version of the resource content. */
    apiVersion?: string;
    /** The scope where the resource is being created. For example, if the resource is a child resource this would be the parent resource's resource ID. */
    scope?: string;
}

/** The result of a check policy restrictions evaluation on a resource. */
export declare interface CheckRestrictionsResult {
    /**
     * The restrictions that will be placed on various fields in the resource by policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fieldRestrictions?: FieldRestrictions[];
    /**
     * Evaluation results for the provided partial resource content.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentEvaluationResult?: CheckRestrictionsResultContentEvaluationResult;
}

/** Evaluation results for the provided partial resource content. */
export declare interface CheckRestrictionsResultContentEvaluationResult {
    /** Policy evaluation results against the given resource content. This will indicate if the partial content that was provided will be denied as-is. */
    policyEvaluations?: PolicyEvaluationResult[];
}

/** The compliance state rollup. */
export declare interface ComplianceDetail {
    /** The compliance state. */
    complianceState?: string;
    /** Summarized count value for this compliance state. */
    count?: number;
}

/**
 * Defines values for ComplianceState. \
 * {@link KnownComplianceState} can be used interchangeably with ComplianceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Compliant**: The resource is in compliance with the policy. \
 * **NonCompliant**: The resource is not in compliance with the policy. \
 * **Unknown**: The compliance state of the resource is not known.
 */
export declare type ComplianceState = string;

/** Component event details. */
export declare interface ComponentEventDetails {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Component Id. */
    id?: string;
    /** Component type. */
    type?: string;
    /** Component name. */
    name?: string;
    /** Timestamp for component policy event record. */
    timestamp?: Date;
    /** Tenant ID for the policy event record. */
    tenantId?: string;
    /** Principal object ID for the user who initiated the resource component operation that triggered the policy event. */
    principalOid?: string;
    /** Policy definition action, i.e. effect. */
    policyDefinitionAction?: string;
}

/** Component state details. */
export declare interface ComponentStateDetails {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Component Id. */
    id?: string;
    /** Component type. */
    type?: string;
    /** Component name. */
    name?: string;
    /** Component compliance evaluation timestamp. */
    timestamp?: Date;
    /** Component compliance state. */
    complianceState?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Error definition. */
export declare interface ErrorDefinition {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinition[];
    /**
     * Additional scenario specific error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: TypedErrorInfo[];
}

/** Error definition. */
export declare interface ErrorDefinitionAutoGenerated {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinitionAutoGenerated[];
    /**
     * Additional scenario specific error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: TypedErrorInfo[];
}

/** Error definition. */
export declare interface ErrorDefinitionAutoGenerated2 {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinitionAutoGenerated2[];
    /**
     * Additional scenario specific error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: TypedErrorInfo[];
}

/** Error response. */
export declare interface ErrorResponse {
    /** The error details. */
    error?: ErrorDefinition;
}

/** Error response. */
export declare interface ErrorResponseAutoGenerated {
    /** The error details. */
    error?: ErrorDefinitionAutoGenerated;
}

/** Error response. */
export declare interface ErrorResponseAutoGenerated2 {
    /** The error details. */
    error?: ErrorDefinitionAutoGenerated2;
}

/** Evaluation details of policy language expressions. */
export declare interface ExpressionEvaluationDetails {
    /** Evaluation result. */
    result?: string;
    /** Expression evaluated. */
    expression?: string;
    /**
     * The kind of expression that was evaluated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expressionKind?: string;
    /** Property path if the expression is a field or an alias. */
    path?: string;
    /** Value of the expression. */
    expressionValue?: Record<string, unknown>;
    /** Target value to be compared with the expression value. */
    targetValue?: Record<string, unknown>;
    /** Operator to compare the expression value and the target value. */
    operator?: string;
}

/** The restrictions on a field imposed by a specific policy. */
export declare interface FieldRestriction {
    /**
     * The type of restriction that is imposed on the field.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly result?: FieldRestrictionResult;
    /**
     * The value that policy will set for the field if the user does not provide a value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultValue?: string;
    /**
     * The values that policy either requires or denies for the field.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly values?: string[];
    /**
     * The details of the policy that is causing the field restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policy?: PolicyReference;
}

/**
 * Defines values for FieldRestrictionResult. \
 * {@link KnownFieldRestrictionResult} can be used interchangeably with FieldRestrictionResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Required**: The field and\/or values are required by policy. \
 * **Removed**: The field will be removed by policy. \
 * **Deny**: The field and\/or values will be denied by policy.
 */
export declare type FieldRestrictionResult = string;

/** The restrictions that will be placed on a field in the resource by policy. */
export declare interface FieldRestrictions {
    /**
     * The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly field?: string;
    /** The restrictions placed on that field by policy. */
    restrictions?: FieldRestriction[];
}

/** Evaluation details of IfNotExists effect. */
export declare interface IfNotExistsEvaluationDetails {
    /** ID of the last evaluated resource for IfNotExists effect. */
    resourceId?: string;
    /** Total number of resources to which the existence condition is applicable. */
    totalResources?: number;
}

/** Known values of {@link ComplianceState} that the service accepts. */
export declare enum KnownComplianceState {
    /** The resource is in compliance with the policy. */
    Compliant = "Compliant",
    /** The resource is not in compliance with the policy. */
    NonCompliant = "NonCompliant",
    /** The compliance state of the resource is not known. */
    Unknown = "Unknown"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    User = "User",
    Application = "Application",
    ManagedIdentity = "ManagedIdentity",
    Key = "Key"
}

/** Known values of {@link FieldRestrictionResult} that the service accepts. */
export declare enum KnownFieldRestrictionResult {
    /** The field and/or values are required by policy. */
    Required = "Required",
    /** The field will be removed by policy. */
    Removed = "Removed",
    /** The field and/or values will be denied by policy. */
    Deny = "Deny"
}

/** Known values of {@link PolicyStatesResource} that the service accepts. */
export declare enum KnownPolicyStatesResource {
    Default = "default",
    Latest = "latest"
}

/** Known values of {@link ResourceDiscoveryMode} that the service accepts. */
export declare enum KnownResourceDiscoveryMode {
    /** Remediate resources that are already known to be non-compliant. */
    ExistingNonCompliant = "ExistingNonCompliant",
    /** Re-evaluate the compliance state of resources and then remediate the resources found to be non-compliant. */
    ReEvaluateCompliance = "ReEvaluateCompliance"
}

/** Operation definition. */
export declare interface Operation {
    /** Operation name. */
    name?: string;
    /** Display metadata associated with the operation. */
    display?: OperationDisplay;
}

/** Display metadata associated with the operation. */
export declare interface OperationDisplay {
    /** Resource provider name. */
    provider?: string;
    /** Resource name on which the operation is performed. */
    resource?: string;
    /** Operation name. */
    operation?: string;
    /** Operation description. */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists available operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationsListResults;

/** List of available operations. */
export declare interface OperationsListResults {
    /** OData entity count; represents the number of operations returned. */
    odataCount?: number;
    /** List of available operations. */
    value?: Operation[];
}

/** A field that should be evaluated against Azure Policy to determine restrictions. */
export declare interface PendingField {
    /** The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias. */
    field: string;
    /** The list of potential values for the field that should be evaluated against Azure Policy. */
    values?: string[];
}

/** Policy assignment summary. */
export declare interface PolicyAssignmentSummary {
    /** Policy assignment ID. */
    policyAssignmentId?: string;
    /** Policy set definition ID, if the policy assignment is for a policy set. */
    policySetDefinitionId?: string;
    /** Compliance summary for the policy assignment. */
    results?: SummaryResults;
    /** Policy definitions summary. */
    policyDefinitions?: PolicyDefinitionSummary[];
    /** Policy definition group summary. */
    policyGroups?: PolicyGroupSummary[];
}

/** Policy definition summary. */
export declare interface PolicyDefinitionSummary {
    /** Policy definition ID. */
    policyDefinitionId?: string;
    /** Policy definition reference ID. */
    policyDefinitionReferenceId?: string;
    /** Policy definition group names. */
    policyDefinitionGroupNames?: string[];
    /** Policy effect, i.e. policy definition action. */
    effect?: string;
    /** Compliance summary for the policy definition. */
    results?: SummaryResults;
}

/** The policy details. */
export declare interface PolicyDetails {
    /**
     * The ID of the policy definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDefinitionId?: string;
    /**
     * The ID of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyAssignmentId?: string;
    /**
     * The display name of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyAssignmentDisplayName?: string;
    /**
     * The scope of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyAssignmentScope?: string;
    /**
     * The ID of the policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policySetDefinitionId?: string;
    /**
     * The policy definition reference ID within the policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDefinitionReferenceId?: string;
}

/** Policy evaluation details. */
export declare interface PolicyEvaluationDetails {
    /** Details of the evaluated expressions. */
    evaluatedExpressions?: ExpressionEvaluationDetails[];
    /** Evaluation details of IfNotExists effect. */
    ifNotExistsDetails?: IfNotExistsEvaluationDetails;
}

/** The result of a non-compliant policy evaluation against the given resource content. */
export declare interface PolicyEvaluationResult {
    /**
     * The details of the policy that was evaluated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyInfo?: PolicyReference;
    /**
     * The result of the policy evaluation against the resource. This will typically be 'NonCompliant' but may contain other values if errors were encountered.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly evaluationResult?: string;
    /**
     * The detailed results of the policy expressions and values that were evaluated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly evaluationDetails?: PolicyEvaluationDetails;
}

/** Policy event record. */
export declare interface PolicyEvent {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** OData entity ID; always set to null since policy event records do not have an entity ID. */
    odataId?: string;
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** Timestamp for the policy event record. */
    timestamp?: Date;
    /** Resource ID. */
    resourceId?: string;
    /** Policy assignment ID. */
    policyAssignmentId?: string;
    /** Policy definition ID. */
    policyDefinitionId?: string;
    /** Effective parameters for the policy assignment. */
    effectiveParameters?: string;
    /** Flag which states whether the resource is compliant against the policy assignment it was evaluated against. */
    isCompliant?: boolean;
    /** Subscription ID. */
    subscriptionId?: string;
    /** Resource type. */
    resourceType?: string;
    /** Resource location. */
    resourceLocation?: string;
    /** Resource group name. */
    resourceGroup?: string;
    /** List of resource tags. */
    resourceTags?: string;
    /** Policy assignment name. */
    policyAssignmentName?: string;
    /** Policy assignment owner. */
    policyAssignmentOwner?: string;
    /** Policy assignment parameters. */
    policyAssignmentParameters?: string;
    /** Policy assignment scope. */
    policyAssignmentScope?: string;
    /** Policy definition name. */
    policyDefinitionName?: string;
    /** Policy definition action, i.e. effect. */
    policyDefinitionAction?: string;
    /** Policy definition category. */
    policyDefinitionCategory?: string;
    /** Policy set definition ID, if the policy assignment is for a policy set. */
    policySetDefinitionId?: string;
    /** Policy set definition name, if the policy assignment is for a policy set. */
    policySetDefinitionName?: string;
    /** Policy set definition owner, if the policy assignment is for a policy set. */
    policySetDefinitionOwner?: string;
    /** Policy set definition category, if the policy assignment is for a policy set. */
    policySetDefinitionCategory?: string;
    /** Policy set definition parameters, if the policy assignment is for a policy set. */
    policySetDefinitionParameters?: string;
    /** Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under. */
    managementGroupIds?: string;
    /** Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set. */
    policyDefinitionReferenceId?: string;
    /** Compliance state of the resource. */
    complianceState?: string;
    /** Tenant ID for the policy event record. */
    tenantId?: string;
    /** Principal object ID for the user who initiated the resource operation that triggered the policy event. */
    principalOid?: string;
    /** Components events records populated only when URL contains $expand=components clause. */
    components?: ComponentEventDetails[];
}

/** Interface representing a PolicyEvents. */
export declare interface PolicyEvents {
    /**
     * Queries policy events for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(managementGroupName: string, options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(subscriptionId: string, options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(resourceId: string, options?: PolicyEventsListQueryResultsForResourceOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
    /**
     * Queries policy events for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams): PagedAsyncIterableIterator<PolicyEvent>;
}

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroupNext operation. */
export declare type PolicyEventsListQueryResultsForManagementGroupNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroup operation. */
export declare type PolicyEventsListQueryResultsForManagementGroupResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForPolicyDefinitionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicyDefinitionNext operation. */
export declare type PolicyEventsListQueryResultsForPolicyDefinitionNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicyDefinition operation. */
export declare type PolicyEventsListQueryResultsForPolicyDefinitionResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForPolicySetDefinitionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicySetDefinitionNext operation. */
export declare type PolicyEventsListQueryResultsForPolicySetDefinitionNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicySetDefinition operation. */
export declare type PolicyEventsListQueryResultsForPolicySetDefinitionResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupLevelPolicyAssignmentNext operation. */
export declare type PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupLevelPolicyAssignment operation. */
export declare type PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupNext operation. */
export declare type PolicyEventsListQueryResultsForResourceGroupNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroup operation. */
export declare type PolicyEventsListQueryResultsForResourceGroupResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceNext operation. */
export declare type PolicyEventsListQueryResultsForResourceNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResource operation. */
export declare type PolicyEventsListQueryResultsForResourceResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionLevelPolicyAssignmentNext operation. */
export declare type PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionLevelPolicyAssignment operation. */
export declare type PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionNext operation. */
export declare type PolicyEventsListQueryResultsForSubscriptionNextResponse = PolicyEventsQueryResults;

/** Optional parameters. */
export declare interface PolicyEventsListQueryResultsForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscription operation. */
export declare type PolicyEventsListQueryResultsForSubscriptionResponse = PolicyEventsQueryResults;

/** Query results. */
export declare interface PolicyEventsQueryResults {
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** OData entity count; represents the number of policy event records returned. */
    odataCount?: number;
    /** Odata next link; URL to get the next set of results. */
    odataNextLink?: string;
    /** Query results. */
    value?: PolicyEvent[];
}

/** Policy definition group summary. */
export declare interface PolicyGroupSummary {
    /** Policy group name. */
    policyGroupName?: string;
    /** Compliance summary for the policy definition group. */
    results?: SummaryResults;
}

export declare class PolicyInsightsClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the PolicyInsightsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PolicyInsightsClientOptionalParams);
    policyTrackedResources: PolicyTrackedResources;
    remediations: Remediations;
    policyEvents: PolicyEvents;
    policyStates: PolicyStates;
    operations: Operations;
    policyMetadataOperations: PolicyMetadataOperations;
    policyRestrictions: PolicyRestrictions;
    attestations: Attestations;
}

/** Optional parameters. */
export declare interface PolicyInsightsClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Policy metadata resource definition. */
export declare interface PolicyMetadata {
    /**
     * The ID of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The policy metadata identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadataId?: string;
    /**
     * The category of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * The title of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly title?: string;
    /**
     * The owner of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly owner?: string;
    /**
     * Url for getting additional content about the resource metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalContentUrl?: string;
    /**
     * Additional metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: Record<string, unknown>;
    /**
     * The description of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The requirements of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requirements?: string;
}

/** Collection of policy metadata resources. */
export declare interface PolicyMetadataCollection {
    /**
     * Array of policy metadata definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SlimPolicyMetadata[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface PolicyMetadataGetResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getResource operation. */
export declare type PolicyMetadataGetResourceResponse = PolicyMetadata;

/** Optional parameters. */
export declare interface PolicyMetadataListNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listNext operation. */
export declare type PolicyMetadataListNextResponse = PolicyMetadataCollection;

/** Optional parameters. */
export declare interface PolicyMetadataListOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the list operation. */
export declare type PolicyMetadataListResponse = PolicyMetadataCollection;

/** Interface representing a PolicyMetadataOperations. */
export declare interface PolicyMetadataOperations {
    /**
     * Get a list of the policy metadata resources.
     * @param options The options parameters.
     */
    list(options?: PolicyMetadataListOptionalParams): PagedAsyncIterableIterator<SlimPolicyMetadata>;
    /**
     * Get policy metadata resource.
     * @param resourceName The name of the policy metadata resource.
     * @param options The options parameters.
     */
    getResource(resourceName: string, options?: PolicyMetadataGetResourceOptionalParams): Promise<PolicyMetadataGetResourceResponse>;
}

/** The properties of the policy metadata. */
export declare type PolicyMetadataProperties = PolicyMetadataSlimProperties & {
    /**
     * The description of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The requirements of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requirements?: string;
};

/** The properties of the policy metadata, excluding properties containing large strings */
export declare interface PolicyMetadataSlimProperties {
    /**
     * The policy metadata identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadataId?: string;
    /**
     * The category of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * The title of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly title?: string;
    /**
     * The owner of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly owner?: string;
    /**
     * Url for getting additional content about the resource metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalContentUrl?: string;
    /**
     * Additional metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: Record<string, unknown>;
}

/** Resource identifiers for a policy. */
export declare interface PolicyReference {
    /**
     * The resource identifier of the policy definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDefinitionId?: string;
    /**
     * The resource identifier of the policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policySetDefinitionId?: string;
    /**
     * The reference identifier of a specific policy definition within a policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDefinitionReferenceId?: string;
    /**
     * The resource identifier of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyAssignmentId?: string;
}

/** Interface representing a PolicyRestrictions. */
export declare interface PolicyRestrictions {
    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtSubscriptionScope(parameters: CheckRestrictionsRequest, options?: PolicyRestrictionsCheckAtSubscriptionScopeOptionalParams): Promise<PolicyRestrictionsCheckAtSubscriptionScopeResponse>;
    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this
     * when the resource group the resource will be created in is already known.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @param options The options parameters.
     */
    checkAtResourceGroupScope(resourceGroupName: string, parameters: CheckRestrictionsRequest, options?: PolicyRestrictionsCheckAtResourceGroupScopeOptionalParams): Promise<PolicyRestrictionsCheckAtResourceGroupScopeResponse>;
}

/** Optional parameters. */
export declare interface PolicyRestrictionsCheckAtResourceGroupScopeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkAtResourceGroupScope operation. */
export declare type PolicyRestrictionsCheckAtResourceGroupScopeResponse = CheckRestrictionsResult;

/** Optional parameters. */
export declare interface PolicyRestrictionsCheckAtSubscriptionScopeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkAtSubscriptionScope operation. */
export declare type PolicyRestrictionsCheckAtSubscriptionScopeResponse = CheckRestrictionsResult;

/** Policy state record. */
export declare interface PolicyState {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** OData entity ID; always set to null since policy state records do not have an entity ID. */
    odataId?: string;
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** Timestamp for the policy state record. */
    timestamp?: Date;
    /** Resource ID. */
    resourceId?: string;
    /** Policy assignment ID. */
    policyAssignmentId?: string;
    /** Policy definition ID. */
    policyDefinitionId?: string;
    /** Effective parameters for the policy assignment. */
    effectiveParameters?: string;
    /** Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property is deprecated; please use ComplianceState instead. */
    isCompliant?: boolean;
    /** Subscription ID. */
    subscriptionId?: string;
    /** Resource type. */
    resourceType?: string;
    /** Resource location. */
    resourceLocation?: string;
    /** Resource group name. */
    resourceGroup?: string;
    /** List of resource tags. */
    resourceTags?: string;
    /** Policy assignment name. */
    policyAssignmentName?: string;
    /** Policy assignment owner. */
    policyAssignmentOwner?: string;
    /** Policy assignment parameters. */
    policyAssignmentParameters?: string;
    /** Policy assignment scope. */
    policyAssignmentScope?: string;
    /** Policy definition name. */
    policyDefinitionName?: string;
    /** Policy definition action, i.e. effect. */
    policyDefinitionAction?: string;
    /** Policy definition category. */
    policyDefinitionCategory?: string;
    /** Policy set definition ID, if the policy assignment is for a policy set. */
    policySetDefinitionId?: string;
    /** Policy set definition name, if the policy assignment is for a policy set. */
    policySetDefinitionName?: string;
    /** Policy set definition owner, if the policy assignment is for a policy set. */
    policySetDefinitionOwner?: string;
    /** Policy set definition category, if the policy assignment is for a policy set. */
    policySetDefinitionCategory?: string;
    /** Policy set definition parameters, if the policy assignment is for a policy set. */
    policySetDefinitionParameters?: string;
    /** Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under. */
    managementGroupIds?: string;
    /** Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set. */
    policyDefinitionReferenceId?: string;
    /** Compliance state of the resource. */
    complianceState?: string;
    /** Policy evaluation details. */
    policyEvaluationDetails?: PolicyEvaluationDetails;
    /** Policy definition group names. */
    policyDefinitionGroupNames?: string[];
    /** Components state compliance records populated only when URL contains $expand=components clause. */
    components?: ComponentStateDetails[];
    /**
     * Evaluated policy definition version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDefinitionVersion?: string;
    /**
     * Evaluated policy set definition version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policySetDefinitionVersion?: string;
    /**
     * Evaluated policy assignment version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyAssignmentVersion?: string;
}

/** Interface representing a PolicyStates. */
export declare interface PolicyStates {
    /**
     * Queries policy states for the resources under the management group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(policyStatesResource: PolicyStatesResource, managementGroupName: string, options?: PolicyStatesListQueryResultsForManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the resources under the subscription.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(policyStatesResource: PolicyStatesResource, subscriptionId: string, options?: PolicyStatesListQueryResultsForSubscriptionOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the resources under the resource group.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(policyStatesResource: PolicyStatesResource, subscriptionId: string, resourceGroupName: string, options?: PolicyStatesListQueryResultsForResourceGroupOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the resource.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(policyStatesResource: PolicyStatesResource, resourceId: string, options?: PolicyStatesListQueryResultsForResourceOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the subscription level policy set definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicySetDefinition(policyStatesResource: PolicyStatesResource, subscriptionId: string, policySetDefinitionName: string, options?: PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the subscription level policy definition.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    listQueryResultsForPolicyDefinition(policyStatesResource: PolicyStatesResource, subscriptionId: string, policyDefinitionName: string, options?: PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the subscription level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: PolicyStatesResource, subscriptionId: string, policyAssignmentName: string, options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Queries policy states for the resource group level policy assignment.
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
     *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
     *                             state(s).
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: PolicyStatesResource, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams): PagedAsyncIterableIterator<PolicyState>;
    /**
     * Summarizes policy states for the resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    summarizeForManagementGroup(managementGroupName: string, options?: PolicyStatesSummarizeForManagementGroupOptionalParams): Promise<PolicyStatesSummarizeForManagementGroupResponse>;
    /**
     * Summarizes policy states for the resources under the subscription.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    summarizeForSubscription(subscriptionId: string, options?: PolicyStatesSummarizeForSubscriptionOptionalParams): Promise<PolicyStatesSummarizeForSubscriptionResponse>;
    /**
     * Summarizes policy states for the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: PolicyStatesSummarizeForResourceGroupOptionalParams): Promise<PolicyStatesSummarizeForResourceGroupResponse>;
    /**
     * Summarizes policy states for the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    summarizeForResource(resourceId: string, options?: PolicyStatesSummarizeForResourceOptionalParams): Promise<PolicyStatesSummarizeForResourceResponse>;
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluation(subscriptionId: string, options?: PolicyStatesTriggerSubscriptionEvaluationOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Triggers a policy evaluation scan for all the resources under the subscription
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param options The options parameters.
     */
    beginTriggerSubscriptionEvaluationAndWait(subscriptionId: string, options?: PolicyStatesTriggerSubscriptionEvaluationOptionalParams): Promise<void>;
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluation(subscriptionId: string, resourceGroupName: string, options?: PolicyStatesTriggerResourceGroupEvaluationOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    beginTriggerResourceGroupEvaluationAndWait(subscriptionId: string, resourceGroupName: string, options?: PolicyStatesTriggerResourceGroupEvaluationOptionalParams): Promise<void>;
    /**
     * Summarizes policy states for the subscription level policy set definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param options The options parameters.
     */
    summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: PolicyStatesSummarizeForPolicySetDefinitionOptionalParams): Promise<PolicyStatesSummarizeForPolicySetDefinitionResponse>;
    /**
     * Summarizes policy states for the subscription level policy definition.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param options The options parameters.
     */
    summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: PolicyStatesSummarizeForPolicyDefinitionOptionalParams): Promise<PolicyStatesSummarizeForPolicyDefinitionResponse>;
    /**
     * Summarizes policy states for the subscription level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams): Promise<PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse>;
    /**
     * Summarizes policy states for the resource group level policy assignment.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param options The options parameters.
     */
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams): Promise<PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse>;
}

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroupNext operation. */
export declare type PolicyStatesListQueryResultsForManagementGroupNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroup operation. */
export declare type PolicyStatesListQueryResultsForManagementGroupResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForPolicyDefinitionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicyDefinitionNext operation. */
export declare type PolicyStatesListQueryResultsForPolicyDefinitionNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicyDefinition operation. */
export declare type PolicyStatesListQueryResultsForPolicyDefinitionResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForPolicySetDefinitionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicySetDefinitionNext operation. */
export declare type PolicyStatesListQueryResultsForPolicySetDefinitionNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForPolicySetDefinition operation. */
export declare type PolicyStatesListQueryResultsForPolicySetDefinitionResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupLevelPolicyAssignmentNext operation. */
export declare type PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupLevelPolicyAssignment operation. */
export declare type PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupNext operation. */
export declare type PolicyStatesListQueryResultsForResourceGroupNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroup operation. */
export declare type PolicyStatesListQueryResultsForResourceGroupResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceNext operation. */
export declare type PolicyStatesListQueryResultsForResourceNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResource operation. */
export declare type PolicyStatesListQueryResultsForResourceResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionLevelPolicyAssignmentNext operation. */
export declare type PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionLevelPolicyAssignment operation. */
export declare type PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionNext operation. */
export declare type PolicyStatesListQueryResultsForSubscriptionNextResponse = PolicyStatesQueryResults;

/** Optional parameters. */
export declare interface PolicyStatesListQueryResultsForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscription operation. */
export declare type PolicyStatesListQueryResultsForSubscriptionResponse = PolicyStatesQueryResults;

/** Query results. */
export declare interface PolicyStatesQueryResults {
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** OData entity count; represents the number of policy state records returned. */
    odataCount?: number;
    /** Odata next link; URL to get the next set of results. */
    odataNextLink?: string;
    /** Query results. */
    value?: PolicyState[];
}

/**
 * Defines values for PolicyStatesResource. \
 * {@link KnownPolicyStatesResource} can be used interchangeably with PolicyStatesResource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default** \
 * **latest**
 */
export declare type PolicyStatesResource = string;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForManagementGroup operation. */
export declare type PolicyStatesSummarizeForManagementGroupResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForPolicyDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForPolicyDefinition operation. */
export declare type PolicyStatesSummarizeForPolicyDefinitionResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForPolicySetDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForPolicySetDefinition operation. */
export declare type PolicyStatesSummarizeForPolicySetDefinitionResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForResourceGroupLevelPolicyAssignment operation. */
export declare type PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForResourceGroup operation. */
export declare type PolicyStatesSummarizeForResourceGroupResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForResource operation. */
export declare type PolicyStatesSummarizeForResourceResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForSubscriptionLevelPolicyAssignment operation. */
export declare type PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesSummarizeForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the summarizeForSubscription operation. */
export declare type PolicyStatesSummarizeForSubscriptionResponse = SummarizeResults;

/** Optional parameters. */
export declare interface PolicyStatesTriggerResourceGroupEvaluationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PolicyStatesTriggerSubscriptionEvaluationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Policy tracked resource record. */
export declare interface PolicyTrackedResource {
    /**
     * The ID of the policy tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackedResourceId?: string;
    /**
     * The details of the policy that require the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDetails?: PolicyDetails;
    /**
     * The details of the policy triggered deployment that created the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: TrackedResourceModificationDetails;
    /**
     * The details of the policy triggered deployment that modified the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedBy?: TrackedResourceModificationDetails;
    /**
     * Timestamp of the last update to the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdateUtc?: Date;
}

/** Interface representing a PolicyTrackedResources. */
export declare interface PolicyTrackedResources {
    /**
     * Queries policy tracked resources under the management group.
     * @param managementGroupName Management group name.
     * @param options The options parameters.
     */
    listQueryResultsForManagementGroup(managementGroupName: string, options?: PolicyTrackedResourcesListQueryResultsForManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyTrackedResource>;
    /**
     * Queries policy tracked resources under the subscription.
     * @param options The options parameters.
     */
    listQueryResultsForSubscription(options?: PolicyTrackedResourcesListQueryResultsForSubscriptionOptionalParams): PagedAsyncIterableIterator<PolicyTrackedResource>;
    /**
     * Queries policy tracked resources under the resource group.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listQueryResultsForResourceGroup(resourceGroupName: string, options?: PolicyTrackedResourcesListQueryResultsForResourceGroupOptionalParams): PagedAsyncIterableIterator<PolicyTrackedResource>;
    /**
     * Queries policy tracked resources under the resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listQueryResultsForResource(resourceId: string, options?: PolicyTrackedResourcesListQueryResultsForResourceOptionalParams): PagedAsyncIterableIterator<PolicyTrackedResource>;
}

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroupNext operation. */
export declare type PolicyTrackedResourcesListQueryResultsForManagementGroupNextResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForManagementGroup operation. */
export declare type PolicyTrackedResourcesListQueryResultsForManagementGroupResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroupNext operation. */
export declare type PolicyTrackedResourcesListQueryResultsForResourceGroupNextResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceGroup operation. */
export declare type PolicyTrackedResourcesListQueryResultsForResourceGroupResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResourceNext operation. */
export declare type PolicyTrackedResourcesListQueryResultsForResourceNextResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForResource operation. */
export declare type PolicyTrackedResourcesListQueryResultsForResourceResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscriptionNext operation. */
export declare type PolicyTrackedResourcesListQueryResultsForSubscriptionNextResponse = PolicyTrackedResourcesQueryResults;

/** Optional parameters. */
export declare interface PolicyTrackedResourcesListQueryResultsForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listQueryResultsForSubscription operation. */
export declare type PolicyTrackedResourcesListQueryResultsForSubscriptionResponse = PolicyTrackedResourcesQueryResults;

/** Query results. */
export declare interface PolicyTrackedResourcesQueryResults {
    /**
     * Query results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PolicyTrackedResource[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Error response. */
export declare interface QueryFailure {
    /** Error definition. */
    error?: QueryFailureError;
}

/** Error definition. */
export declare interface QueryFailureError {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Parameter group */
export declare interface QueryOptions {
    /** Maximum number of records to return. */
    top?: number;
    /** OData filter expression. */
    filter?: string;
    /** Ordering expression using OData notation. One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc". */
    orderBy?: string;
    /** Select expression using OData notation. Limits the columns on each record to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId". */
    select?: string;
    /** ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). */
    from?: Date;
    /** ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. */
    to?: Date;
    /** OData apply expression for aggregations. */
    apply?: string;
    /** Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element. */
    skipToken?: string;
    /** The $expand query parameter. For example, to expand components use $expand=components */
    expand?: string;
}

/** The remediation definition. */
export declare interface Remediation {
    /**
     * The ID of the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The resource ID of the policy assignment that should be remediated. */
    policyAssignmentId?: string;
    /** The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition. */
    policyDefinitionReferenceId?: string;
    /** The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified. */
    resourceDiscoveryMode?: ResourceDiscoveryMode;
    /**
     * The status of the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The time at which the remediation was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdOn?: Date;
    /**
     * The time at which the remediation was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedOn?: Date;
    /** The filters that will be applied to determine which resources to remediate. */
    filters?: RemediationFilters;
    /**
     * The deployment status summary for all deployments created by the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentStatus?: RemediationDeploymentSummary;
    /**
     * The remediation status message. Provides additional details regarding the state of the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusMessage?: string;
    /**
     * The remediation correlation Id. Can be used to find events related to the remediation in the activity log.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly correlationId?: string;
    /** Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used. */
    resourceCount?: number;
    /** Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used. */
    parallelDeployments?: number;
    /** The remediation failure threshold settings */
    failureThreshold?: RemediationPropertiesFailureThreshold;
}

/** Details of a single deployment created by the remediation. */
export declare interface RemediationDeployment {
    /**
     * Resource ID of the resource that is being remediated by the deployment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly remediatedResourceId?: string;
    /**
     * Resource ID of the template deployment that will remediate the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentId?: string;
    /**
     * Status of the remediation deployment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Location of the resource that is being remediated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceLocation?: string;
    /**
     * Error encountered while remediated the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDefinition;
    /**
     * The time at which the remediation was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdOn?: Date;
    /**
     * The time at which the remediation deployment was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedOn?: Date;
}

/** List of deployments for a remediation. */
export declare interface RemediationDeploymentsListResult {
    /**
     * Array of deployments for the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RemediationDeployment[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The deployment status summary for all deployments created by the remediation. */
export declare interface RemediationDeploymentSummary {
    /**
     * The number of deployments required by the remediation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalDeployments?: number;
    /**
     * The number of deployments required by the remediation that have succeeded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly successfulDeployments?: number;
    /**
     * The number of deployments required by the remediation that have failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedDeployments?: number;
}

/** The filters that will be applied to determine which resources to remediate. */
export declare interface RemediationFilters {
    /** The resource locations that will be remediated. */
    locations?: string[];
}

/** List of remediations. */
export declare interface RemediationListResult {
    /**
     * Array of remediation definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Remediation[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The remediation failure threshold settings */
export declare interface RemediationPropertiesFailureThreshold {
    /** A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold. */
    percentage?: number;
}

/** Interface representing a Remediations. */
export declare interface Remediations {
    /**
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsListDeploymentsAtManagementGroupOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    /**
     * Gets all remediations for the management group.
     * @param managementGroupId Management group ID.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId: string, options?: RemediationsListForManagementGroupOptionalParams): PagedAsyncIterableIterator<Remediation>;
    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtSubscription(remediationName: string, options?: RemediationsListDeploymentsAtSubscriptionOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    /**
     * Gets all remediations for the subscription.
     * @param options The options parameters.
     */
    listForSubscription(options?: RemediationsListForSubscriptionOptionalParams): PagedAsyncIterableIterator<Remediation>;
    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsListDeploymentsAtResourceGroupOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    /**
     * Gets all remediations for the subscription.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: RemediationsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<Remediation>;
    /**
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    listDeploymentsAtResource(resourceId: string, remediationName: string, options?: RemediationsListDeploymentsAtResourceOptionalParams): PagedAsyncIterableIterator<RemediationDeployment>;
    /**
     * Gets all remediations for a resource.
     * @param resourceId Resource ID.
     * @param options The options parameters.
     */
    listForResource(resourceId: string, options?: RemediationsListForResourceOptionalParams): PagedAsyncIterableIterator<Remediation>;
    /**
     * Cancels a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsCancelAtManagementGroupOptionalParams): Promise<RemediationsCancelAtManagementGroupResponse>;
    /**
     * Creates or updates a remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtManagementGroupOptionalParams): Promise<RemediationsCreateOrUpdateAtManagementGroupResponse>;
    /**
     * Gets an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsGetAtManagementGroupOptionalParams): Promise<RemediationsGetAtManagementGroupResponse>;
    /**
     * Deletes an existing remediation at management group scope.
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(managementGroupId: string, remediationName: string, options?: RemediationsDeleteAtManagementGroupOptionalParams): Promise<RemediationsDeleteAtManagementGroupResponse>;
    /**
     * Cancels a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtSubscription(remediationName: string, options?: RemediationsCancelAtSubscriptionOptionalParams): Promise<RemediationsCancelAtSubscriptionResponse>;
    /**
     * Creates or updates a remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtSubscription(remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtSubscriptionOptionalParams): Promise<RemediationsCreateOrUpdateAtSubscriptionResponse>;
    /**
     * Gets an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtSubscription(remediationName: string, options?: RemediationsGetAtSubscriptionOptionalParams): Promise<RemediationsGetAtSubscriptionResponse>;
    /**
     * Deletes an existing remediation at subscription scope.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtSubscription(remediationName: string, options?: RemediationsDeleteAtSubscriptionOptionalParams): Promise<RemediationsDeleteAtSubscriptionResponse>;
    /**
     * Cancels a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsCancelAtResourceGroupOptionalParams): Promise<RemediationsCancelAtResourceGroupResponse>;
    /**
     * Creates or updates a remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceGroup(resourceGroupName: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtResourceGroupOptionalParams): Promise<RemediationsCreateOrUpdateAtResourceGroupResponse>;
    /**
     * Gets an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsGetAtResourceGroupOptionalParams): Promise<RemediationsGetAtResourceGroupResponse>;
    /**
     * Deletes an existing remediation at resource group scope.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResourceGroup(resourceGroupName: string, remediationName: string, options?: RemediationsDeleteAtResourceGroupOptionalParams): Promise<RemediationsDeleteAtResourceGroupResponse>;
    /**
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    cancelAtResource(resourceId: string, remediationName: string, options?: RemediationsCancelAtResourceOptionalParams): Promise<RemediationsCancelAtResourceResponse>;
    /**
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Remediation, options?: RemediationsCreateOrUpdateAtResourceOptionalParams): Promise<RemediationsCreateOrUpdateAtResourceResponse>;
    /**
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    getAtResource(resourceId: string, remediationName: string, options?: RemediationsGetAtResourceOptionalParams): Promise<RemediationsGetAtResourceResponse>;
    /**
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param options The options parameters.
     */
    deleteAtResource(resourceId: string, remediationName: string, options?: RemediationsDeleteAtResourceOptionalParams): Promise<RemediationsDeleteAtResourceResponse>;
}

/** Optional parameters. */
export declare interface RemediationsCancelAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancelAtManagementGroup operation. */
export declare type RemediationsCancelAtManagementGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCancelAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancelAtResourceGroup operation. */
export declare type RemediationsCancelAtResourceGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCancelAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancelAtResource operation. */
export declare type RemediationsCancelAtResourceResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCancelAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancelAtSubscription operation. */
export declare type RemediationsCancelAtSubscriptionResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCreateOrUpdateAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtManagementGroup operation. */
export declare type RemediationsCreateOrUpdateAtManagementGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCreateOrUpdateAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtResourceGroup operation. */
export declare type RemediationsCreateOrUpdateAtResourceGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCreateOrUpdateAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtResource operation. */
export declare type RemediationsCreateOrUpdateAtResourceResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsCreateOrUpdateAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtSubscription operation. */
export declare type RemediationsCreateOrUpdateAtSubscriptionResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsDeleteAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteAtManagementGroup operation. */
export declare type RemediationsDeleteAtManagementGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsDeleteAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteAtResourceGroup operation. */
export declare type RemediationsDeleteAtResourceGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsDeleteAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteAtResource operation. */
export declare type RemediationsDeleteAtResourceResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsDeleteAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteAtSubscription operation. */
export declare type RemediationsDeleteAtSubscriptionResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsGetAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtManagementGroup operation. */
export declare type RemediationsGetAtManagementGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsGetAtResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtResourceGroup operation. */
export declare type RemediationsGetAtResourceGroupResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsGetAtResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtResource operation. */
export declare type RemediationsGetAtResourceResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsGetAtSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtSubscription operation. */
export declare type RemediationsGetAtSubscriptionResponse = Remediation;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtManagementGroupNext operation. */
export declare type RemediationsListDeploymentsAtManagementGroupNextResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtManagementGroup operation. */
export declare type RemediationsListDeploymentsAtManagementGroupResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtResourceGroupNext operation. */
export declare type RemediationsListDeploymentsAtResourceGroupNextResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtResourceGroup operation. */
export declare type RemediationsListDeploymentsAtResourceGroupResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtResourceNext operation. */
export declare type RemediationsListDeploymentsAtResourceNextResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtResource operation. */
export declare type RemediationsListDeploymentsAtResourceResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtSubscriptionNext operation. */
export declare type RemediationsListDeploymentsAtSubscriptionNextResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListDeploymentsAtSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listDeploymentsAtSubscription operation. */
export declare type RemediationsListDeploymentsAtSubscriptionResponse = RemediationDeploymentsListResult;

/** Optional parameters. */
export declare interface RemediationsListForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForManagementGroupNext operation. */
export declare type RemediationsListForManagementGroupNextResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForManagementGroup operation. */
export declare type RemediationsListForManagementGroupResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceGroupNext operation. */
export declare type RemediationsListForResourceGroupNextResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceGroup operation. */
export declare type RemediationsListForResourceGroupResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForResourceNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResourceNext operation. */
export declare type RemediationsListForResourceNextResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForResourceOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForResource operation. */
export declare type RemediationsListForResourceResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForSubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForSubscriptionNext operation. */
export declare type RemediationsListForSubscriptionNextResponse = RemediationListResult;

/** Optional parameters. */
export declare interface RemediationsListForSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Parameter group */
    queryOptions?: QueryOptions;
}

/** Contains response data for the listForSubscription operation. */
export declare type RemediationsListForSubscriptionResponse = RemediationListResult;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for ResourceDiscoveryMode. \
 * {@link KnownResourceDiscoveryMode} can be used interchangeably with ResourceDiscoveryMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ExistingNonCompliant**: Remediate resources that are already known to be non-compliant. \
 * **ReEvaluateCompliance**: Re-evaluate the compliance state of resources and then remediate the resources found to be non-compliant.
 */
export declare type ResourceDiscoveryMode = string;

/** Slim version of policy metadata resource definition, excluding properties with large strings */
export declare interface SlimPolicyMetadata {
    /**
     * The ID of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The policy metadata identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadataId?: string;
    /**
     * The category of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * The title of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly title?: string;
    /**
     * The owner of the policy metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly owner?: string;
    /**
     * Url for getting additional content about the resource metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalContentUrl?: string;
    /**
     * Additional metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: Record<string, unknown>;
}

/** Summarize action results. */
export declare interface SummarizeResults {
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** OData entity count; represents the number of summaries returned; always set to 1. */
    odataCount?: number;
    /** Summarize action results. */
    value?: Summary[];
}

/** Summary results. */
export declare interface Summary {
    /** OData entity ID; always set to null since summaries do not have an entity ID. */
    odataId?: string;
    /** OData context string; used by OData clients to resolve type information based on metadata. */
    odataContext?: string;
    /** Compliance summary for all policy assignments. */
    results?: SummaryResults;
    /** Policy assignments summary. */
    policyAssignments?: PolicyAssignmentSummary[];
}

/** Compliance summary on a particular summary level. */
export declare interface SummaryResults {
    /** HTTP POST URI for queryResults action on Microsoft.PolicyInsights to retrieve raw results for the compliance summary. This property will not be available by default in future API versions, but could be queried explicitly. */
    queryResultsUri?: string;
    /** Number of non-compliant resources. */
    nonCompliantResources?: number;
    /** Number of non-compliant policies. */
    nonCompliantPolicies?: number;
    /** The resources summary at this level. */
    resourceDetails?: ComplianceDetail[];
    /** The policy artifact summary at this level. For query scope level, it represents policy assignment summary. For policy assignment level, it represents policy definitions summary. */
    policyDetails?: ComplianceDetail[];
    /** The policy definition group summary at this level. */
    policyGroupDetails?: ComplianceDetail[];
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The details of the policy triggered deployment that created or modified the tracked resource. */
export declare interface TrackedResourceModificationDetails {
    /**
     * The details of the policy that created or modified the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyDetails?: PolicyDetails;
    /**
     * The ID of the deployment that created or modified the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentId?: string;
    /**
     * Timestamp of the deployment that created or modified the tracked resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentTime?: Date;
}

/** Scenario specific error details. */
export declare interface TypedErrorInfo {
    /**
     * The type of included error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The scenario specific error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: any;
}

export { }
