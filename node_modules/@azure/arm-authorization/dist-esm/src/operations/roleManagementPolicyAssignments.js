/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing RoleManagementPolicyAssignments operations. */
export class RoleManagementPolicyAssignmentsImpl {
    /**
     * Initialize a new instance of the class RoleManagementPolicyAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets role management assignment policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    listForScope(scope, options) {
        const iter = this.listForScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForScopePagingPage(scope, options, settings);
            }
        };
    }
    listForScopePagingPage(scope, options, settings) {
        return __asyncGenerator(this, arguments, function* listForScopePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForScope(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForScopeNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForScopePagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listForScopePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listForScopePagingPage(scope, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the specified role management policy assignment for a resource scope
     * @param scope The scope of the role management policy.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to get.
     * @param options The options parameters.
     */
    get(scope, roleManagementPolicyAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, roleManagementPolicyAssignmentName, options }, getOperationSpec);
    }
    /**
     * Create a role management policy assignment
     * @param scope The scope of the role management policy assignment to upsert.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to upsert.
     * @param parameters Parameters for the role management policy assignment.
     * @param options The options parameters.
     */
    create(scope, roleManagementPolicyAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({ scope, roleManagementPolicyAssignmentName, parameters, options }, createOperationSpec);
    }
    /**
     * Delete a role management policy assignment
     * @param scope The scope of the role management policy assignment to delete.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to delete.
     * @param options The options parameters.
     */
    delete(scope, roleManagementPolicyAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, roleManagementPolicyAssignmentName, options }, deleteOperationSpec);
    }
    /**
     * Gets role management assignment policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    _listForScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listForScopeOperationSpec);
    }
    /**
     * ListForScopeNext
     * @param scope The scope of the role management policy.
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    _listForScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listForScopeNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleManagementPolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleManagementPolicyAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.RoleManagementPolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters4,
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleManagementPolicyAssignmentName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleManagementPolicyAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleManagementPolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listForScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleManagementPolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=roleManagementPolicyAssignments.js.map