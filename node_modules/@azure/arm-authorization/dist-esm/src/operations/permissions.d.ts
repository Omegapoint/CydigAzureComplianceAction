import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Permissions } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { Permission, PermissionsListForResourceGroupOptionalParams, PermissionsListForResourceOptionalParams } from "../models";
/** Class containing Permissions operations. */
export declare class PermissionsImpl implements Permissions {
    private readonly client;
    /**
     * Initialize a new instance of the class Permissions class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets all permissions the caller has for a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: PermissionsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<Permission>;
    private listForResourceGroupPagingPage;
    private listForResourceGroupPagingAll;
    /**
     * Gets all permissions the caller has for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get the permissions for.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: PermissionsListForResourceOptionalParams): PagedAsyncIterableIterator<Permission>;
    private listForResourcePagingPage;
    private listForResourcePagingAll;
    /**
     * Gets all permissions the caller has for a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listForResourceGroup;
    /**
     * Gets all permissions the caller has for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get the permissions for.
     * @param options The options parameters.
     */
    private _listForResource;
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    private _listForResourceGroupNext;
    /**
     * ListForResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get the permissions for.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    private _listForResourceNext;
}
//# sourceMappingURL=permissions.d.ts.map