import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleManagementPolicyAssignments } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { RoleManagementPolicyAssignment, RoleManagementPolicyAssignmentsListForScopeOptionalParams, RoleManagementPolicyAssignmentsGetOptionalParams, RoleManagementPolicyAssignmentsGetResponse, RoleManagementPolicyAssignmentsCreateOptionalParams, RoleManagementPolicyAssignmentsCreateResponse, RoleManagementPolicyAssignmentsDeleteOptionalParams } from "../models";
/** Class containing RoleManagementPolicyAssignments operations. */
export declare class RoleManagementPolicyAssignmentsImpl implements RoleManagementPolicyAssignments {
    private readonly client;
    /**
     * Initialize a new instance of the class RoleManagementPolicyAssignments class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets role management assignment policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    listForScope(scope: string, options?: RoleManagementPolicyAssignmentsListForScopeOptionalParams): PagedAsyncIterableIterator<RoleManagementPolicyAssignment>;
    private listForScopePagingPage;
    private listForScopePagingAll;
    /**
     * Get the specified role management policy assignment for a resource scope
     * @param scope The scope of the role management policy.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to get.
     * @param options The options parameters.
     */
    get(scope: string, roleManagementPolicyAssignmentName: string, options?: RoleManagementPolicyAssignmentsGetOptionalParams): Promise<RoleManagementPolicyAssignmentsGetResponse>;
    /**
     * Create a role management policy assignment
     * @param scope The scope of the role management policy assignment to upsert.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to upsert.
     * @param parameters Parameters for the role management policy assignment.
     * @param options The options parameters.
     */
    create(scope: string, roleManagementPolicyAssignmentName: string, parameters: RoleManagementPolicyAssignment, options?: RoleManagementPolicyAssignmentsCreateOptionalParams): Promise<RoleManagementPolicyAssignmentsCreateResponse>;
    /**
     * Delete a role management policy assignment
     * @param scope The scope of the role management policy assignment to delete.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy
     *                                           assignment to delete.
     * @param options The options parameters.
     */
    delete(scope: string, roleManagementPolicyAssignmentName: string, options?: RoleManagementPolicyAssignmentsDeleteOptionalParams): Promise<void>;
    /**
     * Gets role management assignment policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    private _listForScope;
    /**
     * ListForScopeNext
     * @param scope The scope of the role management policy.
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    private _listForScopeNext;
}
//# sourceMappingURL=roleManagementPolicyAssignments.d.ts.map