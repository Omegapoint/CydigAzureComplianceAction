/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing RoleAssignments operations. */
export class RoleAssignmentsImpl {
    /**
     * Initialize a new instance of the class RoleAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all role assignments that apply to a subscription.
     * @param options The options parameters.
     */
    listForSubscription(options) {
        const iter = this.listForSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForSubscriptionPagingPage(options, settings);
            }
        };
    }
    listForSubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForSubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listForSubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listForSubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all role assignments that apply to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all role assignments that apply to a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options) {
        const iter = this.listForResourcePagingAll(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options, settings);
            }
        };
    }
    listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForResource(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForResourceNext(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForResourcePagingAll(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List all role assignments that apply to a scope.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param options The options parameters.
     */
    listForScope(scope, options) {
        const iter = this.listForScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForScopePagingPage(scope, options, settings);
            }
        };
    }
    listForScopePagingPage(scope, options, settings) {
        return __asyncGenerator(this, arguments, function* listForScopePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForScope(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForScopeNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForScopePagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listForScopePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listForScopePagingPage(scope, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * List all role assignments that apply to a subscription.
     * @param options The options parameters.
     */
    _listForSubscription(options) {
        return this.client.sendOperationRequest({ options }, listForSubscriptionOperationSpec);
    }
    /**
     * List all role assignments that apply to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec);
    }
    /**
     * List all role assignments that apply to a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param options The options parameters.
     */
    _listForResource(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            resourceType,
            resourceName,
            options
        }, listForResourceOperationSpec);
    }
    /**
     * Get a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param options The options parameters.
     */
    get(scope, roleAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, roleAssignmentName, options }, getOperationSpec);
    }
    /**
     * Create or update a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @param options The options parameters.
     */
    create(scope, roleAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({ scope, roleAssignmentName, parameters, options }, createOperationSpec);
    }
    /**
     * Delete a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param options The options parameters.
     */
    delete(scope, roleAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, roleAssignmentName, options }, deleteOperationSpec);
    }
    /**
     * List all role assignments that apply to a scope.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param options The options parameters.
     */
    _listForScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listForScopeOperationSpec);
    }
    /**
     * Get a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param options The options parameters.
     */
    getById(roleAssignmentId, options) {
        return this.client.sendOperationRequest({ roleAssignmentId, options }, getByIdOperationSpec);
    }
    /**
     * Create or update a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param parameters Parameters for the role assignment.
     * @param options The options parameters.
     */
    createById(roleAssignmentId, parameters, options) {
        return this.client.sendOperationRequest({ roleAssignmentId, parameters, options }, createByIdOperationSpec);
    }
    /**
     * Delete a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param options The options parameters.
     */
    deleteById(roleAssignmentId, options) {
        return this.client.sendOperationRequest({ roleAssignmentId, options }, deleteByIdOperationSpec);
    }
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    _listForSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listForSubscriptionNextOperationSpec);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec);
    }
    /**
     * ListForResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            resourceType,
            resourceName,
            nextLink,
            options
        }, listForResourceNextOperationSpec);
    }
    /**
     * ListForScopeNext
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    _listForScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listForScopeNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listForSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.filter1,
        Parameters.tenantId
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.filter1,
        Parameters.tenantId
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.filter1,
        Parameters.tenantId
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.resourceType,
        Parameters.resourceName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1, Parameters.tenantId],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        201: {
            bodyMapper: Mappers.RoleAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleAssignmentName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1, Parameters.tenantId],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.roleAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/roleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.filter1,
        Parameters.tenantId,
        Parameters.skipToken
    ],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const getByIdOperationSpec = {
    path: "/{roleAssignmentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1, Parameters.tenantId],
    urlParameters: [Parameters.$host, Parameters.roleAssignmentId],
    headerParameters: [Parameters.accept],
    serializer
};
const createByIdOperationSpec = {
    path: "/{roleAssignmentId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        201: {
            bodyMapper: Mappers.RoleAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.roleAssignmentId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteByIdOperationSpec = {
    path: "/{roleAssignmentId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignment
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1, Parameters.tenantId],
    urlParameters: [Parameters.$host, Parameters.roleAssignmentId],
    headerParameters: [Parameters.accept],
    serializer
};
const listForSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.resourceType,
        Parameters.resourceName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=roleAssignments.js.map