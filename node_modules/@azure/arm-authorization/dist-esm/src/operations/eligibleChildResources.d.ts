import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EligibleChildResources } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { EligibleChildResource, EligibleChildResourcesGetOptionalParams } from "../models";
/** Class containing EligibleChildResources operations. */
export declare class EligibleChildResourcesImpl implements EligibleChildResources {
    private readonly client;
    /**
     * Initialize a new instance of the class EligibleChildResources class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Get the child resources of a resource on which user has eligible access
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    list(scope: string, options?: EligibleChildResourcesGetOptionalParams): PagedAsyncIterableIterator<EligibleChildResource>;
    private getPagingPage;
    private getPagingAll;
    /**
     * Get the child resources of a resource on which user has eligible access
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    private _get;
    /**
     * GetNext
     * @param scope The scope of the role management policy.
     * @param nextLink The nextLink from the previous successful call to the Get method.
     * @param options The options parameters.
     */
    private _getNext;
}
//# sourceMappingURL=eligibleChildResources.d.ts.map