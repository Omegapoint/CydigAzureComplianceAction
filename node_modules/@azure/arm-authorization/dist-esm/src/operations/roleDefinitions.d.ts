import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleDefinitions } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { RoleDefinition, RoleDefinitionsListOptionalParams, RoleDefinitionsDeleteOptionalParams, RoleDefinitionsDeleteResponse, RoleDefinitionsGetOptionalParams, RoleDefinitionsGetResponse, RoleDefinitionsCreateOrUpdateOptionalParams, RoleDefinitionsCreateOrUpdateResponse, RoleDefinitionsGetByIdOptionalParams, RoleDefinitionsGetByIdResponse } from "../models";
/** Class containing RoleDefinitions operations. */
export declare class RoleDefinitionsImpl implements RoleDefinitions {
    private readonly client;
    /**
     * Initialize a new instance of the class RoleDefinitions class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Get all role definitions that are applicable at scope and above.
     * @param scope The scope of the role definition.
     * @param options The options parameters.
     */
    list(scope: string, options?: RoleDefinitionsListOptionalParams): PagedAsyncIterableIterator<RoleDefinition>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Deletes a role definition.
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition to delete.
     * @param options The options parameters.
     */
    delete(scope: string, roleDefinitionId: string, options?: RoleDefinitionsDeleteOptionalParams): Promise<RoleDefinitionsDeleteResponse>;
    /**
     * Get role definition by name (GUID).
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param options The options parameters.
     */
    get(scope: string, roleDefinitionId: string, options?: RoleDefinitionsGetOptionalParams): Promise<RoleDefinitionsGetResponse>;
    /**
     * Creates or updates a role definition.
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param roleDefinition The values for the role definition.
     * @param options The options parameters.
     */
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: RoleDefinition, options?: RoleDefinitionsCreateOrUpdateOptionalParams): Promise<RoleDefinitionsCreateOrUpdateResponse>;
    /**
     * Get all role definitions that are applicable at scope and above.
     * @param scope The scope of the role definition.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a role definition by ID.
     * @param roleId The fully qualified role definition ID. Use the format,
     *               /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
     *               subscription level role definitions, or
     *               /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role
     *               definitions.
     * @param options The options parameters.
     */
    getById(roleId: string, options?: RoleDefinitionsGetByIdOptionalParams): Promise<RoleDefinitionsGetByIdResponse>;
    /**
     * ListNext
     * @param scope The scope of the role definition.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=roleDefinitions.d.ts.map