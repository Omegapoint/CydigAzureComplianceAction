import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ClassicAdministrators } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { ClassicAdministrator, ClassicAdministratorsListOptionalParams } from "../models";
/** Class containing ClassicAdministrators operations. */
export declare class ClassicAdministratorsImpl implements ClassicAdministrators {
    private readonly client;
    /**
     * Initialize a new instance of the class ClassicAdministrators class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets service administrator, account administrator, and co-administrators for the subscription.
     * @param options The options parameters.
     */
    list(options?: ClassicAdministratorsListOptionalParams): PagedAsyncIterableIterator<ClassicAdministrator>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets service administrator, account administrator, and co-administrators for the subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=classicAdministrators.d.ts.map