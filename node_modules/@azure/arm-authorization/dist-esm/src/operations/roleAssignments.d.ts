import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleAssignments } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { RoleAssignment, RoleAssignmentsListForSubscriptionOptionalParams, RoleAssignmentsListForResourceGroupOptionalParams, RoleAssignmentsListForResourceOptionalParams, RoleAssignmentsListForScopeOptionalParams, RoleAssignmentsGetOptionalParams, RoleAssignmentsGetResponse, RoleAssignmentCreateParameters, RoleAssignmentsCreateOptionalParams, RoleAssignmentsCreateResponse, RoleAssignmentsDeleteOptionalParams, RoleAssignmentsDeleteResponse, RoleAssignmentsGetByIdOptionalParams, RoleAssignmentsGetByIdResponse, RoleAssignmentsCreateByIdOptionalParams, RoleAssignmentsCreateByIdResponse, RoleAssignmentsDeleteByIdOptionalParams, RoleAssignmentsDeleteByIdResponse } from "../models";
/** Class containing RoleAssignments operations. */
export declare class RoleAssignmentsImpl implements RoleAssignments {
    private readonly client;
    /**
     * Initialize a new instance of the class RoleAssignments class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * List all role assignments that apply to a subscription.
     * @param options The options parameters.
     */
    listForSubscription(options?: RoleAssignmentsListForSubscriptionOptionalParams): PagedAsyncIterableIterator<RoleAssignment>;
    private listForSubscriptionPagingPage;
    private listForSubscriptionPagingAll;
    /**
     * List all role assignments that apply to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: RoleAssignmentsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<RoleAssignment>;
    private listForResourceGroupPagingPage;
    private listForResourceGroupPagingAll;
    /**
     * List all role assignments that apply to a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, resourceType: string, resourceName: string, options?: RoleAssignmentsListForResourceOptionalParams): PagedAsyncIterableIterator<RoleAssignment>;
    private listForResourcePagingPage;
    private listForResourcePagingAll;
    /**
     * List all role assignments that apply to a scope.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param options The options parameters.
     */
    listForScope(scope: string, options?: RoleAssignmentsListForScopeOptionalParams): PagedAsyncIterableIterator<RoleAssignment>;
    private listForScopePagingPage;
    private listForScopePagingAll;
    /**
     * List all role assignments that apply to a subscription.
     * @param options The options parameters.
     */
    private _listForSubscription;
    /**
     * List all role assignments that apply to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listForResourceGroup;
    /**
     * List all role assignments that apply to a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param options The options parameters.
     */
    private _listForResource;
    /**
     * Get a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param options The options parameters.
     */
    get(scope: string, roleAssignmentName: string, options?: RoleAssignmentsGetOptionalParams): Promise<RoleAssignmentsGetResponse>;
    /**
     * Create or update a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @param options The options parameters.
     */
    create(scope: string, roleAssignmentName: string, parameters: RoleAssignmentCreateParameters, options?: RoleAssignmentsCreateOptionalParams): Promise<RoleAssignmentsCreateResponse>;
    /**
     * Delete a role assignment by scope and name.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param roleAssignmentName The name of the role assignment. It can be any valid GUID.
     * @param options The options parameters.
     */
    delete(scope: string, roleAssignmentName: string, options?: RoleAssignmentsDeleteOptionalParams): Promise<RoleAssignmentsDeleteResponse>;
    /**
     * List all role assignments that apply to a scope.
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param options The options parameters.
     */
    private _listForScope;
    /**
     * Get a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param options The options parameters.
     */
    getById(roleAssignmentId: string, options?: RoleAssignmentsGetByIdOptionalParams): Promise<RoleAssignmentsGetByIdResponse>;
    /**
     * Create or update a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param parameters Parameters for the role assignment.
     * @param options The options parameters.
     */
    createById(roleAssignmentId: string, parameters: RoleAssignmentCreateParameters, options?: RoleAssignmentsCreateByIdOptionalParams): Promise<RoleAssignmentsCreateByIdResponse>;
    /**
     * Delete a role assignment by ID.
     * @param roleAssignmentId The fully qualified ID of the role assignment including scope, resource
     *                         name, and resource type. Format:
     *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
     *                         /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
     * @param options The options parameters.
     */
    deleteById(roleAssignmentId: string, options?: RoleAssignmentsDeleteByIdOptionalParams): Promise<RoleAssignmentsDeleteByIdResponse>;
    /**
     * ListForSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
     * @param options The options parameters.
     */
    private _listForSubscriptionNext;
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    private _listForResourceGroupNext;
    /**
     * ListForResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The resource name.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    private _listForResourceNext;
    /**
     * ListForScopeNext
     * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    private _listForScopeNext;
}
//# sourceMappingURL=roleAssignments.d.ts.map