import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleManagementPolicies } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { RoleManagementPolicy, RoleManagementPoliciesListForScopeOptionalParams, RoleManagementPoliciesGetOptionalParams, RoleManagementPoliciesGetResponse, RoleManagementPoliciesUpdateOptionalParams, RoleManagementPoliciesUpdateResponse, RoleManagementPoliciesDeleteOptionalParams } from "../models";
/** Class containing RoleManagementPolicies operations. */
export declare class RoleManagementPoliciesImpl implements RoleManagementPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class RoleManagementPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets role management policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    listForScope(scope: string, options?: RoleManagementPoliciesListForScopeOptionalParams): PagedAsyncIterableIterator<RoleManagementPolicy>;
    private listForScopePagingPage;
    private listForScopePagingAll;
    /**
     * Get the specified role management policy for a resource scope
     * @param scope The scope of the role management policy.
     * @param roleManagementPolicyName The name (guid) of the role management policy to get.
     * @param options The options parameters.
     */
    get(scope: string, roleManagementPolicyName: string, options?: RoleManagementPoliciesGetOptionalParams): Promise<RoleManagementPoliciesGetResponse>;
    /**
     * Update a role management policy
     * @param scope The scope of the role management policy to upsert.
     * @param roleManagementPolicyName The name (guid) of the role management policy to upsert.
     * @param parameters Parameters for the role management policy.
     * @param options The options parameters.
     */
    update(scope: string, roleManagementPolicyName: string, parameters: RoleManagementPolicy, options?: RoleManagementPoliciesUpdateOptionalParams): Promise<RoleManagementPoliciesUpdateResponse>;
    /**
     * Delete a role management policy
     * @param scope The scope of the role management policy to upsert.
     * @param roleManagementPolicyName The name (guid) of the role management policy to upsert.
     * @param options The options parameters.
     */
    delete(scope: string, roleManagementPolicyName: string, options?: RoleManagementPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Gets role management policies for a resource scope.
     * @param scope The scope of the role management policy.
     * @param options The options parameters.
     */
    private _listForScope;
    /**
     * ListForScopeNext
     * @param scope The scope of the role management policy.
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    private _listForScopeNext;
}
//# sourceMappingURL=roleManagementPolicies.d.ts.map