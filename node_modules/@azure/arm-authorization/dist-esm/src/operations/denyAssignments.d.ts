import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DenyAssignments } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { DenyAssignment, DenyAssignmentsListForResourceOptionalParams, DenyAssignmentsListForResourceGroupOptionalParams, DenyAssignmentsListOptionalParams, DenyAssignmentsListForScopeOptionalParams, DenyAssignmentsGetOptionalParams, DenyAssignmentsGetResponse, DenyAssignmentsGetByIdOptionalParams, DenyAssignmentsGetByIdResponse } from "../models";
/** Class containing DenyAssignments operations. */
export declare class DenyAssignmentsImpl implements DenyAssignments {
    private readonly client;
    /**
     * Initialize a new instance of the class DenyAssignments class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets deny assignments for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get deny assignments for.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: DenyAssignmentsListForResourceOptionalParams): PagedAsyncIterableIterator<DenyAssignment>;
    private listForResourcePagingPage;
    private listForResourcePagingAll;
    /**
     * Gets deny assignments for a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: DenyAssignmentsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<DenyAssignment>;
    private listForResourceGroupPagingPage;
    private listForResourceGroupPagingAll;
    /**
     * Gets all deny assignments for the subscription.
     * @param options The options parameters.
     */
    list(options?: DenyAssignmentsListOptionalParams): PagedAsyncIterableIterator<DenyAssignment>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets deny assignments for a scope.
     * @param scope The scope of the deny assignments.
     * @param options The options parameters.
     */
    listForScope(scope: string, options?: DenyAssignmentsListForScopeOptionalParams): PagedAsyncIterableIterator<DenyAssignment>;
    private listForScopePagingPage;
    private listForScopePagingAll;
    /**
     * Gets deny assignments for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get deny assignments for.
     * @param options The options parameters.
     */
    private _listForResource;
    /**
     * Gets deny assignments for a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listForResourceGroup;
    /**
     * Gets all deny assignments for the subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the specified deny assignment.
     * @param scope The scope of the deny assignment.
     * @param denyAssignmentId The ID of the deny assignment to get.
     * @param options The options parameters.
     */
    get(scope: string, denyAssignmentId: string, options?: DenyAssignmentsGetOptionalParams): Promise<DenyAssignmentsGetResponse>;
    /**
     * Gets a deny assignment by ID.
     * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format,
     *                         /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for
     *                         subscription level deny assignments, or
     *                         /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny
     *                         assignments.
     * @param options The options parameters.
     */
    getById(denyAssignmentId: string, options?: DenyAssignmentsGetByIdOptionalParams): Promise<DenyAssignmentsGetByIdResponse>;
    /**
     * Gets deny assignments for a scope.
     * @param scope The scope of the deny assignments.
     * @param options The options parameters.
     */
    private _listForScope;
    /**
     * ListForResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get deny assignments for.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    private _listForResourceNext;
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    private _listForResourceGroupNext;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListForScopeNext
     * @param scope The scope of the deny assignments.
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    private _listForScopeNext;
}
//# sourceMappingURL=denyAssignments.d.ts.map