import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleEligibilityScheduleRequests } from "../operationsInterfaces";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { RoleEligibilityScheduleRequest, RoleEligibilityScheduleRequestsListForScopeOptionalParams, RoleEligibilityScheduleRequestsCreateOptionalParams, RoleEligibilityScheduleRequestsCreateResponse, RoleEligibilityScheduleRequestsGetOptionalParams, RoleEligibilityScheduleRequestsGetResponse, RoleEligibilityScheduleRequestsCancelOptionalParams, RoleEligibilityScheduleRequestsValidateOptionalParams, RoleEligibilityScheduleRequestsValidateResponse } from "../models";
/** Class containing RoleEligibilityScheduleRequests operations. */
export declare class RoleEligibilityScheduleRequestsImpl implements RoleEligibilityScheduleRequests {
    private readonly client;
    /**
     * Initialize a new instance of the class RoleEligibilityScheduleRequests class.
     * @param client Reference to the service client
     */
    constructor(client: AuthorizationManagementClient);
    /**
     * Gets role eligibility schedule requests for a scope.
     * @param scope The scope of the role eligibility schedule requests.
     * @param options The options parameters.
     */
    listForScope(scope: string, options?: RoleEligibilityScheduleRequestsListForScopeOptionalParams): PagedAsyncIterableIterator<RoleEligibilityScheduleRequest>;
    private listForScopePagingPage;
    private listForScopePagingAll;
    /**
     * Creates a role eligibility schedule request.
     * @param scope The scope of the role eligibility schedule request to create. The scope can be any REST
     *              resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription,
     *              '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
     *              '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *              for a resource.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility to create. It can be any
     *                                           valid GUID.
     * @param parameters Parameters for the role eligibility schedule request.
     * @param options The options parameters.
     */
    create(scope: string, roleEligibilityScheduleRequestName: string, parameters: RoleEligibilityScheduleRequest, options?: RoleEligibilityScheduleRequestsCreateOptionalParams): Promise<RoleEligibilityScheduleRequestsCreateResponse>;
    /**
     * Get the specified role eligibility schedule request.
     * @param scope The scope of the role eligibility schedule request.
     * @param roleEligibilityScheduleRequestName The name (guid) of the role eligibility schedule request
     *                                           to get.
     * @param options The options parameters.
     */
    get(scope: string, roleEligibilityScheduleRequestName: string, options?: RoleEligibilityScheduleRequestsGetOptionalParams): Promise<RoleEligibilityScheduleRequestsGetResponse>;
    /**
     * Gets role eligibility schedule requests for a scope.
     * @param scope The scope of the role eligibility schedule requests.
     * @param options The options parameters.
     */
    private _listForScope;
    /**
     * Cancels a pending role eligibility schedule request.
     * @param scope The scope of the role eligibility request to cancel.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to cancel.
     * @param options The options parameters.
     */
    cancel(scope: string, roleEligibilityScheduleRequestName: string, options?: RoleEligibilityScheduleRequestsCancelOptionalParams): Promise<void>;
    /**
     * Validates a new role eligibility schedule request.
     * @param scope The scope of the role eligibility request to validate.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to validate.
     * @param parameters Parameters for the role eligibility schedule request.
     * @param options The options parameters.
     */
    validate(scope: string, roleEligibilityScheduleRequestName: string, parameters: RoleEligibilityScheduleRequest, options?: RoleEligibilityScheduleRequestsValidateOptionalParams): Promise<RoleEligibilityScheduleRequestsValidateResponse>;
    /**
     * ListForScopeNext
     * @param scope The scope of the role eligibility schedule requests.
     * @param nextLink The nextLink from the previous successful call to the ListForScope method.
     * @param options The options parameters.
     */
    private _listForScopeNext;
}
//# sourceMappingURL=roleEligibilityScheduleRequests.d.ts.map