/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { PolicyClient } from "../src/policyClient";
import { ManagementGroupsAPI } from "@azure/arm-managementgroups";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Policy test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let client1;
    let location;
    let resourceGroup;
    let groupId;
    let policyName;
    let scope;
    let policyAssignmentName;
    let managementclient;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new PolicyClient(credential, subscriptionId, recorder.configureClientOptions({}));
            managementclient = new ManagementGroupsAPI(credential, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            groupId = "20000000-0001-0000-0000-000000000123";
            policyName = "jspolicy";
            scope = "providers/Microsoft.Management/managementgroups/20000000-0001-0000-0000-000000000123/";
            policyAssignmentName = "passigment";
            client1 = new PolicyClient(credential, recorder.configureClientOptions({}));
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("policyDefinitions create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield managementclient.managementGroups.beginCreateOrUpdateAndWait(groupId, { name: groupId });
            const res = yield client.policyDefinitions.createOrUpdateAtManagementGroup(policyName, groupId, {
                policyType: "Custom",
                description: "Don't create a VM anywhere",
                policyRule: {
                    if: {
                        allof: [
                            {
                                source: "action",
                                equals: "Microsoft.Compute/virtualMachines/write",
                            },
                            {
                                field: "location",
                                in: ["eastus", "eastus2", "centralus"],
                            },
                        ],
                    },
                    then: {
                        effect: "deny",
                    },
                }
            });
            assert.equal(res.name, policyName);
        });
    });
    it("policyDefinitions get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.policyDefinitions.getAtManagementGroup(policyName, groupId);
            assert.equal(res.name, policyName);
        });
    });
    it("policyDefinitions list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.policyDefinitions.listByManagementGroup(groupId)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("policyAssignments create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const definition = yield client1.policyDefinitions.getAtManagementGroup(policyName, groupId);
            const res = yield client1.policyAssignments.create(scope, policyAssignmentName, {
                policyDefinitionId: definition.id
            });
            assert.equal(res.name, policyAssignmentName);
        });
    });
    it("policyAssignments get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.policyAssignments.get(scope, policyAssignmentName);
            assert.equal(res.name, policyAssignmentName);
        });
    });
    it("policyAssignments list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.policyAssignments.list()), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("policyAssignments list by managementgroup test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const filter = "atScope()";
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client1.policyAssignments.listForManagementGroup(groupId, {
                    filter
                })), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("policyAssignments delete test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.policyAssignments.delete(scope, policyAssignmentName);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.policyAssignments.list()), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("policyDefinitions delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.policyDefinitions.deleteAtManagementGroup(policyName, groupId);
        });
    });
});
//# sourceMappingURL=policy_examples.js.map