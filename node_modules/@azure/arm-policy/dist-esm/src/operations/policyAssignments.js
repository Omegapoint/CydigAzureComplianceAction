/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyAssignments operations. */
export class PolicyAssignmentsImpl {
    /**
     * Initialize a new instance of the class PolicyAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the given resource group
     * in the given subscription that match the optional given $filter. Valid values for $filter are:
     * 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
     * unfiltered list includes all policy assignments associated with the resource group, including those
     * that apply directly or apply from containing scopes, as well as any applied to resources contained
     * within the resource group. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the resource group, which is everything in the unfiltered list except
     * those applied to resources contained within the resource group. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource group. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName, options) {
        const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listForResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listForResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listForResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the specified resource
     * in the given resource group and subscription that match the optional given $filter. Valid values for
     * $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not
     * provided, the unfiltered list includes all policy assignments associated with the resource,
     * including those that apply directly or from all containing scopes, as well as any applied to
     * resources contained within the resource. If $filter=atScope() is provided, the returned list
     * includes all policy assignments that apply to the resource, which is everything in the unfiltered
     * list except those applied to resources contained within the resource. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource level. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource. Three
     * parameters plus the resource name are used to identify a specific resource. If the resource is not
     * part of a parent resource (the more common case), the parent resource path should not be provided
     * (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} ==
     * 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided.
     * For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} ==
     * 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the
     * namespace and type name separately is to provide both in the {resourceType} parameter, format:
     * ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} ==
     * 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
     *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
     * @param parentResourcePath The parent resource path. Use empty string if there is none.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        const iter = this.listForResourcePagingAll(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options, settings);
            }
        };
    }
    listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForResourceNext(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForResourcePagingAll(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listForResourcePagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listForResourcePagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * This operation retrieves the list of all policy assignments applicable to the management group that
     * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or
     * 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all
     * policy assignments that are assigned to the management group or the management group's ancestors. If
     * $filter=atExactScope() is provided, the returned list only includes all policy assignments that at
     * the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list
     * includes all policy assignments of the policy definition whose id is {value} that apply to the
     * management group.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId, options) {
        const iter = this.listForManagementGroupPagingAll(managementGroupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForManagementGroupPagingPage(managementGroupId, options, settings);
            }
        };
    }
    listForManagementGroupPagingPage(managementGroupId, options, settings) {
        return __asyncGenerator(this, arguments, function* listForManagementGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listForManagementGroup(managementGroupId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listForManagementGroupNext(managementGroupId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listForManagementGroupPagingAll(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listForManagementGroupPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listForManagementGroupPagingPage(managementGroupId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the given subscription
     * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()'
     * or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
     * policy assignments associated with the subscription, including those that apply directly or from
     * management groups that contain the given subscription, as well as any applied to objects contained
     * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the subscription, which is everything in the unfiltered list except those
     * applied to objects contained within the subscription. If $filter=atExactScope() is provided, the
     * returned list only includes all policy assignments that at the subscription. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value}.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * This operation deletes a policy assignment, given its name and the scope it was created in. The
     * scope of a policy assignment is the part of its ID preceding
     * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment to delete.
     * @param options The options parameters.
     */
    delete(scope, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, policyAssignmentName, options }, deleteOperationSpec);
    }
    /**
     *  This operation creates or updates a policy assignment with the given scope and name. Policy
     * assignments apply to all resources contained within their scope. For example, when you assign a
     * policy at resource group scope, that policy applies to all resources in the group.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters Parameters for the policy assignment.
     * @param options The options parameters.
     */
    create(scope, policyAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({ scope, policyAssignmentName, parameters, options }, createOperationSpec);
    }
    /**
     * This operation retrieves a single policy assignment, given its name and the scope it was created at.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment to get.
     * @param options The options parameters.
     */
    get(scope, policyAssignmentName, options) {
        return this.client.sendOperationRequest({ scope, policyAssignmentName, options }, getOperationSpec);
    }
    /**
     *  This operation updates a policy assignment with the given scope and name. Policy assignments apply
     * to all resources contained within their scope. For example, when you assign a policy at resource
     * group scope, that policy applies to all resources in the group.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters Parameters for policy assignment patch request.
     * @param options The options parameters.
     */
    update(scope, policyAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({ scope, policyAssignmentName, parameters, options }, updateOperationSpec);
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the given resource group
     * in the given subscription that match the optional given $filter. Valid values for $filter are:
     * 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
     * unfiltered list includes all policy assignments associated with the resource group, including those
     * that apply directly or apply from containing scopes, as well as any applied to resources contained
     * within the resource group. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the resource group, which is everything in the unfiltered list except
     * those applied to resources contained within the resource group. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource group. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param options The options parameters.
     */
    _listForResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listForResourceGroupOperationSpec);
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the specified resource
     * in the given resource group and subscription that match the optional given $filter. Valid values for
     * $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not
     * provided, the unfiltered list includes all policy assignments associated with the resource,
     * including those that apply directly or from all containing scopes, as well as any applied to
     * resources contained within the resource. If $filter=atScope() is provided, the returned list
     * includes all policy assignments that apply to the resource, which is everything in the unfiltered
     * list except those applied to resources contained within the resource. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource level. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource. Three
     * parameters plus the resource name are used to identify a specific resource. If the resource is not
     * part of a parent resource (the more common case), the parent resource path should not be provided
     * (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} ==
     * 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided.
     * For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} ==
     * 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the
     * namespace and type name separately is to provide both in the {resourceType} parameter, format:
     * ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} ==
     * 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
     *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
     * @param parentResourcePath The parent resource path. Use empty string if there is none.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    _listForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            options
        }, listForResourceOperationSpec);
    }
    /**
     * This operation retrieves the list of all policy assignments applicable to the management group that
     * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or
     * 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all
     * policy assignments that are assigned to the management group or the management group's ancestors. If
     * $filter=atExactScope() is provided, the returned list only includes all policy assignments that at
     * the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list
     * includes all policy assignments of the policy definition whose id is {value} that apply to the
     * management group.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    _listForManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, listForManagementGroupOperationSpec);
    }
    /**
     * This operation retrieves the list of all policy assignments associated with the given subscription
     * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()'
     * or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
     * policy assignments associated with the subscription, including those that apply directly or from
     * management groups that contain the given subscription, as well as any applied to objects contained
     * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the subscription, which is everything in the unfiltered list except those
     * applied to objects contained within the subscription. If $filter=atExactScope() is provided, the
     * returned list only includes all policy assignments that at the subscription. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value}.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
     * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats
     * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management
     * group), '/subscriptions/{subscriptionId}' (subscription),
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * (resource).
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param options The options parameters.
     */
    deleteById(policyAssignmentId, options) {
        return this.client.sendOperationRequest({ policyAssignmentId, options }, deleteByIdOperationSpec);
    }
    /**
     * This operation creates or updates the policy assignment with the given ID. Policy assignments made
     * on a scope apply to all resources contained in that scope. For example, when you assign a policy to
     * a resource group that policy applies to all resources in the group. Policy assignment IDs have this
     * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
     * scopes are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param parameters Parameters for policy assignment.
     * @param options The options parameters.
     */
    createById(policyAssignmentId, parameters, options) {
        return this.client.sendOperationRequest({ policyAssignmentId, parameters, options }, createByIdOperationSpec);
    }
    /**
     * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
     * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
     * scopes are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param options The options parameters.
     */
    getById(policyAssignmentId, options) {
        return this.client.sendOperationRequest({ policyAssignmentId, options }, getByIdOperationSpec);
    }
    /**
     * This operation updates the policy assignment with the given ID. Policy assignments made on a scope
     * apply to all resources contained in that scope. For example, when you assign a policy to a resource
     * group that policy applies to all resources in the group. Policy assignment IDs have this format:
     * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes
     * are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to update. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param parameters Parameters for policy assignment patch request.
     * @param options The options parameters.
     */
    updateById(policyAssignmentId, parameters, options) {
        return this.client.sendOperationRequest({ policyAssignmentId, parameters, options }, updateByIdOperationSpec);
    }
    /**
     * ListForResourceGroupNext
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
     * @param options The options parameters.
     */
    _listForResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listForResourceGroupNextOperationSpec);
    }
    /**
     * ListForResourceNext
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
     *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
     * @param parentResourcePath The parent resource path. Use empty string if there is none.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The name of the resource.
     * @param nextLink The nextLink from the previous successful call to the ListForResource method.
     * @param options The options parameters.
     */
    _listForResourceNext(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            nextLink,
            options
        }, listForResourceNextOperationSpec);
    }
    /**
     * ListForManagementGroupNext
     * @param managementGroupId The ID of the management group.
     * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
     * @param options The options parameters.
     */
    _listForManagementGroupNext(managementGroupId, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, nextLink, options }, listForManagementGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.policyAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.policyAssignmentName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.policyAssignmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.scope,
        Parameters.policyAssignmentName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listForResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [Parameters.$host, Parameters.managementGroupId],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteByIdOperationSpec = {
    path: "/{policyAssignmentId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
    headerParameters: [Parameters.accept],
    serializer
};
const createByIdOperationSpec = {
    path: "/{policyAssignmentId}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getByIdOperationSpec = {
    path: "/{policyAssignmentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
    headerParameters: [Parameters.accept],
    serializer
};
const updateByIdOperationSpec = {
    path: "/{policyAssignmentId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignment
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listForResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listForManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.managementGroupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyAssignmentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=policyAssignments.js.map