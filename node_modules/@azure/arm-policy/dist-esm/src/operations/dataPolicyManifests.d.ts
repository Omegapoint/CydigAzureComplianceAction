import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataPolicyManifests } from "../operationsInterfaces";
import { PolicyClient } from "../policyClient";
import { DataPolicyManifest, DataPolicyManifestsListOptionalParams, DataPolicyManifestsGetByPolicyModeOptionalParams, DataPolicyManifestsGetByPolicyModeResponse } from "../models";
/** Class containing DataPolicyManifests operations. */
export declare class DataPolicyManifestsImpl implements DataPolicyManifests {
    private readonly client;
    /**
     * Initialize a new instance of the class DataPolicyManifests class.
     * @param client Reference to the service client
     */
    constructor(client: PolicyClient);
    /**
     * This operation retrieves a list of all the data policy manifests that match the optional given
     * $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the
     * unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is
     * provided, the returned list only includes all data policy manifests that have a namespace matching
     * the provided value.
     * @param options The options parameters.
     */
    list(options?: DataPolicyManifestsListOptionalParams): PagedAsyncIterableIterator<DataPolicyManifest>;
    private listPagingPage;
    private listPagingAll;
    /**
     * This operation retrieves the data policy manifest with the given policy mode.
     * @param policyMode The policy mode of the data policy manifest to get.
     * @param options The options parameters.
     */
    getByPolicyMode(policyMode: string, options?: DataPolicyManifestsGetByPolicyModeOptionalParams): Promise<DataPolicyManifestsGetByPolicyModeResponse>;
    /**
     * This operation retrieves a list of all the data policy manifests that match the optional given
     * $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the
     * unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is
     * provided, the returned list only includes all data policy manifests that have a namespace matching
     * the provided value.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=dataPolicyManifests.d.ts.map