/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyDefinitions operations. */
export class PolicyDefinitionsImpl {
    /**
     * Initialize a new instance of the class PolicyDefinitions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This operation retrieves a list of all the policy definitions in a given subscription that match the
     * optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or
     * 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the subscription, including those that apply directly or from management
     * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list
     * only includes all policy definitions that at the given subscription. If $filter='policyType -eq
     * {value}' is provided, the returned list only includes all policy definitions whose type match the
     * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
     * $filter='category -eq {value}' is provided, the returned list only includes all policy definitions
     * whose category match the {value}.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This operation retrieves a list of all the built-in policy definitions that match the optional given
     * $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all
     * built-in policy definitions whose type match the {value}. Possible policyType values are
     * NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the
     * returned list only includes all built-in policy definitions whose category match the {value}.
     * @param options The options parameters.
     */
    listBuiltIn(options) {
        const iter = this.listBuiltInPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBuiltInPagingPage(options, settings);
            }
        };
    }
    listBuiltInPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listBuiltInPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBuiltIn(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBuiltInNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBuiltInPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBuiltInPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBuiltInPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * This operation retrieves a list of all the policy definitions in a given management group that match
     * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'
     * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the management group, including those that apply directly or from
     * management groups that contain the given management group. If $filter=atExactScope() is provided,
     * the returned list only includes all policy definitions that at the given management group. If
     * $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions
     * whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and
     * Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy
     * definitions whose category match the {value}.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listByManagementGroup(managementGroupId, options) {
        const iter = this.listByManagementGroupPagingAll(managementGroupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByManagementGroupPagingPage(managementGroupId, options, settings);
            }
        };
    }
    listByManagementGroupPagingPage(managementGroupId, options, settings) {
        return __asyncGenerator(this, arguments, function* listByManagementGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByManagementGroup(managementGroupId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByManagementGroupNext(managementGroupId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByManagementGroupPagingAll(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listByManagementGroupPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByManagementGroupPagingPage(managementGroupId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * This operation creates or updates a policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @param options The options parameters.
     */
    createOrUpdate(policyDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * This operation deletes the policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param options The options parameters.
     */
    delete(policyDefinitionName, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, options }, deleteOperationSpec);
    }
    /**
     * This operation retrieves the policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to get.
     * @param options The options parameters.
     */
    get(policyDefinitionName, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, options }, getOperationSpec);
    }
    /**
     * This operation retrieves the built-in policy definition with the given name.
     * @param policyDefinitionName The name of the built-in policy definition to get.
     * @param options The options parameters.
     */
    getBuiltIn(policyDefinitionName, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, options }, getBuiltInOperationSpec);
    }
    /**
     * This operation creates or updates a policy definition in the given management group with the given
     * name.
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(policyDefinitionName, managementGroupId, parameters, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, managementGroupId, parameters, options }, createOrUpdateAtManagementGroupOperationSpec);
    }
    /**
     * This operation deletes the policy definition in the given management group with the given name.
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(policyDefinitionName, managementGroupId, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, managementGroupId, options }, deleteAtManagementGroupOperationSpec);
    }
    /**
     * This operation retrieves the policy definition in the given management group with the given name.
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    getAtManagementGroup(policyDefinitionName, managementGroupId, options) {
        return this.client.sendOperationRequest({ policyDefinitionName, managementGroupId, options }, getAtManagementGroupOperationSpec);
    }
    /**
     * This operation retrieves a list of all the policy definitions in a given subscription that match the
     * optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or
     * 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the subscription, including those that apply directly or from management
     * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list
     * only includes all policy definitions that at the given subscription. If $filter='policyType -eq
     * {value}' is provided, the returned list only includes all policy definitions whose type match the
     * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
     * $filter='category -eq {value}' is provided, the returned list only includes all policy definitions
     * whose category match the {value}.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * This operation retrieves a list of all the built-in policy definitions that match the optional given
     * $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all
     * built-in policy definitions whose type match the {value}. Possible policyType values are
     * NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the
     * returned list only includes all built-in policy definitions whose category match the {value}.
     * @param options The options parameters.
     */
    _listBuiltIn(options) {
        return this.client.sendOperationRequest({ options }, listBuiltInOperationSpec);
    }
    /**
     * This operation retrieves a list of all the policy definitions in a given management group that match
     * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'
     * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the management group, including those that apply directly or from
     * management groups that contain the given management group. If $filter=atExactScope() is provided,
     * the returned list only includes all policy definitions that at the given management group. If
     * $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions
     * whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and
     * Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy
     * definitions whose category match the {value}.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    _listByManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, listByManagementGroupOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListBuiltInNext
     * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
     * @param options The options parameters.
     */
    _listBuiltInNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBuiltInNextOperationSpec);
    }
    /**
     * ListByManagementGroupNext
     * @param managementGroupId The ID of the management group.
     * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
     * @param options The options parameters.
     */
    _listByManagementGroupNext(managementGroupId, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, nextLink, options }, listByManagementGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.PolicyDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuiltInOperationSpec = {
    path: "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.policyDefinitionName],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.PolicyDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policyDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuiltInOperationSpec = {
    path: "/providers/Microsoft.Authorization/policyDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const listByManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],
    urlParameters: [Parameters.$host, Parameters.managementGroupId],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuiltInNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const listByManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.managementGroupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=policyDefinitions.js.map