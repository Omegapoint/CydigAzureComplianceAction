{"version":3,"file":"index.js","sources":["../src/pagingHelper.ts","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/operations/dataPolicyManifests.ts","../src/operations/policyAssignments.ts","../src/operations/policyDefinitions.ts","../src/operations/policySetDefinitions.ts","../src/operations/policyExemptions.ts","../src/policyClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport interface PageInfo {\n  continuationToken?: string;\n}\n\nconst pageMap = new WeakMap<object, PageInfo>();\n\n/**\n * Given the last `.value` produced by the `byPage` iterator,\n * returns a continuation token that can be used to begin paging from\n * that point later.\n * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.\n * @returns The continuation token that can be passed into byPage() during future calls.\n */\nexport function getContinuationToken(page: unknown): string | undefined {\n  if (typeof page !== \"object\" || page === null) {\n    return undefined;\n  }\n  return pageMap.get(page)?.continuationToken;\n}\n\nexport function setContinuationToken(\n  page: unknown,\n  continuationToken: string | undefined\n): void {\n  if (typeof page !== \"object\" || page === null || !continuationToken) {\n    return;\n  }\n  const pageInfo = pageMap.get(page) ?? {};\n  pageInfo.continuationToken = continuationToken;\n  pageMap.set(page, pageInfo);\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The data policy manifest. */\nexport interface DataPolicyManifest {\n  /**\n   * The ID of the data policy manifest.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the data policy manifest (it's the same as the Policy Mode).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource (Microsoft.Authorization/dataPolicyManifests).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The list of namespaces for the data policy manifest. */\n  namespaces?: string[];\n  /** The policy mode of the data policy manifest. */\n  policyMode?: string;\n  /** A value indicating whether policy mode is allowed only in built-in definitions. */\n  isBuiltInOnly?: boolean;\n  /** An array of resource type aliases. */\n  resourceTypeAliases?: ResourceTypeAliases[];\n  /** The effect definition. */\n  effects?: DataEffect[];\n  /** The non-alias field accessor values that can be used in the policy rule. */\n  fieldValues?: string[];\n  /** The standard resource functions (subscription and/or resourceGroup). */\n  standard?: string[];\n  /** An array of data manifest custom resource definition. */\n  custom?: DataManifestCustomResourceFunctionDefinition[];\n}\n\n/** The resource type aliases definition. */\nexport interface ResourceTypeAliases {\n  /** The resource type name. */\n  resourceType?: string;\n  /** The aliases for property names. */\n  aliases?: Alias[];\n}\n\n/** The alias type. */\nexport interface Alias {\n  /** The alias name. */\n  name?: string;\n  /** The paths for an alias. */\n  paths?: AliasPath[];\n  /** The type of the alias. */\n  type?: AliasType;\n  /** The default path for an alias. */\n  defaultPath?: string;\n  /** The default pattern for an alias. */\n  defaultPattern?: AliasPattern;\n  /**\n   * The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly defaultMetadata?: AliasPathMetadata;\n}\n\n/** The type of the paths for alias. */\nexport interface AliasPath {\n  /** The path of an alias. */\n  path?: string;\n  /** The API versions. */\n  apiVersions?: string[];\n  /** The pattern for an alias path. */\n  pattern?: AliasPattern;\n  /**\n   * The metadata of the alias path. If missing, fall back to the default metadata of the alias.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metadata?: AliasPathMetadata;\n}\n\n/** The type of the pattern for an alias path. */\nexport interface AliasPattern {\n  /** The alias pattern phrase. */\n  phrase?: string;\n  /** The alias pattern variable. */\n  variable?: string;\n  /** The type of alias pattern */\n  type?: AliasPatternType;\n}\n\nexport interface AliasPathMetadata {\n  /**\n   * The type of the token that the alias path is referring to.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: AliasPathTokenType;\n  /**\n   * The attributes of the token that the alias path is referring to.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly attributes?: AliasPathAttributes;\n}\n\n/** The data effect definition. */\nexport interface DataEffect {\n  /** The data effect name. */\n  name?: string;\n  /** The data effect details schema. */\n  detailsSchema?: any;\n}\n\n/** The custom resource function definition. */\nexport interface DataManifestCustomResourceFunctionDefinition {\n  /** The function name as it will appear in the policy rule. eg - 'vault'. */\n  name?: string;\n  /** The fully qualified control plane resource type that this function represents. eg - 'Microsoft.KeyVault/vaults'. */\n  fullyQualifiedResourceType?: string;\n  /** The top-level properties that can be selected on the function's output. eg - [ \"name\", \"location\" ] if vault().name and vault().location are supported */\n  defaultProperties?: string[];\n  /** A value indicating whether the custom properties within the property bag are allowed. Needs api-version to be specified in the policy rule eg - vault('2019-06-01'). */\n  allowCustomProperties?: boolean;\n}\n\n/** An error response from a policy operation. */\nexport interface CloudError {\n  /** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */\n  error?: ErrorResponse;\n}\n\n/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */\nexport interface ErrorResponse {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The error target.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly target?: string;\n  /**\n   * The error details.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly details?: ErrorResponse[];\n  /**\n   * The error additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly additionalInfo?: ErrorAdditionalInfo[];\n}\n\n/** The resource management error additional info. */\nexport interface ErrorAdditionalInfo {\n  /**\n   * The additional info type.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly info?: any;\n}\n\n/** List of data policy manifests. */\nexport interface DataPolicyManifestListResult {\n  /** An array of data policy manifests. */\n  value?: DataPolicyManifest[];\n  /** The URL to use for getting the next set of results. */\n  nextLink?: string;\n}\n\n/** The policy assignment. */\nexport interface PolicyAssignment {\n  /**\n   * The ID of the policy assignment.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The type of the policy assignment.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The name of the policy assignment.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /** The location of the policy assignment. Only required when utilizing managed identity. */\n  location?: string;\n  /** The managed identity associated with the policy assignment. */\n  identity?: Identity;\n  /**\n   * The system metadata relating to this resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** The display name of the policy assignment. */\n  displayName?: string;\n  /** The ID of the policy definition or policy set definition being assigned. */\n  policyDefinitionId?: string;\n  /**\n   * The scope for the policy assignment.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly scope?: string;\n  /** The policy's excluded scopes. */\n  notScopes?: string[];\n  /** The parameter values for the assigned policy rule. The keys are the parameter names. */\n  parameters?: { [propertyName: string]: ParameterValuesValue };\n  /** This message will be part of response in case of policy violation. */\n  description?: string;\n  /** The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. */\n  metadata?: any;\n  /** The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. */\n  enforcementMode?: EnforcementMode;\n  /** The messages that describe why a resource is non-compliant with the policy. */\n  nonComplianceMessages?: NonComplianceMessage[];\n}\n\n/** The value of a parameter. */\nexport interface ParameterValuesValue {\n  /** The value of the parameter. */\n  value?: any;\n}\n\n/** A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. */\nexport interface NonComplianceMessage {\n  /** A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. */\n  message: string;\n  /** The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment. */\n  policyDefinitionReferenceId?: string;\n}\n\n/** Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity. */\nexport interface Identity {\n  /**\n   * The principal ID of the resource identity.  This property will only be provided for a system assigned identity\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly principalId?: string;\n  /**\n   * The tenant ID of the resource identity.  This property will only be provided for a system assigned identity\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly tenantId?: string;\n  /** The identity type. This is the only required field when adding a system or user assigned identity to a resource. */\n  type?: ResourceIdentityType;\n  /** The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */\n  userAssignedIdentities?: {\n    [propertyName: string]: UserAssignedIdentitiesValue;\n  };\n}\n\nexport interface UserAssignedIdentitiesValue {\n  /**\n   * The principal id of user assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly principalId?: string;\n  /**\n   * The client id of user assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly clientId?: string;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemData {\n  /** The identity that created the resource. */\n  createdBy?: string;\n  /** The type of identity that created the resource. */\n  createdByType?: CreatedByType;\n  /** The timestamp of resource creation (UTC). */\n  createdAt?: Date;\n  /** The identity that last modified the resource. */\n  lastModifiedBy?: string;\n  /** The type of identity that last modified the resource. */\n  lastModifiedByType?: CreatedByType;\n  /** The timestamp of resource last modification (UTC) */\n  lastModifiedAt?: Date;\n}\n\nexport interface PolicyAssignmentUpdate {\n  /** The location of the policy assignment. Only required when utilizing managed identity. */\n  location?: string;\n  /** The managed identity associated with the policy assignment. */\n  identity?: Identity;\n}\n\n/** List of policy assignments. */\nexport interface PolicyAssignmentListResult {\n  /** An array of policy assignments. */\n  value?: PolicyAssignment[];\n  /** The URL to use for getting the next set of results. */\n  nextLink?: string;\n}\n\n/** The policy definition. */\nexport interface PolicyDefinition {\n  /**\n   * The ID of the policy definition.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the policy definition.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource (Microsoft.Authorization/policyDefinitions).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The system metadata relating to this resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */\n  policyType?: PolicyType;\n  /** The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. */\n  mode?: string;\n  /** The display name of the policy definition. */\n  displayName?: string;\n  /** The policy definition description. */\n  description?: string;\n  /** The policy rule. */\n  policyRule?: any;\n  /** The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */\n  metadata?: any;\n  /** The parameter definitions for parameters used in the policy rule. The keys are the parameter names. */\n  parameters?: { [propertyName: string]: ParameterDefinitionsValue };\n}\n\n/** The definition of a parameter that can be provided to the policy. */\nexport interface ParameterDefinitionsValue {\n  /** The data type of the parameter. */\n  type?: ParameterType;\n  /** The allowed values for the parameter. */\n  allowedValues?: any[];\n  /** The default value for the parameter if no value is provided. */\n  defaultValue?: any;\n  /** General metadata for the parameter. */\n  metadata?: ParameterDefinitionsValueMetadata;\n}\n\n/** General metadata for the parameter. */\nexport interface ParameterDefinitionsValueMetadata {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /** The display name for the parameter. */\n  displayName?: string;\n  /** The description of the parameter. */\n  description?: string;\n  /** Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from. */\n  strongType?: string;\n  /** Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope. */\n  assignPermissions?: boolean;\n}\n\n/** List of policy definitions. */\nexport interface PolicyDefinitionListResult {\n  /** An array of policy definitions. */\n  value?: PolicyDefinition[];\n  /** The URL to use for getting the next set of results. */\n  nextLink?: string;\n}\n\n/** The policy set definition. */\nexport interface PolicySetDefinition {\n  /**\n   * The ID of the policy set definition.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the policy set definition.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource (Microsoft.Authorization/policySetDefinitions).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The system metadata relating to this resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */\n  policyType?: PolicyType;\n  /** The display name of the policy set definition. */\n  displayName?: string;\n  /** The policy set definition description. */\n  description?: string;\n  /** The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */\n  metadata?: any;\n  /** The policy set definition parameters that can be used in policy definition references. */\n  parameters?: { [propertyName: string]: ParameterDefinitionsValue };\n  /** An array of policy definition references. */\n  policyDefinitions?: PolicyDefinitionReference[];\n  /** The metadata describing groups of policy definition references within the policy set definition. */\n  policyDefinitionGroups?: PolicyDefinitionGroup[];\n}\n\n/** The policy definition reference. */\nexport interface PolicyDefinitionReference {\n  /** The ID of the policy definition or policy set definition. */\n  policyDefinitionId: string;\n  /** The parameter values for the referenced policy rule. The keys are the parameter names. */\n  parameters?: { [propertyName: string]: ParameterValuesValue };\n  /** A unique id (within the policy set definition) for this policy definition reference. */\n  policyDefinitionReferenceId?: string;\n  /** The name of the groups that this policy definition reference belongs to. */\n  groupNames?: string[];\n}\n\n/** The policy definition group. */\nexport interface PolicyDefinitionGroup {\n  /** The name of the group. */\n  name: string;\n  /** The group's display name. */\n  displayName?: string;\n  /** The group's category. */\n  category?: string;\n  /** The group's description. */\n  description?: string;\n  /** A resource ID of a resource that contains additional metadata about the group. */\n  additionalMetadataId?: string;\n}\n\n/** List of policy set definitions. */\nexport interface PolicySetDefinitionListResult {\n  /** An array of policy set definitions. */\n  value?: PolicySetDefinition[];\n  /** The URL to use for getting the next set of results. */\n  nextLink?: string;\n}\n\n/** The policy exemption. */\nexport interface PolicyExemption {\n  /**\n   * Azure Resource Manager metadata containing createdBy and modifiedBy information.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * The ID of the policy exemption.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the policy exemption.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource (Microsoft.Authorization/policyExemptions).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The ID of the policy assignment that is being exempted. */\n  policyAssignmentId: string;\n  /** The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition. */\n  policyDefinitionReferenceIds?: string[];\n  /** The policy exemption category. Possible values are Waiver and Mitigated. */\n  exemptionCategory: ExemptionCategory;\n  /** The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption. */\n  expiresOn?: Date;\n  /** The display name of the policy exemption. */\n  displayName?: string;\n  /** The description of the policy exemption. */\n  description?: string;\n  /** The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs. */\n  metadata?: any;\n}\n\n/** List of policy exemptions. */\nexport interface PolicyExemptionListResult {\n  /** An array of policy exemptions. */\n  value?: PolicyExemption[];\n  /**\n   * The URL to use for getting the next set of results.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** Known values of {@link AliasPathTokenType} that the service accepts. */\nexport enum KnownAliasPathTokenType {\n  /** The token type is not specified. */\n  NotSpecified = \"NotSpecified\",\n  /** The token type can be anything. */\n  Any = \"Any\",\n  /** The token type is string. */\n  String = \"String\",\n  /** The token type is object. */\n  Object = \"Object\",\n  /** The token type is array. */\n  Array = \"Array\",\n  /** The token type is integer. */\n  Integer = \"Integer\",\n  /** The token type is number. */\n  Number = \"Number\",\n  /** The token type is boolean. */\n  Boolean = \"Boolean\"\n}\n\n/**\n * Defines values for AliasPathTokenType. \\\n * {@link KnownAliasPathTokenType} can be used interchangeably with AliasPathTokenType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NotSpecified**: The token type is not specified. \\\n * **Any**: The token type can be anything. \\\n * **String**: The token type is string. \\\n * **Object**: The token type is object. \\\n * **Array**: The token type is array. \\\n * **Integer**: The token type is integer. \\\n * **Number**: The token type is number. \\\n * **Boolean**: The token type is boolean.\n */\nexport type AliasPathTokenType = string;\n\n/** Known values of {@link AliasPathAttributes} that the service accepts. */\nexport enum KnownAliasPathAttributes {\n  /** The token that the alias path is referring to has no attributes. */\n  None = \"None\",\n  /** The token that the alias path is referring to is modifiable by policies with 'modify' effect. */\n  Modifiable = \"Modifiable\"\n}\n\n/**\n * Defines values for AliasPathAttributes. \\\n * {@link KnownAliasPathAttributes} can be used interchangeably with AliasPathAttributes,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None**: The token that the alias path is referring to has no attributes. \\\n * **Modifiable**: The token that the alias path is referring to is modifiable by policies with 'modify' effect.\n */\nexport type AliasPathAttributes = string;\n\n/** Known values of {@link EnforcementMode} that the service accepts. */\nexport enum KnownEnforcementMode {\n  /** The policy effect is enforced during resource creation or update. */\n  Default = \"Default\",\n  /** The policy effect is not enforced during resource creation or update. */\n  DoNotEnforce = \"DoNotEnforce\"\n}\n\n/**\n * Defines values for EnforcementMode. \\\n * {@link KnownEnforcementMode} can be used interchangeably with EnforcementMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Default**: The policy effect is enforced during resource creation or update. \\\n * **DoNotEnforce**: The policy effect is not enforced during resource creation or update.\n */\nexport type EnforcementMode = string;\n\n/** Known values of {@link CreatedByType} that the service accepts. */\nexport enum KnownCreatedByType {\n  /** User */\n  User = \"User\",\n  /** Application */\n  Application = \"Application\",\n  /** ManagedIdentity */\n  ManagedIdentity = \"ManagedIdentity\",\n  /** Key */\n  Key = \"Key\"\n}\n\n/**\n * Defines values for CreatedByType. \\\n * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **User** \\\n * **Application** \\\n * **ManagedIdentity** \\\n * **Key**\n */\nexport type CreatedByType = string;\n\n/** Known values of {@link PolicyType} that the service accepts. */\nexport enum KnownPolicyType {\n  /** NotSpecified */\n  NotSpecified = \"NotSpecified\",\n  /** BuiltIn */\n  BuiltIn = \"BuiltIn\",\n  /** Custom */\n  Custom = \"Custom\",\n  /** Static */\n  Static = \"Static\"\n}\n\n/**\n * Defines values for PolicyType. \\\n * {@link KnownPolicyType} can be used interchangeably with PolicyType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NotSpecified** \\\n * **BuiltIn** \\\n * **Custom** \\\n * **Static**\n */\nexport type PolicyType = string;\n\n/** Known values of {@link ParameterType} that the service accepts. */\nexport enum KnownParameterType {\n  /** String */\n  String = \"String\",\n  /** Array */\n  Array = \"Array\",\n  /** Object */\n  Object = \"Object\",\n  /** Boolean */\n  Boolean = \"Boolean\",\n  /** Integer */\n  Integer = \"Integer\",\n  /** Float */\n  Float = \"Float\",\n  /** DateTime */\n  DateTime = \"DateTime\"\n}\n\n/**\n * Defines values for ParameterType. \\\n * {@link KnownParameterType} can be used interchangeably with ParameterType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **String** \\\n * **Array** \\\n * **Object** \\\n * **Boolean** \\\n * **Integer** \\\n * **Float** \\\n * **DateTime**\n */\nexport type ParameterType = string;\n\n/** Known values of {@link ExemptionCategory} that the service accepts. */\nexport enum KnownExemptionCategory {\n  /** This category of exemptions usually means the scope is not applicable for the policy. */\n  Waiver = \"Waiver\",\n  /** This category of exemptions usually means the mitigation actions have been applied to the scope. */\n  Mitigated = \"Mitigated\"\n}\n\n/**\n * Defines values for ExemptionCategory. \\\n * {@link KnownExemptionCategory} can be used interchangeably with ExemptionCategory,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Waiver**: This category of exemptions usually means the scope is not applicable for the policy. \\\n * **Mitigated**: This category of exemptions usually means the mitigation actions have been applied to the scope.\n */\nexport type ExemptionCategory = string;\n/** Defines values for AliasPatternType. */\nexport type AliasPatternType = \"NotSpecified\" | \"Extract\";\n/** Defines values for AliasType. */\nexport type AliasType = \"NotSpecified\" | \"PlainText\" | \"Mask\";\n/** Defines values for ResourceIdentityType. */\nexport type ResourceIdentityType = \"SystemAssigned\" | \"UserAssigned\" | \"None\";\n\n/** Optional parameters. */\nexport interface DataPolicyManifestsGetByPolicyModeOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getByPolicyMode operation. */\nexport type DataPolicyManifestsGetByPolicyModeResponse = DataPolicyManifest;\n\n/** Optional parameters. */\nexport interface DataPolicyManifestsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: \"namespace eq '{value}'\". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. */\n  filter?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type DataPolicyManifestsListResponse = DataPolicyManifestListResult;\n\n/** Optional parameters. */\nexport interface DataPolicyManifestsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type DataPolicyManifestsListNextResponse = DataPolicyManifestListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsDeleteOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the delete operation. */\nexport type PolicyAssignmentsDeleteResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsCreateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the create operation. */\nexport type PolicyAssignmentsCreateResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyAssignmentsGetResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the update operation. */\nexport type PolicyAssignmentsUpdateResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listForResourceGroup operation. */\nexport type PolicyAssignmentsListForResourceGroupResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForResourceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listForResource operation. */\nexport type PolicyAssignmentsListForResourceResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForManagementGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listForManagementGroup operation. */\nexport type PolicyAssignmentsListForManagementGroupResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type PolicyAssignmentsListResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsDeleteByIdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteById operation. */\nexport type PolicyAssignmentsDeleteByIdResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsCreateByIdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createById operation. */\nexport type PolicyAssignmentsCreateByIdResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsGetByIdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getById operation. */\nexport type PolicyAssignmentsGetByIdResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsUpdateByIdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the updateById operation. */\nexport type PolicyAssignmentsUpdateByIdResponse = PolicyAssignment;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForResourceGroupNext operation. */\nexport type PolicyAssignmentsListForResourceGroupNextResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForResourceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForResourceNext operation. */\nexport type PolicyAssignmentsListForResourceNextResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListForManagementGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForManagementGroupNext operation. */\nexport type PolicyAssignmentsListForManagementGroupNextResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyAssignmentsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type PolicyAssignmentsListNextResponse = PolicyAssignmentListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PolicyDefinitionsCreateOrUpdateResponse = PolicyDefinition;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsDeleteOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyDefinitionsGetResponse = PolicyDefinition;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsGetBuiltInOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getBuiltIn operation. */\nexport type PolicyDefinitionsGetBuiltInResponse = PolicyDefinition;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdateAtManagementGroup operation. */\nexport type PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicyDefinition;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsDeleteAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsGetAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAtManagementGroup operation. */\nexport type PolicyDefinitionsGetAtManagementGroupResponse = PolicyDefinition;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type PolicyDefinitionsListResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListBuiltInOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listBuiltIn operation. */\nexport type PolicyDefinitionsListBuiltInResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListByManagementGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listByManagementGroup operation. */\nexport type PolicyDefinitionsListByManagementGroupResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type PolicyDefinitionsListNextResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListBuiltInNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBuiltInNext operation. */\nexport type PolicyDefinitionsListBuiltInNextResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyDefinitionsListByManagementGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByManagementGroupNext operation. */\nexport type PolicyDefinitionsListByManagementGroupNextResponse = PolicyDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PolicySetDefinitionsCreateOrUpdateResponse = PolicySetDefinition;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsDeleteOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicySetDefinitionsGetResponse = PolicySetDefinition;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsGetBuiltInOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getBuiltIn operation. */\nexport type PolicySetDefinitionsGetBuiltInResponse = PolicySetDefinition;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type PolicySetDefinitionsListResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListBuiltInOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listBuiltIn operation. */\nexport type PolicySetDefinitionsListBuiltInResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdateAtManagementGroup operation. */\nexport type PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicySetDefinition;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsDeleteAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsGetAtManagementGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAtManagementGroup operation. */\nexport type PolicySetDefinitionsGetAtManagementGroupResponse = PolicySetDefinition;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListByManagementGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */\n  filter?: string;\n  /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */\n  top?: number;\n}\n\n/** Contains response data for the listByManagementGroup operation. */\nexport type PolicySetDefinitionsListByManagementGroupResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type PolicySetDefinitionsListNextResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListBuiltInNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBuiltInNext operation. */\nexport type PolicySetDefinitionsListBuiltInNextResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicySetDefinitionsListByManagementGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByManagementGroupNext operation. */\nexport type PolicySetDefinitionsListByManagementGroupNextResponse = PolicySetDefinitionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface PolicyExemptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PolicyExemptionsCreateOrUpdateResponse = PolicyExemption;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyExemptionsGetResponse = PolicyExemption;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */\n  filter?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type PolicyExemptionsListResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */\n  filter?: string;\n}\n\n/** Contains response data for the listForResourceGroup operation. */\nexport type PolicyExemptionsListForResourceGroupResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForResourceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */\n  filter?: string;\n}\n\n/** Contains response data for the listForResource operation. */\nexport type PolicyExemptionsListForResourceResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForManagementGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */\n  filter?: string;\n}\n\n/** Contains response data for the listForManagementGroup operation. */\nexport type PolicyExemptionsListForManagementGroupResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type PolicyExemptionsListNextResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForResourceGroupNext operation. */\nexport type PolicyExemptionsListForResourceGroupNextResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForResourceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForResourceNext operation. */\nexport type PolicyExemptionsListForResourceNextResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyExemptionsListForManagementGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listForManagementGroupNext operation. */\nexport type PolicyExemptionsListForManagementGroupNextResponse = PolicyExemptionListResult;\n\n/** Optional parameters. */\nexport interface PolicyClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const DataPolicyManifest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataPolicyManifest\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      namespaces: {\n        serializedName: \"properties.namespaces\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      policyMode: {\n        serializedName: \"properties.policyMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isBuiltInOnly: {\n        serializedName: \"properties.isBuiltInOnly\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      resourceTypeAliases: {\n        serializedName: \"properties.resourceTypeAliases\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ResourceTypeAliases\"\n            }\n          }\n        }\n      },\n      effects: {\n        serializedName: \"properties.effects\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DataEffect\"\n            }\n          }\n        }\n      },\n      fieldValues: {\n        serializedName: \"properties.fieldValues\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      standard: {\n        serializedName: \"properties.resourceFunctions.standard\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      custom: {\n        serializedName: \"properties.resourceFunctions.custom\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DataManifestCustomResourceFunctionDefinition\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ResourceTypeAliases: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ResourceTypeAliases\",\n    modelProperties: {\n      resourceType: {\n        serializedName: \"resourceType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      aliases: {\n        serializedName: \"aliases\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Alias\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Alias: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Alias\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      paths: {\n        serializedName: \"paths\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AliasPath\"\n            }\n          }\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"NotSpecified\", \"PlainText\", \"Mask\"]\n        }\n      },\n      defaultPath: {\n        serializedName: \"defaultPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultPattern: {\n        serializedName: \"defaultPattern\",\n        type: {\n          name: \"Composite\",\n          className: \"AliasPattern\"\n        }\n      },\n      defaultMetadata: {\n        serializedName: \"defaultMetadata\",\n        type: {\n          name: \"Composite\",\n          className: \"AliasPathMetadata\"\n        }\n      }\n    }\n  }\n};\n\nexport const AliasPath: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AliasPath\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      apiVersions: {\n        serializedName: \"apiVersions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      pattern: {\n        serializedName: \"pattern\",\n        type: {\n          name: \"Composite\",\n          className: \"AliasPattern\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"AliasPathMetadata\"\n        }\n      }\n    }\n  }\n};\n\nexport const AliasPattern: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AliasPattern\",\n    modelProperties: {\n      phrase: {\n        serializedName: \"phrase\",\n        type: {\n          name: \"String\"\n        }\n      },\n      variable: {\n        serializedName: \"variable\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"NotSpecified\", \"Extract\"]\n        }\n      }\n    }\n  }\n};\n\nexport const AliasPathMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AliasPathMetadata\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataEffect: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataEffect\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detailsSchema: {\n        serializedName: \"detailsSchema\",\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataManifestCustomResourceFunctionDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataManifestCustomResourceFunctionDefinition\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fullyQualifiedResourceType: {\n        serializedName: \"fullyQualifiedResourceType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultProperties: {\n        serializedName: \"defaultProperties\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      allowCustomProperties: {\n        serializedName: \"allowCustomProperties\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CloudError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CloudError\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorResponse\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorResponse\"\n            }\n          }\n        }\n      },\n      additionalInfo: {\n        serializedName: \"additionalInfo\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorAdditionalInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorAdditionalInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorAdditionalInfo\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        readOnly: true,\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataPolicyManifestListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataPolicyManifestListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DataPolicyManifest\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyAssignment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyAssignment\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"Identity\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      policyDefinitionId: {\n        serializedName: \"properties.policyDefinitionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      notScopes: {\n        serializedName: \"properties.notScopes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      parameters: {\n        serializedName: \"properties.parameters\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"ParameterValuesValue\" }\n          }\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"properties.metadata\",\n        type: {\n          name: \"any\"\n        }\n      },\n      enforcementMode: {\n        defaultValue: \"Default\",\n        serializedName: \"properties.enforcementMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonComplianceMessages: {\n        serializedName: \"properties.nonComplianceMessages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NonComplianceMessage\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ParameterValuesValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ParameterValuesValue\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const NonComplianceMessage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NonComplianceMessage\",\n    modelProperties: {\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      policyDefinitionReferenceId: {\n        serializedName: \"policyDefinitionReferenceId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Identity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Identity\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"SystemAssigned\", \"UserAssigned\", \"None\"]\n        }\n      },\n      userAssignedIdentities: {\n        serializedName: \"userAssignedIdentities\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Composite\",\n              className: \"UserAssignedIdentitiesValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UserAssignedIdentitiesValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UserAssignedIdentitiesValue\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      clientId: {\n        serializedName: \"clientId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemData\",\n    modelProperties: {\n      createdBy: {\n        serializedName: \"createdBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdByType: {\n        serializedName: \"createdByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdAt: {\n        serializedName: \"createdAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModifiedBy: {\n        serializedName: \"lastModifiedBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedByType: {\n        serializedName: \"lastModifiedByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedAt: {\n        serializedName: \"lastModifiedAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyAssignmentUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyAssignmentUpdate\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"Identity\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyAssignmentListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyAssignmentListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicyAssignment\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyDefinition\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      policyType: {\n        serializedName: \"properties.policyType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      mode: {\n        defaultValue: \"Indexed\",\n        serializedName: \"properties.mode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      policyRule: {\n        serializedName: \"properties.policyRule\",\n        type: {\n          name: \"any\"\n        }\n      },\n      metadata: {\n        serializedName: \"properties.metadata\",\n        type: {\n          name: \"any\"\n        }\n      },\n      parameters: {\n        serializedName: \"properties.parameters\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"ParameterDefinitionsValue\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ParameterDefinitionsValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ParameterDefinitionsValue\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedValues: {\n        serializedName: \"allowedValues\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"any\"\n            }\n          }\n        }\n      },\n      defaultValue: {\n        serializedName: \"defaultValue\",\n        type: {\n          name: \"any\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ParameterDefinitionsValueMetadata\"\n        }\n      }\n    }\n  }\n};\n\nexport const ParameterDefinitionsValueMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ParameterDefinitionsValueMetadata\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      strongType: {\n        serializedName: \"strongType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      assignPermissions: {\n        serializedName: \"assignPermissions\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyDefinitionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyDefinitionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicyDefinition\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicySetDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicySetDefinition\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      policyType: {\n        serializedName: \"properties.policyType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"properties.metadata\",\n        type: {\n          name: \"any\"\n        }\n      },\n      parameters: {\n        serializedName: \"properties.parameters\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"ParameterDefinitionsValue\" }\n          }\n        }\n      },\n      policyDefinitions: {\n        serializedName: \"properties.policyDefinitions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicyDefinitionReference\"\n            }\n          }\n        }\n      },\n      policyDefinitionGroups: {\n        serializedName: \"properties.policyDefinitionGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicyDefinitionGroup\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyDefinitionReference: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyDefinitionReference\",\n    modelProperties: {\n      policyDefinitionId: {\n        serializedName: \"policyDefinitionId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"ParameterValuesValue\" }\n          }\n        }\n      },\n      policyDefinitionReferenceId: {\n        serializedName: \"policyDefinitionReferenceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      groupNames: {\n        serializedName: \"groupNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyDefinitionGroup: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyDefinitionGroup\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      additionalMetadataId: {\n        serializedName: \"additionalMetadataId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicySetDefinitionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicySetDefinitionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicySetDefinition\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyExemption: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyExemption\",\n    modelProperties: {\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      policyAssignmentId: {\n        serializedName: \"properties.policyAssignmentId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      policyDefinitionReferenceIds: {\n        serializedName: \"properties.policyDefinitionReferenceIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      exemptionCategory: {\n        serializedName: \"properties.exemptionCategory\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"properties.expiresOn\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"properties.metadata\",\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyExemptionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyExemptionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PolicyExemption\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  PolicyAssignment as PolicyAssignmentMapper,\n  PolicyAssignmentUpdate as PolicyAssignmentUpdateMapper,\n  PolicyDefinition as PolicyDefinitionMapper,\n  PolicySetDefinition as PolicySetDefinitionMapper,\n  PolicyExemption as PolicyExemptionMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const policyMode: OperationURLParameter = {\n  parameterPath: \"policyMode\",\n  mapper: {\n    serializedName: \"policyMode\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-09-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const scope: OperationURLParameter = {\n  parameterPath: \"scope\",\n  mapper: {\n    serializedName: \"scope\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const policyAssignmentName: OperationURLParameter = {\n  parameterPath: \"policyAssignmentName\",\n  mapper: {\n    serializedName: \"policyAssignmentName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion1: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2021-06-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parameters: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PolicyAssignmentMapper\n};\n\nexport const parameters1: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PolicyAssignmentUpdateMapper\n};\n\nexport const resourceGroupName: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[-\\\\w\\\\._\\\\(\\\\)]+$\"),\n      MaxLength: 90,\n      MinLength: 1\n    },\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const subscriptionId: OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    serializedName: \"subscriptionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceProviderNamespace: OperationURLParameter = {\n  parameterPath: \"resourceProviderNamespace\",\n  mapper: {\n    serializedName: \"resourceProviderNamespace\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parentResourcePath: OperationURLParameter = {\n  parameterPath: \"parentResourcePath\",\n  mapper: {\n    serializedName: \"parentResourcePath\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const resourceType: OperationURLParameter = {\n  parameterPath: \"resourceType\",\n  mapper: {\n    serializedName: \"resourceType\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const resourceName: OperationURLParameter = {\n  parameterPath: \"resourceName\",\n  mapper: {\n    serializedName: \"resourceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const managementGroupId: OperationURLParameter = {\n  parameterPath: \"managementGroupId\",\n  mapper: {\n    serializedName: \"managementGroupId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const policyAssignmentId: OperationURLParameter = {\n  parameterPath: \"policyAssignmentId\",\n  mapper: {\n    serializedName: \"policyAssignmentId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const parameters2: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PolicyDefinitionMapper\n};\n\nexport const policyDefinitionName: OperationURLParameter = {\n  parameterPath: \"policyDefinitionName\",\n  mapper: {\n    serializedName: \"policyDefinitionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parameters3: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PolicySetDefinitionMapper\n};\n\nexport const policySetDefinitionName: OperationURLParameter = {\n  parameterPath: \"policySetDefinitionName\",\n  mapper: {\n    serializedName: \"policySetDefinitionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const policyExemptionName: OperationURLParameter = {\n  parameterPath: \"policyExemptionName\",\n  mapper: {\n    serializedName: \"policyExemptionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion2: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-07-01-preview\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parameters4: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PolicyExemptionMapper\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { DataPolicyManifests } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { PolicyClient } from \"../policyClient\";\nimport {\n  DataPolicyManifest,\n  DataPolicyManifestsListNextOptionalParams,\n  DataPolicyManifestsListOptionalParams,\n  DataPolicyManifestsListResponse,\n  DataPolicyManifestsGetByPolicyModeOptionalParams,\n  DataPolicyManifestsGetByPolicyModeResponse,\n  DataPolicyManifestsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DataPolicyManifests operations. */\nexport class DataPolicyManifestsImpl implements DataPolicyManifests {\n  private readonly client: PolicyClient;\n\n  /**\n   * Initialize a new instance of the class DataPolicyManifests class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PolicyClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation retrieves a list of all the data policy manifests that match the optional given\n   * $filter. Valid values for $filter are: \"$filter=namespace eq '{0}'\". If $filter is not provided, the\n   * unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is\n   * provided, the returned list only includes all data policy manifests that have a namespace matching\n   * the provided value.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: DataPolicyManifestsListOptionalParams\n  ): PagedAsyncIterableIterator<DataPolicyManifest> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: DataPolicyManifestsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<DataPolicyManifest[]> {\n    let result: DataPolicyManifestsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: DataPolicyManifestsListOptionalParams\n  ): AsyncIterableIterator<DataPolicyManifest> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the data policy manifest with the given policy mode.\n   * @param policyMode The policy mode of the data policy manifest to get.\n   * @param options The options parameters.\n   */\n  getByPolicyMode(\n    policyMode: string,\n    options?: DataPolicyManifestsGetByPolicyModeOptionalParams\n  ): Promise<DataPolicyManifestsGetByPolicyModeResponse> {\n    return this.client.sendOperationRequest(\n      { policyMode, options },\n      getByPolicyModeOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a list of all the data policy manifests that match the optional given\n   * $filter. Valid values for $filter are: \"$filter=namespace eq '{0}'\". If $filter is not provided, the\n   * unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is\n   * provided, the returned list only includes all data policy manifests that have a namespace matching\n   * the provided value.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: DataPolicyManifestsListOptionalParams\n  ): Promise<DataPolicyManifestsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: DataPolicyManifestsListNextOptionalParams\n  ): Promise<DataPolicyManifestsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getByPolicyModeOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataPolicyManifest\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.policyMode],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Authorization/dataPolicyManifests\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataPolicyManifestListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataPolicyManifestListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PolicyAssignments } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { PolicyClient } from \"../policyClient\";\nimport {\n  PolicyAssignment,\n  PolicyAssignmentsListForResourceGroupNextOptionalParams,\n  PolicyAssignmentsListForResourceGroupOptionalParams,\n  PolicyAssignmentsListForResourceGroupResponse,\n  PolicyAssignmentsListForResourceNextOptionalParams,\n  PolicyAssignmentsListForResourceOptionalParams,\n  PolicyAssignmentsListForResourceResponse,\n  PolicyAssignmentsListForManagementGroupNextOptionalParams,\n  PolicyAssignmentsListForManagementGroupOptionalParams,\n  PolicyAssignmentsListForManagementGroupResponse,\n  PolicyAssignmentsListNextOptionalParams,\n  PolicyAssignmentsListOptionalParams,\n  PolicyAssignmentsListResponse,\n  PolicyAssignmentsDeleteOptionalParams,\n  PolicyAssignmentsDeleteResponse,\n  PolicyAssignmentsCreateOptionalParams,\n  PolicyAssignmentsCreateResponse,\n  PolicyAssignmentsGetOptionalParams,\n  PolicyAssignmentsGetResponse,\n  PolicyAssignmentUpdate,\n  PolicyAssignmentsUpdateOptionalParams,\n  PolicyAssignmentsUpdateResponse,\n  PolicyAssignmentsDeleteByIdOptionalParams,\n  PolicyAssignmentsDeleteByIdResponse,\n  PolicyAssignmentsCreateByIdOptionalParams,\n  PolicyAssignmentsCreateByIdResponse,\n  PolicyAssignmentsGetByIdOptionalParams,\n  PolicyAssignmentsGetByIdResponse,\n  PolicyAssignmentsUpdateByIdOptionalParams,\n  PolicyAssignmentsUpdateByIdResponse,\n  PolicyAssignmentsListForResourceGroupNextResponse,\n  PolicyAssignmentsListForResourceNextResponse,\n  PolicyAssignmentsListForManagementGroupNextResponse,\n  PolicyAssignmentsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PolicyAssignments operations. */\nexport class PolicyAssignmentsImpl implements PolicyAssignments {\n  private readonly client: PolicyClient;\n\n  /**\n   * Initialize a new instance of the class PolicyAssignments class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PolicyClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the given resource group\n   * in the given subscription that match the optional given $filter. Valid values for $filter are:\n   * 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the\n   * unfiltered list includes all policy assignments associated with the resource group, including those\n   * that apply directly or apply from containing scopes, as well as any applied to resources contained\n   * within the resource group. If $filter=atScope() is provided, the returned list includes all policy\n   * assignments that apply to the resource group, which is everything in the unfiltered list except\n   * those applied to resources contained within the resource group. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy assignments that at the resource group. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value} that apply to the resource group.\n   * @param resourceGroupName The name of the resource group that contains policy assignments.\n   * @param options The options parameters.\n   */\n  public listForResourceGroup(\n    resourceGroupName: string,\n    options?: PolicyAssignmentsListForResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicyAssignment> {\n    const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PolicyAssignmentsListForResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyAssignment[]> {\n    let result: PolicyAssignmentsListForResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PolicyAssignmentsListForResourceGroupOptionalParams\n  ): AsyncIterableIterator<PolicyAssignment> {\n    for await (const page of this.listForResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the specified resource\n   * in the given resource group and subscription that match the optional given $filter. Valid values for\n   * $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not\n   * provided, the unfiltered list includes all policy assignments associated with the resource,\n   * including those that apply directly or from all containing scopes, as well as any applied to\n   * resources contained within the resource. If $filter=atScope() is provided, the returned list\n   * includes all policy assignments that apply to the resource, which is everything in the unfiltered\n   * list except those applied to resources contained within the resource. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy assignments that at the resource level. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value} that apply to the resource. Three\n   * parameters plus the resource name are used to identify a specific resource. If the resource is not\n   * part of a parent resource (the more common case), the parent resource path should not be provided\n   * (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} ==\n   * 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} ==\n   * 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided.\n   * For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} ==\n   * 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} ==\n   * 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the\n   * namespace and type name separately is to provide both in the {resourceType} parameter, format:\n   * ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} ==\n   * 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param options The options parameters.\n   */\n  public listForResource(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyAssignmentsListForResourceOptionalParams\n  ): PagedAsyncIterableIterator<PolicyAssignment> {\n    const iter = this.listForResourcePagingAll(\n      resourceGroupName,\n      resourceProviderNamespace,\n      parentResourcePath,\n      resourceType,\n      resourceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForResourcePagingPage(\n          resourceGroupName,\n          resourceProviderNamespace,\n          parentResourcePath,\n          resourceType,\n          resourceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForResourcePagingPage(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyAssignmentsListForResourceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyAssignment[]> {\n    let result: PolicyAssignmentsListForResourceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForResource(\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForResourceNext(\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForResourcePagingAll(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyAssignmentsListForResourceOptionalParams\n  ): AsyncIterableIterator<PolicyAssignment> {\n    for await (const page of this.listForResourcePagingPage(\n      resourceGroupName,\n      resourceProviderNamespace,\n      parentResourcePath,\n      resourceType,\n      resourceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments applicable to the management group that\n   * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or\n   * 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all\n   * policy assignments that are assigned to the management group or the management group's ancestors. If\n   * $filter=atExactScope() is provided, the returned list only includes all policy assignments that at\n   * the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list\n   * includes all policy assignments of the policy definition whose id is {value} that apply to the\n   * management group.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  public listForManagementGroup(\n    managementGroupId: string,\n    options?: PolicyAssignmentsListForManagementGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicyAssignment> {\n    const iter = this.listForManagementGroupPagingAll(\n      managementGroupId,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForManagementGroupPagingPage(\n          managementGroupId,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForManagementGroupPagingPage(\n    managementGroupId: string,\n    options?: PolicyAssignmentsListForManagementGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyAssignment[]> {\n    let result: PolicyAssignmentsListForManagementGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForManagementGroup(managementGroupId, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForManagementGroupNext(\n        managementGroupId,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForManagementGroupPagingAll(\n    managementGroupId: string,\n    options?: PolicyAssignmentsListForManagementGroupOptionalParams\n  ): AsyncIterableIterator<PolicyAssignment> {\n    for await (const page of this.listForManagementGroupPagingPage(\n      managementGroupId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the given subscription\n   * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()'\n   * or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all\n   * policy assignments associated with the subscription, including those that apply directly or from\n   * management groups that contain the given subscription, as well as any applied to objects contained\n   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy\n   * assignments that apply to the subscription, which is everything in the unfiltered list except those\n   * applied to objects contained within the subscription. If $filter=atExactScope() is provided, the\n   * returned list only includes all policy assignments that at the subscription. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value}.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: PolicyAssignmentsListOptionalParams\n  ): PagedAsyncIterableIterator<PolicyAssignment> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: PolicyAssignmentsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyAssignment[]> {\n    let result: PolicyAssignmentsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: PolicyAssignmentsListOptionalParams\n  ): AsyncIterableIterator<PolicyAssignment> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation deletes a policy assignment, given its name and the scope it was created in. The\n   * scope of a policy assignment is the part of its ID preceding\n   * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.\n   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyAssignmentName The name of the policy assignment to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    scope: string,\n    policyAssignmentName: string,\n    options?: PolicyAssignmentsDeleteOptionalParams\n  ): Promise<PolicyAssignmentsDeleteResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyAssignmentName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   *  This operation creates or updates a policy assignment with the given scope and name. Policy\n   * assignments apply to all resources contained within their scope. For example, when you assign a\n   * policy at resource group scope, that policy applies to all resources in the group.\n   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyAssignmentName The name of the policy assignment.\n   * @param parameters Parameters for the policy assignment.\n   * @param options The options parameters.\n   */\n  create(\n    scope: string,\n    policyAssignmentName: string,\n    parameters: PolicyAssignment,\n    options?: PolicyAssignmentsCreateOptionalParams\n  ): Promise<PolicyAssignmentsCreateResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyAssignmentName, parameters, options },\n      createOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a single policy assignment, given its name and the scope it was created at.\n   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyAssignmentName The name of the policy assignment to get.\n   * @param options The options parameters.\n   */\n  get(\n    scope: string,\n    policyAssignmentName: string,\n    options?: PolicyAssignmentsGetOptionalParams\n  ): Promise<PolicyAssignmentsGetResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyAssignmentName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   *  This operation updates a policy assignment with the given scope and name. Policy assignments apply\n   * to all resources contained within their scope. For example, when you assign a policy at resource\n   * group scope, that policy applies to all resources in the group.\n   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyAssignmentName The name of the policy assignment.\n   * @param parameters Parameters for policy assignment patch request.\n   * @param options The options parameters.\n   */\n  update(\n    scope: string,\n    policyAssignmentName: string,\n    parameters: PolicyAssignmentUpdate,\n    options?: PolicyAssignmentsUpdateOptionalParams\n  ): Promise<PolicyAssignmentsUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyAssignmentName, parameters, options },\n      updateOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the given resource group\n   * in the given subscription that match the optional given $filter. Valid values for $filter are:\n   * 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the\n   * unfiltered list includes all policy assignments associated with the resource group, including those\n   * that apply directly or apply from containing scopes, as well as any applied to resources contained\n   * within the resource group. If $filter=atScope() is provided, the returned list includes all policy\n   * assignments that apply to the resource group, which is everything in the unfiltered list except\n   * those applied to resources contained within the resource group. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy assignments that at the resource group. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value} that apply to the resource group.\n   * @param resourceGroupName The name of the resource group that contains policy assignments.\n   * @param options The options parameters.\n   */\n  private _listForResourceGroup(\n    resourceGroupName: string,\n    options?: PolicyAssignmentsListForResourceGroupOptionalParams\n  ): Promise<PolicyAssignmentsListForResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listForResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the specified resource\n   * in the given resource group and subscription that match the optional given $filter. Valid values for\n   * $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not\n   * provided, the unfiltered list includes all policy assignments associated with the resource,\n   * including those that apply directly or from all containing scopes, as well as any applied to\n   * resources contained within the resource. If $filter=atScope() is provided, the returned list\n   * includes all policy assignments that apply to the resource, which is everything in the unfiltered\n   * list except those applied to resources contained within the resource. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy assignments that at the resource level. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value} that apply to the resource. Three\n   * parameters plus the resource name are used to identify a specific resource. If the resource is not\n   * part of a parent resource (the more common case), the parent resource path should not be provided\n   * (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} ==\n   * 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} ==\n   * 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided.\n   * For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} ==\n   * 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} ==\n   * 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the\n   * namespace and type name separately is to provide both in the {resourceType} parameter, format:\n   * ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} ==\n   * 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param options The options parameters.\n   */\n  private _listForResource(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyAssignmentsListForResourceOptionalParams\n  ): Promise<PolicyAssignmentsListForResourceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        options\n      },\n      listForResourceOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments applicable to the management group that\n   * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or\n   * 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all\n   * policy assignments that are assigned to the management group or the management group's ancestors. If\n   * $filter=atExactScope() is provided, the returned list only includes all policy assignments that at\n   * the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list\n   * includes all policy assignments of the policy definition whose id is {value} that apply to the\n   * management group.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  private _listForManagementGroup(\n    managementGroupId: string,\n    options?: PolicyAssignmentsListForManagementGroupOptionalParams\n  ): Promise<PolicyAssignmentsListForManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, options },\n      listForManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy assignments associated with the given subscription\n   * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()'\n   * or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all\n   * policy assignments associated with the subscription, including those that apply directly or from\n   * management groups that contain the given subscription, as well as any applied to objects contained\n   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy\n   * assignments that apply to the subscription, which is everything in the unfiltered list except those\n   * applied to objects contained within the subscription. If $filter=atExactScope() is provided, the\n   * returned list only includes all policy assignments that at the subscription. If\n   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy\n   * assignments of the policy definition whose id is {value}.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: PolicyAssignmentsListOptionalParams\n  ): Promise<PolicyAssignmentsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * This operation deletes the policy with the given ID. Policy assignment IDs have this format:\n   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats\n   * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management\n   * group), '/subscriptions/{subscriptionId}' (subscription),\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * (resource).\n   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format\n   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.\n   * @param options The options parameters.\n   */\n  deleteById(\n    policyAssignmentId: string,\n    options?: PolicyAssignmentsDeleteByIdOptionalParams\n  ): Promise<PolicyAssignmentsDeleteByIdResponse> {\n    return this.client.sendOperationRequest(\n      { policyAssignmentId, options },\n      deleteByIdOperationSpec\n    );\n  }\n\n  /**\n   * This operation creates or updates the policy assignment with the given ID. Policy assignments made\n   * on a scope apply to all resources contained in that scope. For example, when you assign a policy to\n   * a resource group that policy applies to all resources in the group. Policy assignment IDs have this\n   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid\n   * scopes are: management group (format:\n   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   * '/subscriptions/{subscriptionId}'), resource group (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.\n   * @param policyAssignmentId The ID of the policy assignment to create. Use the format\n   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.\n   * @param parameters Parameters for policy assignment.\n   * @param options The options parameters.\n   */\n  createById(\n    policyAssignmentId: string,\n    parameters: PolicyAssignment,\n    options?: PolicyAssignmentsCreateByIdOptionalParams\n  ): Promise<PolicyAssignmentsCreateByIdResponse> {\n    return this.client.sendOperationRequest(\n      { policyAssignmentId, parameters, options },\n      createByIdOperationSpec\n    );\n  }\n\n  /**\n   * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this\n   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid\n   * scopes are: management group (format:\n   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   * '/subscriptions/{subscriptionId}'), resource group (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.\n   * @param policyAssignmentId The ID of the policy assignment to get. Use the format\n   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.\n   * @param options The options parameters.\n   */\n  getById(\n    policyAssignmentId: string,\n    options?: PolicyAssignmentsGetByIdOptionalParams\n  ): Promise<PolicyAssignmentsGetByIdResponse> {\n    return this.client.sendOperationRequest(\n      { policyAssignmentId, options },\n      getByIdOperationSpec\n    );\n  }\n\n  /**\n   * This operation updates the policy assignment with the given ID. Policy assignments made on a scope\n   * apply to all resources contained in that scope. For example, when you assign a policy to a resource\n   * group that policy applies to all resources in the group. Policy assignment IDs have this format:\n   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes\n   * are: management group (format:\n   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   * '/subscriptions/{subscriptionId}'), resource group (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.\n   * @param policyAssignmentId The ID of the policy assignment to update. Use the format\n   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.\n   * @param parameters Parameters for policy assignment patch request.\n   * @param options The options parameters.\n   */\n  updateById(\n    policyAssignmentId: string,\n    parameters: PolicyAssignmentUpdate,\n    options?: PolicyAssignmentsUpdateByIdOptionalParams\n  ): Promise<PolicyAssignmentsUpdateByIdResponse> {\n    return this.client.sendOperationRequest(\n      { policyAssignmentId, parameters, options },\n      updateByIdOperationSpec\n    );\n  }\n\n  /**\n   * ListForResourceGroupNext\n   * @param resourceGroupName The name of the resource group that contains policy assignments.\n   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listForResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: PolicyAssignmentsListForResourceGroupNextOptionalParams\n  ): Promise<PolicyAssignmentsListForResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listForResourceGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListForResourceNext\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param nextLink The nextLink from the previous successful call to the ListForResource method.\n   * @param options The options parameters.\n   */\n  private _listForResourceNext(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    nextLink: string,\n    options?: PolicyAssignmentsListForResourceNextOptionalParams\n  ): Promise<PolicyAssignmentsListForResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        nextLink,\n        options\n      },\n      listForResourceNextOperationSpec\n    );\n  }\n\n  /**\n   * ListForManagementGroupNext\n   * @param managementGroupId The ID of the management group.\n   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.\n   * @param options The options parameters.\n   */\n  private _listForManagementGroupNext(\n    managementGroupId: string,\n    nextLink: string,\n    options?: PolicyAssignmentsListForManagementGroupNextOptionalParams\n  ): Promise<PolicyAssignmentsListForManagementGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, nextLink, options },\n      listForManagementGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: PolicyAssignmentsListNextOptionalParams\n  ): Promise<PolicyAssignmentsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyAssignmentName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyAssignmentName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyAssignmentName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters1,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyAssignmentName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listForResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n    Parameters.parentResourcePath,\n    Parameters.resourceType,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.managementGroupId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/{policyAssignmentId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/{policyAssignmentId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/{policyAssignmentId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/{policyAssignmentId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignment\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters1,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listForResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n    Parameters.parentResourcePath,\n    Parameters.resourceType,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForManagementGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.managementGroupId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PolicyDefinitions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { PolicyClient } from \"../policyClient\";\nimport {\n  PolicyDefinition,\n  PolicyDefinitionsListNextOptionalParams,\n  PolicyDefinitionsListOptionalParams,\n  PolicyDefinitionsListResponse,\n  PolicyDefinitionsListBuiltInNextOptionalParams,\n  PolicyDefinitionsListBuiltInOptionalParams,\n  PolicyDefinitionsListBuiltInResponse,\n  PolicyDefinitionsListByManagementGroupNextOptionalParams,\n  PolicyDefinitionsListByManagementGroupOptionalParams,\n  PolicyDefinitionsListByManagementGroupResponse,\n  PolicyDefinitionsCreateOrUpdateOptionalParams,\n  PolicyDefinitionsCreateOrUpdateResponse,\n  PolicyDefinitionsDeleteOptionalParams,\n  PolicyDefinitionsGetOptionalParams,\n  PolicyDefinitionsGetResponse,\n  PolicyDefinitionsGetBuiltInOptionalParams,\n  PolicyDefinitionsGetBuiltInResponse,\n  PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,\n  PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse,\n  PolicyDefinitionsDeleteAtManagementGroupOptionalParams,\n  PolicyDefinitionsGetAtManagementGroupOptionalParams,\n  PolicyDefinitionsGetAtManagementGroupResponse,\n  PolicyDefinitionsListNextResponse,\n  PolicyDefinitionsListBuiltInNextResponse,\n  PolicyDefinitionsListByManagementGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PolicyDefinitions operations. */\nexport class PolicyDefinitionsImpl implements PolicyDefinitions {\n  private readonly client: PolicyClient;\n\n  /**\n   * Initialize a new instance of the class PolicyDefinitions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PolicyClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation retrieves a list of all the policy definitions in a given subscription that match the\n   * optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or\n   * 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy\n   * definitions associated with the subscription, including those that apply directly or from management\n   * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list\n   * only includes all policy definitions that at the given subscription. If $filter='policyType -eq\n   * {value}' is provided, the returned list only includes all policy definitions whose type match the\n   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If\n   * $filter='category -eq {value}' is provided, the returned list only includes all policy definitions\n   * whose category match the {value}.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: PolicyDefinitionsListOptionalParams\n  ): PagedAsyncIterableIterator<PolicyDefinition> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: PolicyDefinitionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyDefinition[]> {\n    let result: PolicyDefinitionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: PolicyDefinitionsListOptionalParams\n  ): AsyncIterableIterator<PolicyDefinition> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves a list of all the built-in policy definitions that match the optional given\n   * $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all\n   * built-in policy definitions whose type match the {value}. Possible policyType values are\n   * NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the\n   * returned list only includes all built-in policy definitions whose category match the {value}.\n   * @param options The options parameters.\n   */\n  public listBuiltIn(\n    options?: PolicyDefinitionsListBuiltInOptionalParams\n  ): PagedAsyncIterableIterator<PolicyDefinition> {\n    const iter = this.listBuiltInPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBuiltInPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBuiltInPagingPage(\n    options?: PolicyDefinitionsListBuiltInOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyDefinition[]> {\n    let result: PolicyDefinitionsListBuiltInResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBuiltIn(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBuiltInNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBuiltInPagingAll(\n    options?: PolicyDefinitionsListBuiltInOptionalParams\n  ): AsyncIterableIterator<PolicyDefinition> {\n    for await (const page of this.listBuiltInPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves a list of all the policy definitions in a given management group that match\n   * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'\n   * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy\n   * definitions associated with the management group, including those that apply directly or from\n   * management groups that contain the given management group. If $filter=atExactScope() is provided,\n   * the returned list only includes all policy definitions that at the given management group. If\n   * $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions\n   * whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and\n   * Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy\n   * definitions whose category match the {value}.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  public listByManagementGroup(\n    managementGroupId: string,\n    options?: PolicyDefinitionsListByManagementGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicyDefinition> {\n    const iter = this.listByManagementGroupPagingAll(\n      managementGroupId,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByManagementGroupPagingPage(\n          managementGroupId,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByManagementGroupPagingPage(\n    managementGroupId: string,\n    options?: PolicyDefinitionsListByManagementGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyDefinition[]> {\n    let result: PolicyDefinitionsListByManagementGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByManagementGroup(managementGroupId, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByManagementGroupNext(\n        managementGroupId,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByManagementGroupPagingAll(\n    managementGroupId: string,\n    options?: PolicyDefinitionsListByManagementGroupOptionalParams\n  ): AsyncIterableIterator<PolicyDefinition> {\n    for await (const page of this.listByManagementGroupPagingPage(\n      managementGroupId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation creates or updates a policy definition in the given subscription with the given name.\n   * @param policyDefinitionName The name of the policy definition to create.\n   * @param parameters The policy definition properties.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    policyDefinitionName: string,\n    parameters: PolicyDefinition,\n    options?: PolicyDefinitionsCreateOrUpdateOptionalParams\n  ): Promise<PolicyDefinitionsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, parameters, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * This operation deletes the policy definition in the given subscription with the given name.\n   * @param policyDefinitionName The name of the policy definition to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    policyDefinitionName: string,\n    options?: PolicyDefinitionsDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the policy definition in the given subscription with the given name.\n   * @param policyDefinitionName The name of the policy definition to get.\n   * @param options The options parameters.\n   */\n  get(\n    policyDefinitionName: string,\n    options?: PolicyDefinitionsGetOptionalParams\n  ): Promise<PolicyDefinitionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the built-in policy definition with the given name.\n   * @param policyDefinitionName The name of the built-in policy definition to get.\n   * @param options The options parameters.\n   */\n  getBuiltIn(\n    policyDefinitionName: string,\n    options?: PolicyDefinitionsGetBuiltInOptionalParams\n  ): Promise<PolicyDefinitionsGetBuiltInResponse> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, options },\n      getBuiltInOperationSpec\n    );\n  }\n\n  /**\n   * This operation creates or updates a policy definition in the given management group with the given\n   * name.\n   * @param policyDefinitionName The name of the policy definition to create.\n   * @param managementGroupId The ID of the management group.\n   * @param parameters The policy definition properties.\n   * @param options The options parameters.\n   */\n  createOrUpdateAtManagementGroup(\n    policyDefinitionName: string,\n    managementGroupId: string,\n    parameters: PolicyDefinition,\n    options?: PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams\n  ): Promise<PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, managementGroupId, parameters, options },\n      createOrUpdateAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation deletes the policy definition in the given management group with the given name.\n   * @param policyDefinitionName The name of the policy definition to delete.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  deleteAtManagementGroup(\n    policyDefinitionName: string,\n    managementGroupId: string,\n    options?: PolicyDefinitionsDeleteAtManagementGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, managementGroupId, options },\n      deleteAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the policy definition in the given management group with the given name.\n   * @param policyDefinitionName The name of the policy definition to get.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  getAtManagementGroup(\n    policyDefinitionName: string,\n    managementGroupId: string,\n    options?: PolicyDefinitionsGetAtManagementGroupOptionalParams\n  ): Promise<PolicyDefinitionsGetAtManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { policyDefinitionName, managementGroupId, options },\n      getAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a list of all the policy definitions in a given subscription that match the\n   * optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or\n   * 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy\n   * definitions associated with the subscription, including those that apply directly or from management\n   * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list\n   * only includes all policy definitions that at the given subscription. If $filter='policyType -eq\n   * {value}' is provided, the returned list only includes all policy definitions whose type match the\n   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If\n   * $filter='category -eq {value}' is provided, the returned list only includes all policy definitions\n   * whose category match the {value}.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: PolicyDefinitionsListOptionalParams\n  ): Promise<PolicyDefinitionsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * This operation retrieves a list of all the built-in policy definitions that match the optional given\n   * $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all\n   * built-in policy definitions whose type match the {value}. Possible policyType values are\n   * NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the\n   * returned list only includes all built-in policy definitions whose category match the {value}.\n   * @param options The options parameters.\n   */\n  private _listBuiltIn(\n    options?: PolicyDefinitionsListBuiltInOptionalParams\n  ): Promise<PolicyDefinitionsListBuiltInResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBuiltInOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a list of all the policy definitions in a given management group that match\n   * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'\n   * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy\n   * definitions associated with the management group, including those that apply directly or from\n   * management groups that contain the given management group. If $filter=atExactScope() is provided,\n   * the returned list only includes all policy definitions that at the given management group. If\n   * $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions\n   * whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and\n   * Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy\n   * definitions whose category match the {value}.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  private _listByManagementGroup(\n    managementGroupId: string,\n    options?: PolicyDefinitionsListByManagementGroupOptionalParams\n  ): Promise<PolicyDefinitionsListByManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, options },\n      listByManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: PolicyDefinitionsListNextOptionalParams\n  ): Promise<PolicyDefinitionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListBuiltInNext\n   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.\n   * @param options The options parameters.\n   */\n  private _listBuiltInNext(\n    nextLink: string,\n    options?: PolicyDefinitionsListBuiltInNextOptionalParams\n  ): Promise<PolicyDefinitionsListBuiltInNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBuiltInNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByManagementGroupNext\n   * @param managementGroupId The ID of the management group.\n   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.\n   * @param options The options parameters.\n   */\n  private _listByManagementGroupNext(\n    managementGroupId: string,\n    nextLink: string,\n    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams\n  ): Promise<PolicyDefinitionsListByManagementGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, nextLink, options },\n      listByManagementGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.PolicyDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getBuiltInOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policyDefinitionName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.PolicyDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policyDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBuiltInOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Authorization/policyDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.managementGroupId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBuiltInNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByManagementGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.managementGroupId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PolicySetDefinitions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { PolicyClient } from \"../policyClient\";\nimport {\n  PolicySetDefinition,\n  PolicySetDefinitionsListNextOptionalParams,\n  PolicySetDefinitionsListOptionalParams,\n  PolicySetDefinitionsListResponse,\n  PolicySetDefinitionsListBuiltInNextOptionalParams,\n  PolicySetDefinitionsListBuiltInOptionalParams,\n  PolicySetDefinitionsListBuiltInResponse,\n  PolicySetDefinitionsListByManagementGroupNextOptionalParams,\n  PolicySetDefinitionsListByManagementGroupOptionalParams,\n  PolicySetDefinitionsListByManagementGroupResponse,\n  PolicySetDefinitionsCreateOrUpdateOptionalParams,\n  PolicySetDefinitionsCreateOrUpdateResponse,\n  PolicySetDefinitionsDeleteOptionalParams,\n  PolicySetDefinitionsGetOptionalParams,\n  PolicySetDefinitionsGetResponse,\n  PolicySetDefinitionsGetBuiltInOptionalParams,\n  PolicySetDefinitionsGetBuiltInResponse,\n  PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,\n  PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse,\n  PolicySetDefinitionsDeleteAtManagementGroupOptionalParams,\n  PolicySetDefinitionsGetAtManagementGroupOptionalParams,\n  PolicySetDefinitionsGetAtManagementGroupResponse,\n  PolicySetDefinitionsListNextResponse,\n  PolicySetDefinitionsListBuiltInNextResponse,\n  PolicySetDefinitionsListByManagementGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PolicySetDefinitions operations. */\nexport class PolicySetDefinitionsImpl implements PolicySetDefinitions {\n  private readonly client: PolicyClient;\n\n  /**\n   * Initialize a new instance of the class PolicySetDefinitions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PolicyClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation retrieves a list of all the policy set definitions in a given subscription that match\n   * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'\n   * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set\n   * definitions associated with the subscription, including those that apply directly or from management\n   * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list\n   * only includes all policy set definitions that at the given subscription. If $filter='policyType -eq\n   * {value}' is provided, the returned list only includes all policy set definitions whose type match\n   * the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category\n   * -eq {value}' is provided, the returned list only includes all policy set definitions whose category\n   * match the {value}.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: PolicySetDefinitionsListOptionalParams\n  ): PagedAsyncIterableIterator<PolicySetDefinition> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: PolicySetDefinitionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicySetDefinition[]> {\n    let result: PolicySetDefinitionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: PolicySetDefinitionsListOptionalParams\n  ): AsyncIterableIterator<PolicySetDefinition> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves a list of all the built-in policy set definitions that match the optional\n   * given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all\n   * built-in policy set definitions whose category match the {value}.\n   * @param options The options parameters.\n   */\n  public listBuiltIn(\n    options?: PolicySetDefinitionsListBuiltInOptionalParams\n  ): PagedAsyncIterableIterator<PolicySetDefinition> {\n    const iter = this.listBuiltInPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBuiltInPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBuiltInPagingPage(\n    options?: PolicySetDefinitionsListBuiltInOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicySetDefinition[]> {\n    let result: PolicySetDefinitionsListBuiltInResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBuiltIn(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBuiltInNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBuiltInPagingAll(\n    options?: PolicySetDefinitionsListBuiltInOptionalParams\n  ): AsyncIterableIterator<PolicySetDefinition> {\n    for await (const page of this.listBuiltInPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves a list of all the policy set definitions in a given management group that\n   * match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq\n   * {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all\n   * policy set definitions associated with the management group, including those that apply directly or\n   * from management groups that contain the given management group. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy set definitions that at the given management\n   * group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy\n   * set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn\n   * and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all\n   * policy set definitions whose category match the {value}.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  public listByManagementGroup(\n    managementGroupId: string,\n    options?: PolicySetDefinitionsListByManagementGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicySetDefinition> {\n    const iter = this.listByManagementGroupPagingAll(\n      managementGroupId,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByManagementGroupPagingPage(\n          managementGroupId,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByManagementGroupPagingPage(\n    managementGroupId: string,\n    options?: PolicySetDefinitionsListByManagementGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicySetDefinition[]> {\n    let result: PolicySetDefinitionsListByManagementGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByManagementGroup(managementGroupId, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByManagementGroupNext(\n        managementGroupId,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByManagementGroupPagingAll(\n    managementGroupId: string,\n    options?: PolicySetDefinitionsListByManagementGroupOptionalParams\n  ): AsyncIterableIterator<PolicySetDefinition> {\n    for await (const page of this.listByManagementGroupPagingPage(\n      managementGroupId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation creates or updates a policy set definition in the given subscription with the given\n   * name.\n   * @param policySetDefinitionName The name of the policy set definition to create.\n   * @param parameters The policy set definition properties.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    policySetDefinitionName: string,\n    parameters: PolicySetDefinition,\n    options?: PolicySetDefinitionsCreateOrUpdateOptionalParams\n  ): Promise<PolicySetDefinitionsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, parameters, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * This operation deletes the policy set definition in the given subscription with the given name.\n   * @param policySetDefinitionName The name of the policy set definition to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    policySetDefinitionName: string,\n    options?: PolicySetDefinitionsDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the policy set definition in the given subscription with the given name.\n   * @param policySetDefinitionName The name of the policy set definition to get.\n   * @param options The options parameters.\n   */\n  get(\n    policySetDefinitionName: string,\n    options?: PolicySetDefinitionsGetOptionalParams\n  ): Promise<PolicySetDefinitionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the built-in policy set definition with the given name.\n   * @param policySetDefinitionName The name of the policy set definition to get.\n   * @param options The options parameters.\n   */\n  getBuiltIn(\n    policySetDefinitionName: string,\n    options?: PolicySetDefinitionsGetBuiltInOptionalParams\n  ): Promise<PolicySetDefinitionsGetBuiltInResponse> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, options },\n      getBuiltInOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a list of all the policy set definitions in a given subscription that match\n   * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'\n   * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set\n   * definitions associated with the subscription, including those that apply directly or from management\n   * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list\n   * only includes all policy set definitions that at the given subscription. If $filter='policyType -eq\n   * {value}' is provided, the returned list only includes all policy set definitions whose type match\n   * the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category\n   * -eq {value}' is provided, the returned list only includes all policy set definitions whose category\n   * match the {value}.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: PolicySetDefinitionsListOptionalParams\n  ): Promise<PolicySetDefinitionsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * This operation retrieves a list of all the built-in policy set definitions that match the optional\n   * given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all\n   * built-in policy set definitions whose category match the {value}.\n   * @param options The options parameters.\n   */\n  private _listBuiltIn(\n    options?: PolicySetDefinitionsListBuiltInOptionalParams\n  ): Promise<PolicySetDefinitionsListBuiltInResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBuiltInOperationSpec\n    );\n  }\n\n  /**\n   * This operation creates or updates a policy set definition in the given management group with the\n   * given name.\n   * @param policySetDefinitionName The name of the policy set definition to create.\n   * @param managementGroupId The ID of the management group.\n   * @param parameters The policy set definition properties.\n   * @param options The options parameters.\n   */\n  createOrUpdateAtManagementGroup(\n    policySetDefinitionName: string,\n    managementGroupId: string,\n    parameters: PolicySetDefinition,\n    options?: PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams\n  ): Promise<PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, managementGroupId, parameters, options },\n      createOrUpdateAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation deletes the policy set definition in the given management group with the given name.\n   * @param policySetDefinitionName The name of the policy set definition to delete.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  deleteAtManagementGroup(\n    policySetDefinitionName: string,\n    managementGroupId: string,\n    options?: PolicySetDefinitionsDeleteAtManagementGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, managementGroupId, options },\n      deleteAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the policy set definition in the given management group with the given\n   * name.\n   * @param policySetDefinitionName The name of the policy set definition to get.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  getAtManagementGroup(\n    policySetDefinitionName: string,\n    managementGroupId: string,\n    options?: PolicySetDefinitionsGetAtManagementGroupOptionalParams\n  ): Promise<PolicySetDefinitionsGetAtManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { policySetDefinitionName, managementGroupId, options },\n      getAtManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a list of all the policy set definitions in a given management group that\n   * match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq\n   * {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all\n   * policy set definitions associated with the management group, including those that apply directly or\n   * from management groups that contain the given management group. If $filter=atExactScope() is\n   * provided, the returned list only includes all policy set definitions that at the given management\n   * group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy\n   * set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn\n   * and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all\n   * policy set definitions whose category match the {value}.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  private _listByManagementGroup(\n    managementGroupId: string,\n    options?: PolicySetDefinitionsListByManagementGroupOptionalParams\n  ): Promise<PolicySetDefinitionsListByManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, options },\n      listByManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: PolicySetDefinitionsListNextOptionalParams\n  ): Promise<PolicySetDefinitionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListBuiltInNext\n   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.\n   * @param options The options parameters.\n   */\n  private _listBuiltInNext(\n    nextLink: string,\n    options?: PolicySetDefinitionsListBuiltInNextOptionalParams\n  ): Promise<PolicySetDefinitionsListBuiltInNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBuiltInNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByManagementGroupNext\n   * @param managementGroupId The ID of the management group.\n   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.\n   * @param options The options parameters.\n   */\n  private _listByManagementGroupNext(\n    managementGroupId: string,\n    nextLink: string,\n    options?: PolicySetDefinitionsListByManagementGroupNextOptionalParams\n  ): Promise<PolicySetDefinitionsListByManagementGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, nextLink, options },\n      listByManagementGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    201: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters3,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getBuiltInOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.policySetDefinitionName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBuiltInOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Authorization/policySetDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    201: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters3,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAtManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinition\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.managementGroupId,\n    Parameters.policySetDefinitionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion1, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.managementGroupId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBuiltInNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByManagementGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicySetDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.managementGroupId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PolicyExemptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { PolicyClient } from \"../policyClient\";\nimport {\n  PolicyExemption,\n  PolicyExemptionsListNextOptionalParams,\n  PolicyExemptionsListOptionalParams,\n  PolicyExemptionsListResponse,\n  PolicyExemptionsListForResourceGroupNextOptionalParams,\n  PolicyExemptionsListForResourceGroupOptionalParams,\n  PolicyExemptionsListForResourceGroupResponse,\n  PolicyExemptionsListForResourceNextOptionalParams,\n  PolicyExemptionsListForResourceOptionalParams,\n  PolicyExemptionsListForResourceResponse,\n  PolicyExemptionsListForManagementGroupNextOptionalParams,\n  PolicyExemptionsListForManagementGroupOptionalParams,\n  PolicyExemptionsListForManagementGroupResponse,\n  PolicyExemptionsDeleteOptionalParams,\n  PolicyExemptionsCreateOrUpdateOptionalParams,\n  PolicyExemptionsCreateOrUpdateResponse,\n  PolicyExemptionsGetOptionalParams,\n  PolicyExemptionsGetResponse,\n  PolicyExemptionsListNextResponse,\n  PolicyExemptionsListForResourceGroupNextResponse,\n  PolicyExemptionsListForResourceNextResponse,\n  PolicyExemptionsListForManagementGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PolicyExemptions operations. */\nexport class PolicyExemptionsImpl implements PolicyExemptions {\n  private readonly client: PolicyClient;\n\n  /**\n   * Initialize a new instance of the class PolicyExemptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PolicyClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the given subscription\n   * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',\n   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, the unfiltered\n   * list includes all policy exemptions associated with the subscription, including those that apply\n   * directly or from management groups that contain the given subscription, as well as any applied to\n   * objects contained within the subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: PolicyExemptionsListOptionalParams\n  ): PagedAsyncIterableIterator<PolicyExemption> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: PolicyExemptionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyExemption[]> {\n    let result: PolicyExemptionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: PolicyExemptionsListOptionalParams\n  ): AsyncIterableIterator<PolicyExemption> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the given resource group\n   * in the given subscription that match the optional given $filter. Valid values for $filter are:\n   * 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter\n   * is not provided, the unfiltered list includes all policy exemptions associated with the resource\n   * group, including those that apply directly or apply from containing scopes, as well as any applied\n   * to resources contained within the resource group.\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param options The options parameters.\n   */\n  public listForResourceGroup(\n    resourceGroupName: string,\n    options?: PolicyExemptionsListForResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicyExemption> {\n    const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PolicyExemptionsListForResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyExemption[]> {\n    let result: PolicyExemptionsListForResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PolicyExemptionsListForResourceGroupOptionalParams\n  ): AsyncIterableIterator<PolicyExemption> {\n    for await (const page of this.listForResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the specified resource in\n   * the given resource group and subscription that match the optional given $filter. Valid values for\n   * $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''.\n   * If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n   * resource, including those that apply directly or from all containing scopes, as well as any applied\n   * to resources contained within the resource. Three parameters plus the resource name are used to\n   * identify a specific resource. If the resource is not part of a parent resource (the more common\n   * case), the parent resource path should not be provided (or provided as ''). For example a web app\n   * could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '',\n   * {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent\n   * resource, then all parameters should be provided. For example a virtual machine DNS name could be\n   * specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==\n   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==\n   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is\n   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',\n   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param options The options parameters.\n   */\n  public listForResource(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyExemptionsListForResourceOptionalParams\n  ): PagedAsyncIterableIterator<PolicyExemption> {\n    const iter = this.listForResourcePagingAll(\n      resourceGroupName,\n      resourceProviderNamespace,\n      parentResourcePath,\n      resourceType,\n      resourceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForResourcePagingPage(\n          resourceGroupName,\n          resourceProviderNamespace,\n          parentResourcePath,\n          resourceType,\n          resourceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForResourcePagingPage(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyExemptionsListForResourceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyExemption[]> {\n    let result: PolicyExemptionsListForResourceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForResource(\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForResourceNext(\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForResourcePagingAll(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyExemptionsListForResourceOptionalParams\n  ): AsyncIterableIterator<PolicyExemption> {\n    for await (const page of this.listForResourcePagingPage(\n      resourceGroupName,\n      resourceProviderNamespace,\n      parentResourcePath,\n      resourceType,\n      resourceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions applicable to the management group that\n   * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',\n   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the\n   * returned list includes all policy exemptions that are assigned to the management group or the\n   * management group's ancestors.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  public listForManagementGroup(\n    managementGroupId: string,\n    options?: PolicyExemptionsListForManagementGroupOptionalParams\n  ): PagedAsyncIterableIterator<PolicyExemption> {\n    const iter = this.listForManagementGroupPagingAll(\n      managementGroupId,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listForManagementGroupPagingPage(\n          managementGroupId,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listForManagementGroupPagingPage(\n    managementGroupId: string,\n    options?: PolicyExemptionsListForManagementGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PolicyExemption[]> {\n    let result: PolicyExemptionsListForManagementGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listForManagementGroup(managementGroupId, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listForManagementGroupNext(\n        managementGroupId,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listForManagementGroupPagingAll(\n    managementGroupId: string,\n    options?: PolicyExemptionsListForManagementGroupOptionalParams\n  ): AsyncIterableIterator<PolicyExemption> {\n    for await (const page of this.listForManagementGroupPagingPage(\n      managementGroupId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation deletes a policy exemption, given its name and the scope it was created in. The scope\n   * of a policy exemption is the part of its ID preceding\n   * '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.\n   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyExemptionName The name of the policy exemption to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    scope: string,\n    policyExemptionName: string,\n    options?: PolicyExemptionsDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { scope, policyExemptionName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   *  This operation creates or updates a policy exemption with the given scope and name. Policy\n   * exemptions apply to all resources contained within their scope. For example, when you create a\n   * policy exemption at resource group scope for a policy assignment at the same or above level, the\n   * exemption exempts to all applicable resources in the resource group.\n   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyExemptionName The name of the policy exemption to delete.\n   * @param parameters Parameters for the policy exemption.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    scope: string,\n    policyExemptionName: string,\n    parameters: PolicyExemption,\n    options?: PolicyExemptionsCreateOrUpdateOptionalParams\n  ): Promise<PolicyExemptionsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyExemptionName, parameters, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves a single policy exemption, given its name and the scope it was created at.\n   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:\n   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n   *              '/subscriptions/{subscriptionId}'), resource group (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'\n   * @param policyExemptionName The name of the policy exemption to delete.\n   * @param options The options parameters.\n   */\n  get(\n    scope: string,\n    policyExemptionName: string,\n    options?: PolicyExemptionsGetOptionalParams\n  ): Promise<PolicyExemptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { scope, policyExemptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the given subscription\n   * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',\n   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, the unfiltered\n   * list includes all policy exemptions associated with the subscription, including those that apply\n   * directly or from management groups that contain the given subscription, as well as any applied to\n   * objects contained within the subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: PolicyExemptionsListOptionalParams\n  ): Promise<PolicyExemptionsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the given resource group\n   * in the given subscription that match the optional given $filter. Valid values for $filter are:\n   * 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter\n   * is not provided, the unfiltered list includes all policy exemptions associated with the resource\n   * group, including those that apply directly or apply from containing scopes, as well as any applied\n   * to resources contained within the resource group.\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param options The options parameters.\n   */\n  private _listForResourceGroup(\n    resourceGroupName: string,\n    options?: PolicyExemptionsListForResourceGroupOptionalParams\n  ): Promise<PolicyExemptionsListForResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listForResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions associated with the specified resource in\n   * the given resource group and subscription that match the optional given $filter. Valid values for\n   * $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''.\n   * If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n   * resource, including those that apply directly or from all containing scopes, as well as any applied\n   * to resources contained within the resource. Three parameters plus the resource name are used to\n   * identify a specific resource. If the resource is not part of a parent resource (the more common\n   * case), the parent resource path should not be provided (or provided as ''). For example a web app\n   * could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '',\n   * {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent\n   * resource, then all parameters should be provided. For example a virtual machine DNS name could be\n   * specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==\n   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==\n   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is\n   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',\n   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param options The options parameters.\n   */\n  private _listForResource(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    options?: PolicyExemptionsListForResourceOptionalParams\n  ): Promise<PolicyExemptionsListForResourceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        options\n      },\n      listForResourceOperationSpec\n    );\n  }\n\n  /**\n   * This operation retrieves the list of all policy exemptions applicable to the management group that\n   * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',\n   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the\n   * returned list includes all policy exemptions that are assigned to the management group or the\n   * management group's ancestors.\n   * @param managementGroupId The ID of the management group.\n   * @param options The options parameters.\n   */\n  private _listForManagementGroup(\n    managementGroupId: string,\n    options?: PolicyExemptionsListForManagementGroupOptionalParams\n  ): Promise<PolicyExemptionsListForManagementGroupResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, options },\n      listForManagementGroupOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: PolicyExemptionsListNextOptionalParams\n  ): Promise<PolicyExemptionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListForResourceGroupNext\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listForResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: PolicyExemptionsListForResourceGroupNextOptionalParams\n  ): Promise<PolicyExemptionsListForResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listForResourceGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListForResourceNext\n   * @param resourceGroupName The name of the resource group containing the resource.\n   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace\n   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)\n   * @param parentResourcePath The parent resource path. Use empty string if there is none.\n   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from\n   *                     Microsoft.Web/sites).\n   * @param resourceName The name of the resource.\n   * @param nextLink The nextLink from the previous successful call to the ListForResource method.\n   * @param options The options parameters.\n   */\n  private _listForResourceNext(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    nextLink: string,\n    options?: PolicyExemptionsListForResourceNextOptionalParams\n  ): Promise<PolicyExemptionsListForResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        resourceProviderNamespace,\n        parentResourcePath,\n        resourceType,\n        resourceName,\n        nextLink,\n        options\n      },\n      listForResourceNextOperationSpec\n    );\n  }\n\n  /**\n   * ListForManagementGroupNext\n   * @param managementGroupId The ID of the management group.\n   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.\n   * @param options The options parameters.\n   */\n  private _listForManagementGroupNext(\n    managementGroupId: string,\n    nextLink: string,\n    options?: PolicyExemptionsListForManagementGroupNextOptionalParams\n  ): Promise<PolicyExemptionsListForManagementGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { managementGroupId, nextLink, options },\n      listForManagementGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion2],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyExemptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemption\n    },\n    201: {\n      bodyMapper: Mappers.PolicyExemption\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters4,\n  queryParameters: [Parameters.apiVersion2],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyExemptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemption\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion2],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.scope,\n    Parameters.policyExemptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyExemptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion2],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyExemptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion2],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyExemptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion2],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n    Parameters.parentResourcePath,\n    Parameters.resourceType,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForManagementGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyExemptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.filter, Parameters.apiVersion2],\n  urlParameters: [Parameters.$host, Parameters.managementGroupId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForResourceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n    Parameters.parentResourcePath,\n    Parameters.resourceType,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listForManagementGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyExemptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.managementGroupId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport {\n  DataPolicyManifestsImpl,\n  PolicyAssignmentsImpl,\n  PolicyDefinitionsImpl,\n  PolicySetDefinitionsImpl,\n  PolicyExemptionsImpl\n} from \"./operations\";\nimport {\n  DataPolicyManifests,\n  PolicyAssignments,\n  PolicyDefinitions,\n  PolicySetDefinitions,\n  PolicyExemptions\n} from \"./operationsInterfaces\";\nimport { PolicyClientOptionalParams } from \"./models\";\n\nexport class PolicyClient extends coreClient.ServiceClient {\n  $host: string;\n  subscriptionId?: string;\n\n  /**\n   * Initializes a new instance of the PolicyClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The ID of the target subscription.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: PolicyClientOptionalParams\n  );\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    options?: PolicyClientOptionalParams\n  );\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionIdOrOptions?: string | PolicyClientOptionalParams,\n    options?: PolicyClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    let subscriptionId: string | undefined;\n\n    if (!subscriptionIdOrOptions !== undefined) {\n      if (typeof subscriptionIdOrOptions === \"string\") {\n        subscriptionId = subscriptionIdOrOptions;\n      } else if (typeof subscriptionIdOrOptions === \"object\") {\n        options = subscriptionIdOrOptions;\n      }\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: PolicyClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials\n    };\n\n    const packageDetails = `azsdk-js-arm-policy/5.1.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint:\n        options.endpoint ?? options.baseUri ?? \"https://management.azure.com\"\n    };\n    super(optionsWithDefaults);\n\n    let bearerTokenAuthenticationPolicyFound: boolean = false;\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n    }\n    if (\n      !options ||\n      !options.pipeline ||\n      options.pipeline.getOrderedPolicies().length == 0 ||\n      !bearerTokenAuthenticationPolicyFound\n    ) {\n      this.pipeline.removePolicy({\n        name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n      });\n      this.pipeline.addPolicy(\n        coreRestPipeline.bearerTokenAuthenticationPolicy({\n          credential: credentials,\n          scopes:\n            optionsWithDefaults.credentialScopes ??\n            `${optionsWithDefaults.endpoint}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge:\n              coreClient.authorizeRequestOnClaimChallenge\n          }\n        })\n      );\n    }\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.dataPolicyManifests = new DataPolicyManifestsImpl(this);\n    this.policyAssignments = new PolicyAssignmentsImpl(this);\n    this.policyDefinitions = new PolicyDefinitionsImpl(this);\n    this.policySetDefinitions = new PolicySetDefinitionsImpl(this);\n    this.policyExemptions = new PolicyExemptionsImpl(this);\n  }\n\n  dataPolicyManifests: DataPolicyManifests;\n  policyAssignments: PolicyAssignments;\n  policyDefinitions: PolicyDefinitions;\n  policySetDefinitions: PolicySetDefinitions;\n  policyExemptions: PolicyExemptions;\n}\n"],"names":["KnownAliasPathTokenType","KnownAliasPathAttributes","KnownEnforcementMode","KnownCreatedByType","KnownPolicyType","KnownParameterType","KnownExemptionCategory","PolicyAssignmentMapper","PolicyAssignmentUpdateMapper","PolicyDefinitionMapper","PolicySetDefinitionMapper","PolicyExemptionMapper","__await","__asyncValues","__asyncDelegator","listOperationSpec","listNextOperationSpec","serializer","coreClient","Mappers.DataPolicyManifest","Mappers.CloudError","Parameters.apiVersion","Parameters.$host","Parameters.policyMode","Parameters.accept","Mappers.DataPolicyManifestListResult","Parameters.filter","Parameters.nextLink","deleteOperationSpec","getOperationSpec","listForResourceGroupOperationSpec","listForResourceOperationSpec","listForManagementGroupOperationSpec","listForResourceGroupNextOperationSpec","listForResourceNextOperationSpec","listForManagementGroupNextOperationSpec","Mappers.PolicyAssignment","Parameters.apiVersion1","Parameters.scope","Parameters.policyAssignmentName","Parameters.parameters","Parameters.contentType","Parameters.parameters1","Mappers.PolicyAssignmentListResult","Parameters.top","Parameters.resourceGroupName","Parameters.subscriptionId","Parameters.resourceProviderNamespace","Parameters.parentResourcePath","Parameters.resourceType","Parameters.resourceName","Parameters.managementGroupId","Parameters.policyAssignmentId","createOrUpdateOperationSpec","getBuiltInOperationSpec","createOrUpdateAtManagementGroupOperationSpec","deleteAtManagementGroupOperationSpec","getAtManagementGroupOperationSpec","listBuiltInOperationSpec","listByManagementGroupOperationSpec","listBuiltInNextOperationSpec","listByManagementGroupNextOperationSpec","Mappers.PolicyDefinition","Parameters.parameters2","Parameters.policyDefinitionName","Mappers.PolicyDefinitionListResult","Mappers.PolicySetDefinition","Parameters.parameters3","Parameters.policySetDefinitionName","Mappers.PolicySetDefinitionListResult","Parameters.apiVersion2","Parameters.policyExemptionName","Mappers.PolicyExemption","Parameters.parameters4","Mappers.PolicyExemptionListResult","coreRestPipeline"],"mappings":"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"}