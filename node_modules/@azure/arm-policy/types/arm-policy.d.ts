import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** The alias type. */
export declare interface Alias {
    /** The alias name. */
    name?: string;
    /** The paths for an alias. */
    paths?: AliasPath[];
    /** The type of the alias. */
    type?: AliasType;
    /** The default path for an alias. */
    defaultPath?: string;
    /** The default pattern for an alias. */
    defaultPattern?: AliasPattern;
    /**
     * The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultMetadata?: AliasPathMetadata;
}

/** The type of the paths for alias. */
export declare interface AliasPath {
    /** The path of an alias. */
    path?: string;
    /** The API versions. */
    apiVersions?: string[];
    /** The pattern for an alias path. */
    pattern?: AliasPattern;
    /**
     * The metadata of the alias path. If missing, fall back to the default metadata of the alias.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: AliasPathMetadata;
}

/**
 * Defines values for AliasPathAttributes. \
 * {@link KnownAliasPathAttributes} can be used interchangeably with AliasPathAttributes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The token that the alias path is referring to has no attributes. \
 * **Modifiable**: The token that the alias path is referring to is modifiable by policies with 'modify' effect.
 */
export declare type AliasPathAttributes = string;

export declare interface AliasPathMetadata {
    /**
     * The type of the token that the alias path is referring to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: AliasPathTokenType;
    /**
     * The attributes of the token that the alias path is referring to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly attributes?: AliasPathAttributes;
}

/**
 * Defines values for AliasPathTokenType. \
 * {@link KnownAliasPathTokenType} can be used interchangeably with AliasPathTokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: The token type is not specified. \
 * **Any**: The token type can be anything. \
 * **String**: The token type is string. \
 * **Object**: The token type is object. \
 * **Array**: The token type is array. \
 * **Integer**: The token type is integer. \
 * **Number**: The token type is number. \
 * **Boolean**: The token type is boolean.
 */
export declare type AliasPathTokenType = string;

/** The type of the pattern for an alias path. */
export declare interface AliasPattern {
    /** The alias pattern phrase. */
    phrase?: string;
    /** The alias pattern variable. */
    variable?: string;
    /** The type of alias pattern */
    type?: AliasPatternType;
}

/** Defines values for AliasPatternType. */
export declare type AliasPatternType = "NotSpecified" | "Extract";

/** Defines values for AliasType. */
export declare type AliasType = "NotSpecified" | "PlainText" | "Mask";

/** An error response from a policy operation. */
export declare interface CloudError {
    /** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
    error?: ErrorResponse;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The data effect definition. */
export declare interface DataEffect {
    /** The data effect name. */
    name?: string;
    /** The data effect details schema. */
    detailsSchema?: any;
}

/** The custom resource function definition. */
export declare interface DataManifestCustomResourceFunctionDefinition {
    /** The function name as it will appear in the policy rule. eg - 'vault'. */
    name?: string;
    /** The fully qualified control plane resource type that this function represents. eg - 'Microsoft.KeyVault/vaults'. */
    fullyQualifiedResourceType?: string;
    /** The top-level properties that can be selected on the function's output. eg - [ "name", "location" ] if vault().name and vault().location are supported */
    defaultProperties?: string[];
    /** A value indicating whether the custom properties within the property bag are allowed. Needs api-version to be specified in the policy rule eg - vault('2019-06-01'). */
    allowCustomProperties?: boolean;
}

/** The data policy manifest. */
export declare interface DataPolicyManifest {
    /**
     * The ID of the data policy manifest.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the data policy manifest (it's the same as the Policy Mode).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource (Microsoft.Authorization/dataPolicyManifests).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The list of namespaces for the data policy manifest. */
    namespaces?: string[];
    /** The policy mode of the data policy manifest. */
    policyMode?: string;
    /** A value indicating whether policy mode is allowed only in built-in definitions. */
    isBuiltInOnly?: boolean;
    /** An array of resource type aliases. */
    resourceTypeAliases?: ResourceTypeAliases[];
    /** The effect definition. */
    effects?: DataEffect[];
    /** The non-alias field accessor values that can be used in the policy rule. */
    fieldValues?: string[];
    /** The standard resource functions (subscription and/or resourceGroup). */
    standard?: string[];
    /** An array of data manifest custom resource definition. */
    custom?: DataManifestCustomResourceFunctionDefinition[];
}

/** List of data policy manifests. */
export declare interface DataPolicyManifestListResult {
    /** An array of data policy manifests. */
    value?: DataPolicyManifest[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a DataPolicyManifests. */
export declare interface DataPolicyManifests {
    /**
     * This operation retrieves a list of all the data policy manifests that match the optional given
     * $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the
     * unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is
     * provided, the returned list only includes all data policy manifests that have a namespace matching
     * the provided value.
     * @param options The options parameters.
     */
    list(options?: DataPolicyManifestsListOptionalParams): PagedAsyncIterableIterator<DataPolicyManifest>;
    /**
     * This operation retrieves the data policy manifest with the given policy mode.
     * @param policyMode The policy mode of the data policy manifest to get.
     * @param options The options parameters.
     */
    getByPolicyMode(policyMode: string, options?: DataPolicyManifestsGetByPolicyModeOptionalParams): Promise<DataPolicyManifestsGetByPolicyModeResponse>;
}

/** Optional parameters. */
export declare interface DataPolicyManifestsGetByPolicyModeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByPolicyMode operation. */
export declare type DataPolicyManifestsGetByPolicyModeResponse = DataPolicyManifest;

/** Optional parameters. */
export declare interface DataPolicyManifestsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DataPolicyManifestsListNextResponse = DataPolicyManifestListResult;

/** Optional parameters. */
export declare interface DataPolicyManifestsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type DataPolicyManifestsListResponse = DataPolicyManifestListResult;

/**
 * Defines values for EnforcementMode. \
 * {@link KnownEnforcementMode} can be used interchangeably with EnforcementMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: The policy effect is enforced during resource creation or update. \
 * **DoNotEnforce**: The policy effect is not enforced during resource creation or update.
 */
export declare type EnforcementMode = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: any;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export declare interface ErrorResponse {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorResponse[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * Defines values for ExemptionCategory. \
 * {@link KnownExemptionCategory} can be used interchangeably with ExemptionCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Waiver**: This category of exemptions usually means the scope is not applicable for the policy. \
 * **Mitigated**: This category of exemptions usually means the mitigation actions have been applied to the scope.
 */
export declare type ExemptionCategory = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity. */
export declare interface Identity {
    /**
     * The principal ID of the resource identity.  This property will only be provided for a system assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the resource identity.  This property will only be provided for a system assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. This is the only required field when adding a system or user assigned identity to a resource. */
    type?: ResourceIdentityType;
    /** The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** Known values of {@link AliasPathAttributes} that the service accepts. */
export declare enum KnownAliasPathAttributes {
    /** The token that the alias path is referring to has no attributes. */
    None = "None",
    /** The token that the alias path is referring to is modifiable by policies with 'modify' effect. */
    Modifiable = "Modifiable"
}

/** Known values of {@link AliasPathTokenType} that the service accepts. */
export declare enum KnownAliasPathTokenType {
    /** The token type is not specified. */
    NotSpecified = "NotSpecified",
    /** The token type can be anything. */
    Any = "Any",
    /** The token type is string. */
    String = "String",
    /** The token type is object. */
    Object = "Object",
    /** The token type is array. */
    Array = "Array",
    /** The token type is integer. */
    Integer = "Integer",
    /** The token type is number. */
    Number = "Number",
    /** The token type is boolean. */
    Boolean = "Boolean"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link EnforcementMode} that the service accepts. */
export declare enum KnownEnforcementMode {
    /** The policy effect is enforced during resource creation or update. */
    Default = "Default",
    /** The policy effect is not enforced during resource creation or update. */
    DoNotEnforce = "DoNotEnforce"
}

/** Known values of {@link ExemptionCategory} that the service accepts. */
export declare enum KnownExemptionCategory {
    /** This category of exemptions usually means the scope is not applicable for the policy. */
    Waiver = "Waiver",
    /** This category of exemptions usually means the mitigation actions have been applied to the scope. */
    Mitigated = "Mitigated"
}

/** Known values of {@link ParameterType} that the service accepts. */
export declare enum KnownParameterType {
    /** String */
    String = "String",
    /** Array */
    Array = "Array",
    /** Object */
    Object = "Object",
    /** Boolean */
    Boolean = "Boolean",
    /** Integer */
    Integer = "Integer",
    /** Float */
    Float = "Float",
    /** DateTime */
    DateTime = "DateTime"
}

/** Known values of {@link PolicyType} that the service accepts. */
export declare enum KnownPolicyType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** BuiltIn */
    BuiltIn = "BuiltIn",
    /** Custom */
    Custom = "Custom",
    /** Static */
    Static = "Static"
}

/** A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. */
export declare interface NonComplianceMessage {
    /** A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. */
    message: string;
    /** The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment. */
    policyDefinitionReferenceId?: string;
}

/** The definition of a parameter that can be provided to the policy. */
export declare interface ParameterDefinitionsValue {
    /** The data type of the parameter. */
    type?: ParameterType;
    /** The allowed values for the parameter. */
    allowedValues?: any[];
    /** The default value for the parameter if no value is provided. */
    defaultValue?: any;
    /** General metadata for the parameter. */
    metadata?: ParameterDefinitionsValueMetadata;
}

/** General metadata for the parameter. */
export declare interface ParameterDefinitionsValueMetadata {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The display name for the parameter. */
    displayName?: string;
    /** The description of the parameter. */
    description?: string;
    /** Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from. */
    strongType?: string;
    /** Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope. */
    assignPermissions?: boolean;
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Array** \
 * **Object** \
 * **Boolean** \
 * **Integer** \
 * **Float** \
 * **DateTime**
 */
export declare type ParameterType = string;

/** The value of a parameter. */
export declare interface ParameterValuesValue {
    /** The value of the parameter. */
    value?: any;
}

/** The policy assignment. */
export declare interface PolicyAssignment {
    /**
     * The ID of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The location of the policy assignment. Only required when utilizing managed identity. */
    location?: string;
    /** The managed identity associated with the policy assignment. */
    identity?: Identity;
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The display name of the policy assignment. */
    displayName?: string;
    /** The ID of the policy definition or policy set definition being assigned. */
    policyDefinitionId?: string;
    /**
     * The scope for the policy assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scope?: string;
    /** The policy's excluded scopes. */
    notScopes?: string[];
    /** The parameter values for the assigned policy rule. The keys are the parameter names. */
    parameters?: {
        [propertyName: string]: ParameterValuesValue;
    };
    /** This message will be part of response in case of policy violation. */
    description?: string;
    /** The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. */
    metadata?: any;
    /** The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. */
    enforcementMode?: EnforcementMode;
    /** The messages that describe why a resource is non-compliant with the policy. */
    nonComplianceMessages?: NonComplianceMessage[];
}

/** List of policy assignments. */
export declare interface PolicyAssignmentListResult {
    /** An array of policy assignments. */
    value?: PolicyAssignment[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a PolicyAssignments. */
export declare interface PolicyAssignments {
    /**
     * This operation retrieves the list of all policy assignments associated with the given resource group
     * in the given subscription that match the optional given $filter. Valid values for $filter are:
     * 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
     * unfiltered list includes all policy assignments associated with the resource group, including those
     * that apply directly or apply from containing scopes, as well as any applied to resources contained
     * within the resource group. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the resource group, which is everything in the unfiltered list except
     * those applied to resources contained within the resource group. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource group. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: PolicyAssignmentsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<PolicyAssignment>;
    /**
     * This operation retrieves the list of all policy assignments associated with the specified resource
     * in the given resource group and subscription that match the optional given $filter. Valid values for
     * $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not
     * provided, the unfiltered list includes all policy assignments associated with the resource,
     * including those that apply directly or from all containing scopes, as well as any applied to
     * resources contained within the resource. If $filter=atScope() is provided, the returned list
     * includes all policy assignments that apply to the resource, which is everything in the unfiltered
     * list except those applied to resources contained within the resource. If $filter=atExactScope() is
     * provided, the returned list only includes all policy assignments that at the resource level. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value} that apply to the resource. Three
     * parameters plus the resource name are used to identify a specific resource. If the resource is not
     * part of a parent resource (the more common case), the parent resource path should not be provided
     * (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} ==
     * 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided.
     * For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} ==
     * 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} ==
     * 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the
     * namespace and type name separately is to provide both in the {resourceType} parameter, format:
     * ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} ==
     * 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
     *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
     * @param parentResourcePath The parent resource path. Use empty string if there is none.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: PolicyAssignmentsListForResourceOptionalParams): PagedAsyncIterableIterator<PolicyAssignment>;
    /**
     * This operation retrieves the list of all policy assignments applicable to the management group that
     * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or
     * 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all
     * policy assignments that are assigned to the management group or the management group's ancestors. If
     * $filter=atExactScope() is provided, the returned list only includes all policy assignments that at
     * the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list
     * includes all policy assignments of the policy definition whose id is {value} that apply to the
     * management group.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId: string, options?: PolicyAssignmentsListForManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyAssignment>;
    /**
     * This operation retrieves the list of all policy assignments associated with the given subscription
     * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()'
     * or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
     * policy assignments associated with the subscription, including those that apply directly or from
     * management groups that contain the given subscription, as well as any applied to objects contained
     * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
     * assignments that apply to the subscription, which is everything in the unfiltered list except those
     * applied to objects contained within the subscription. If $filter=atExactScope() is provided, the
     * returned list only includes all policy assignments that at the subscription. If
     * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
     * assignments of the policy definition whose id is {value}.
     * @param options The options parameters.
     */
    list(options?: PolicyAssignmentsListOptionalParams): PagedAsyncIterableIterator<PolicyAssignment>;
    /**
     * This operation deletes a policy assignment, given its name and the scope it was created in. The
     * scope of a policy assignment is the part of its ID preceding
     * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment to delete.
     * @param options The options parameters.
     */
    delete(scope: string, policyAssignmentName: string, options?: PolicyAssignmentsDeleteOptionalParams): Promise<PolicyAssignmentsDeleteResponse>;
    /**
     *  This operation creates or updates a policy assignment with the given scope and name. Policy
     * assignments apply to all resources contained within their scope. For example, when you assign a
     * policy at resource group scope, that policy applies to all resources in the group.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters Parameters for the policy assignment.
     * @param options The options parameters.
     */
    create(scope: string, policyAssignmentName: string, parameters: PolicyAssignment, options?: PolicyAssignmentsCreateOptionalParams): Promise<PolicyAssignmentsCreateResponse>;
    /**
     * This operation retrieves a single policy assignment, given its name and the scope it was created at.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment to get.
     * @param options The options parameters.
     */
    get(scope: string, policyAssignmentName: string, options?: PolicyAssignmentsGetOptionalParams): Promise<PolicyAssignmentsGetResponse>;
    /**
     *  This operation updates a policy assignment with the given scope and name. Policy assignments apply
     * to all resources contained within their scope. For example, when you assign a policy at resource
     * group scope, that policy applies to all resources in the group.
     * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyAssignmentName The name of the policy assignment.
     * @param parameters Parameters for policy assignment patch request.
     * @param options The options parameters.
     */
    update(scope: string, policyAssignmentName: string, parameters: PolicyAssignmentUpdate, options?: PolicyAssignmentsUpdateOptionalParams): Promise<PolicyAssignmentsUpdateResponse>;
    /**
     * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
     * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats
     * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management
     * group), '/subscriptions/{subscriptionId}' (subscription),
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * (resource).
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param options The options parameters.
     */
    deleteById(policyAssignmentId: string, options?: PolicyAssignmentsDeleteByIdOptionalParams): Promise<PolicyAssignmentsDeleteByIdResponse>;
    /**
     * This operation creates or updates the policy assignment with the given ID. Policy assignments made
     * on a scope apply to all resources contained in that scope. For example, when you assign a policy to
     * a resource group that policy applies to all resources in the group. Policy assignment IDs have this
     * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
     * scopes are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param parameters Parameters for policy assignment.
     * @param options The options parameters.
     */
    createById(policyAssignmentId: string, parameters: PolicyAssignment, options?: PolicyAssignmentsCreateByIdOptionalParams): Promise<PolicyAssignmentsCreateByIdResponse>;
    /**
     * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
     * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
     * scopes are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param options The options parameters.
     */
    getById(policyAssignmentId: string, options?: PolicyAssignmentsGetByIdOptionalParams): Promise<PolicyAssignmentsGetByIdResponse>;
    /**
     * This operation updates the policy assignment with the given ID. Policy assignments made on a scope
     * apply to all resources contained in that scope. For example, when you assign a policy to a resource
     * group that policy applies to all resources in the group. Policy assignment IDs have this format:
     * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes
     * are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
     * @param policyAssignmentId The ID of the policy assignment to update. Use the format
     *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
     * @param parameters Parameters for policy assignment patch request.
     * @param options The options parameters.
     */
    updateById(policyAssignmentId: string, parameters: PolicyAssignmentUpdate, options?: PolicyAssignmentsUpdateByIdOptionalParams): Promise<PolicyAssignmentsUpdateByIdResponse>;
}

/** Optional parameters. */
export declare interface PolicyAssignmentsCreateByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createById operation. */
export declare type PolicyAssignmentsCreateByIdResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type PolicyAssignmentsCreateResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsDeleteByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteById operation. */
export declare type PolicyAssignmentsDeleteByIdResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type PolicyAssignmentsDeleteResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsGetByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getById operation. */
export declare type PolicyAssignmentsGetByIdResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PolicyAssignmentsGetResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForManagementGroupNext operation. */
export declare type PolicyAssignmentsListForManagementGroupNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listForManagementGroup operation. */
export declare type PolicyAssignmentsListForManagementGroupResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForResourceGroupNext operation. */
export declare type PolicyAssignmentsListForResourceGroupNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listForResourceGroup operation. */
export declare type PolicyAssignmentsListForResourceGroupResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForResourceNext operation. */
export declare type PolicyAssignmentsListForResourceNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListForResourceOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listForResource operation. */
export declare type PolicyAssignmentsListForResourceResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PolicyAssignmentsListNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type PolicyAssignmentsListResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export declare interface PolicyAssignmentsUpdateByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateById operation. */
export declare type PolicyAssignmentsUpdateByIdResponse = PolicyAssignment;

/** Optional parameters. */
export declare interface PolicyAssignmentsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PolicyAssignmentsUpdateResponse = PolicyAssignment;

export declare interface PolicyAssignmentUpdate {
    /** The location of the policy assignment. Only required when utilizing managed identity. */
    location?: string;
    /** The managed identity associated with the policy assignment. */
    identity?: Identity;
}

export declare class PolicyClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the PolicyClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PolicyClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: PolicyClientOptionalParams);
    dataPolicyManifests: DataPolicyManifests;
    policyAssignments: PolicyAssignments;
    policyDefinitions: PolicyDefinitions;
    policySetDefinitions: PolicySetDefinitions;
    policyExemptions: PolicyExemptions;
}

/** Optional parameters. */
export declare interface PolicyClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The policy definition. */
export declare interface PolicyDefinition {
    /**
     * The ID of the policy definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the policy definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource (Microsoft.Authorization/policyDefinitions).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */
    policyType?: PolicyType;
    /** The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. */
    mode?: string;
    /** The display name of the policy definition. */
    displayName?: string;
    /** The policy definition description. */
    description?: string;
    /** The policy rule. */
    policyRule?: any;
    /** The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */
    metadata?: any;
    /** The parameter definitions for parameters used in the policy rule. The keys are the parameter names. */
    parameters?: {
        [propertyName: string]: ParameterDefinitionsValue;
    };
}

/** The policy definition group. */
export declare interface PolicyDefinitionGroup {
    /** The name of the group. */
    name: string;
    /** The group's display name. */
    displayName?: string;
    /** The group's category. */
    category?: string;
    /** The group's description. */
    description?: string;
    /** A resource ID of a resource that contains additional metadata about the group. */
    additionalMetadataId?: string;
}

/** List of policy definitions. */
export declare interface PolicyDefinitionListResult {
    /** An array of policy definitions. */
    value?: PolicyDefinition[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** The policy definition reference. */
export declare interface PolicyDefinitionReference {
    /** The ID of the policy definition or policy set definition. */
    policyDefinitionId: string;
    /** The parameter values for the referenced policy rule. The keys are the parameter names. */
    parameters?: {
        [propertyName: string]: ParameterValuesValue;
    };
    /** A unique id (within the policy set definition) for this policy definition reference. */
    policyDefinitionReferenceId?: string;
    /** The name of the groups that this policy definition reference belongs to. */
    groupNames?: string[];
}

/** Interface representing a PolicyDefinitions. */
export declare interface PolicyDefinitions {
    /**
     * This operation retrieves a list of all the policy definitions in a given subscription that match the
     * optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or
     * 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the subscription, including those that apply directly or from management
     * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list
     * only includes all policy definitions that at the given subscription. If $filter='policyType -eq
     * {value}' is provided, the returned list only includes all policy definitions whose type match the
     * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
     * $filter='category -eq {value}' is provided, the returned list only includes all policy definitions
     * whose category match the {value}.
     * @param options The options parameters.
     */
    list(options?: PolicyDefinitionsListOptionalParams): PagedAsyncIterableIterator<PolicyDefinition>;
    /**
     * This operation retrieves a list of all the built-in policy definitions that match the optional given
     * $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all
     * built-in policy definitions whose type match the {value}. Possible policyType values are
     * NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the
     * returned list only includes all built-in policy definitions whose category match the {value}.
     * @param options The options parameters.
     */
    listBuiltIn(options?: PolicyDefinitionsListBuiltInOptionalParams): PagedAsyncIterableIterator<PolicyDefinition>;
    /**
     * This operation retrieves a list of all the policy definitions in a given management group that match
     * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'
     * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
     * definitions associated with the management group, including those that apply directly or from
     * management groups that contain the given management group. If $filter=atExactScope() is provided,
     * the returned list only includes all policy definitions that at the given management group. If
     * $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions
     * whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and
     * Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy
     * definitions whose category match the {value}.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listByManagementGroup(managementGroupId: string, options?: PolicyDefinitionsListByManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyDefinition>;
    /**
     * This operation creates or updates a policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @param options The options parameters.
     */
    createOrUpdate(policyDefinitionName: string, parameters: PolicyDefinition, options?: PolicyDefinitionsCreateOrUpdateOptionalParams): Promise<PolicyDefinitionsCreateOrUpdateResponse>;
    /**
     * This operation deletes the policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param options The options parameters.
     */
    delete(policyDefinitionName: string, options?: PolicyDefinitionsDeleteOptionalParams): Promise<void>;
    /**
     * This operation retrieves the policy definition in the given subscription with the given name.
     * @param policyDefinitionName The name of the policy definition to get.
     * @param options The options parameters.
     */
    get(policyDefinitionName: string, options?: PolicyDefinitionsGetOptionalParams): Promise<PolicyDefinitionsGetResponse>;
    /**
     * This operation retrieves the built-in policy definition with the given name.
     * @param policyDefinitionName The name of the built-in policy definition to get.
     * @param options The options parameters.
     */
    getBuiltIn(policyDefinitionName: string, options?: PolicyDefinitionsGetBuiltInOptionalParams): Promise<PolicyDefinitionsGetBuiltInResponse>;
    /**
     * This operation creates or updates a policy definition in the given management group with the given
     * name.
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(policyDefinitionName: string, managementGroupId: string, parameters: PolicyDefinition, options?: PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams): Promise<PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse>;
    /**
     * This operation deletes the policy definition in the given management group with the given name.
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(policyDefinitionName: string, managementGroupId: string, options?: PolicyDefinitionsDeleteAtManagementGroupOptionalParams): Promise<void>;
    /**
     * This operation retrieves the policy definition in the given management group with the given name.
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    getAtManagementGroup(policyDefinitionName: string, managementGroupId: string, options?: PolicyDefinitionsGetAtManagementGroupOptionalParams): Promise<PolicyDefinitionsGetAtManagementGroupResponse>;
}

/** Optional parameters. */
export declare interface PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtManagementGroup operation. */
export declare type PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicyDefinition;

/** Optional parameters. */
export declare interface PolicyDefinitionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PolicyDefinitionsCreateOrUpdateResponse = PolicyDefinition;

/** Optional parameters. */
export declare interface PolicyDefinitionsDeleteAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PolicyDefinitionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PolicyDefinitionsGetAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtManagementGroup operation. */
export declare type PolicyDefinitionsGetAtManagementGroupResponse = PolicyDefinition;

/** Optional parameters. */
export declare interface PolicyDefinitionsGetBuiltInOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuiltIn operation. */
export declare type PolicyDefinitionsGetBuiltInResponse = PolicyDefinition;

/** Optional parameters. */
export declare interface PolicyDefinitionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PolicyDefinitionsGetResponse = PolicyDefinition;

/** Optional parameters. */
export declare interface PolicyDefinitionsListBuiltInNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuiltInNext operation. */
export declare type PolicyDefinitionsListBuiltInNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export declare interface PolicyDefinitionsListBuiltInOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listBuiltIn operation. */
export declare type PolicyDefinitionsListBuiltInResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export declare interface PolicyDefinitionsListByManagementGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByManagementGroupNext operation. */
export declare type PolicyDefinitionsListByManagementGroupNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export declare interface PolicyDefinitionsListByManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listByManagementGroup operation. */
export declare type PolicyDefinitionsListByManagementGroupResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export declare interface PolicyDefinitionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PolicyDefinitionsListNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export declare interface PolicyDefinitionsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type PolicyDefinitionsListResponse = PolicyDefinitionListResult;

/** The policy exemption. */
export declare interface PolicyExemption {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The ID of the policy exemption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the policy exemption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource (Microsoft.Authorization/policyExemptions).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The ID of the policy assignment that is being exempted. */
    policyAssignmentId: string;
    /** The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition. */
    policyDefinitionReferenceIds?: string[];
    /** The policy exemption category. Possible values are Waiver and Mitigated. */
    exemptionCategory: ExemptionCategory;
    /** The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption. */
    expiresOn?: Date;
    /** The display name of the policy exemption. */
    displayName?: string;
    /** The description of the policy exemption. */
    description?: string;
    /** The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs. */
    metadata?: any;
}

/** List of policy exemptions. */
export declare interface PolicyExemptionListResult {
    /** An array of policy exemptions. */
    value?: PolicyExemption[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PolicyExemptions. */
export declare interface PolicyExemptions {
    /**
     * This operation retrieves the list of all policy exemptions associated with the given subscription
     * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
     * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, the unfiltered
     * list includes all policy exemptions associated with the subscription, including those that apply
     * directly or from management groups that contain the given subscription, as well as any applied to
     * objects contained within the subscription.
     * @param options The options parameters.
     */
    list(options?: PolicyExemptionsListOptionalParams): PagedAsyncIterableIterator<PolicyExemption>;
    /**
     * This operation retrieves the list of all policy exemptions associated with the given resource group
     * in the given subscription that match the optional given $filter. Valid values for $filter are:
     * 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter
     * is not provided, the unfiltered list includes all policy exemptions associated with the resource
     * group, including those that apply directly or apply from containing scopes, as well as any applied
     * to resources contained within the resource group.
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param options The options parameters.
     */
    listForResourceGroup(resourceGroupName: string, options?: PolicyExemptionsListForResourceGroupOptionalParams): PagedAsyncIterableIterator<PolicyExemption>;
    /**
     * This operation retrieves the list of all policy exemptions associated with the specified resource in
     * the given resource group and subscription that match the optional given $filter. Valid values for
     * $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''.
     * If $filter is not provided, the unfiltered list includes all policy exemptions associated with the
     * resource, including those that apply directly or from all containing scopes, as well as any applied
     * to resources contained within the resource. Three parameters plus the resource name are used to
     * identify a specific resource. If the resource is not part of a parent resource (the more common
     * case), the parent resource path should not be provided (or provided as ''). For example a web app
     * could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '',
     * {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent
     * resource, then all parameters should be provided. For example a virtual machine DNS name could be
     * specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
     * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
     * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
     * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
     * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
     * @param resourceGroupName The name of the resource group containing the resource.
     * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
     *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
     * @param parentResourcePath The parent resource path. Use empty string if there is none.
     * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
     *                     Microsoft.Web/sites).
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: PolicyExemptionsListForResourceOptionalParams): PagedAsyncIterableIterator<PolicyExemption>;
    /**
     * This operation retrieves the list of all policy exemptions applicable to the management group that
     * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
     * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
     * returned list includes all policy exemptions that are assigned to the management group or the
     * management group's ancestors.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listForManagementGroup(managementGroupId: string, options?: PolicyExemptionsListForManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicyExemption>;
    /**
     * This operation deletes a policy exemption, given its name and the scope it was created in. The scope
     * of a policy exemption is the part of its ID preceding
     * '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
     * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyExemptionName The name of the policy exemption to delete.
     * @param options The options parameters.
     */
    delete(scope: string, policyExemptionName: string, options?: PolicyExemptionsDeleteOptionalParams): Promise<void>;
    /**
     *  This operation creates or updates a policy exemption with the given scope and name. Policy
     * exemptions apply to all resources contained within their scope. For example, when you create a
     * policy exemption at resource group scope for a policy assignment at the same or above level, the
     * exemption exempts to all applicable resources in the resource group.
     * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyExemptionName The name of the policy exemption to delete.
     * @param parameters Parameters for the policy exemption.
     * @param options The options parameters.
     */
    createOrUpdate(scope: string, policyExemptionName: string, parameters: PolicyExemption, options?: PolicyExemptionsCreateOrUpdateOptionalParams): Promise<PolicyExemptionsCreateOrUpdateResponse>;
    /**
     * This operation retrieves a single policy exemption, given its name and the scope it was created at.
     * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
     *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     *              '/subscriptions/{subscriptionId}'), resource group (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * @param policyExemptionName The name of the policy exemption to delete.
     * @param options The options parameters.
     */
    get(scope: string, policyExemptionName: string, options?: PolicyExemptionsGetOptionalParams): Promise<PolicyExemptionsGetResponse>;
}

/** Optional parameters. */
export declare interface PolicyExemptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PolicyExemptionsCreateOrUpdateResponse = PolicyExemption;

/** Optional parameters. */
export declare interface PolicyExemptionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PolicyExemptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PolicyExemptionsGetResponse = PolicyExemption;

/** Optional parameters. */
export declare interface PolicyExemptionsListForManagementGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForManagementGroupNext operation. */
export declare type PolicyExemptionsListForManagementGroupNextResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListForManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */
    filter?: string;
}

/** Contains response data for the listForManagementGroup operation. */
export declare type PolicyExemptionsListForManagementGroupResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListForResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForResourceGroupNext operation. */
export declare type PolicyExemptionsListForResourceGroupNextResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListForResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */
    filter?: string;
}

/** Contains response data for the listForResourceGroup operation. */
export declare type PolicyExemptionsListForResourceGroupResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListForResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listForResourceNext operation. */
export declare type PolicyExemptionsListForResourceNextResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListForResourceOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */
    filter?: string;
}

/** Contains response data for the listForResource operation. */
export declare type PolicyExemptionsListForResourceResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PolicyExemptionsListNextResponse = PolicyExemptionListResult;

/** Optional parameters. */
export declare interface PolicyExemptionsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided. the returned list only includes all policy exemptions that are associated with the give policyAssignmentId. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type PolicyExemptionsListResponse = PolicyExemptionListResult;

/** The policy set definition. */
export declare interface PolicySetDefinition {
    /**
     * The ID of the policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the policy set definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource (Microsoft.Authorization/policySetDefinitions).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */
    policyType?: PolicyType;
    /** The display name of the policy set definition. */
    displayName?: string;
    /** The policy set definition description. */
    description?: string;
    /** The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */
    metadata?: any;
    /** The policy set definition parameters that can be used in policy definition references. */
    parameters?: {
        [propertyName: string]: ParameterDefinitionsValue;
    };
    /** An array of policy definition references. */
    policyDefinitions?: PolicyDefinitionReference[];
    /** The metadata describing groups of policy definition references within the policy set definition. */
    policyDefinitionGroups?: PolicyDefinitionGroup[];
}

/** List of policy set definitions. */
export declare interface PolicySetDefinitionListResult {
    /** An array of policy set definitions. */
    value?: PolicySetDefinition[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a PolicySetDefinitions. */
export declare interface PolicySetDefinitions {
    /**
     * This operation retrieves a list of all the policy set definitions in a given subscription that match
     * the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}'
     * or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set
     * definitions associated with the subscription, including those that apply directly or from management
     * groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list
     * only includes all policy set definitions that at the given subscription. If $filter='policyType -eq
     * {value}' is provided, the returned list only includes all policy set definitions whose type match
     * the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category
     * -eq {value}' is provided, the returned list only includes all policy set definitions whose category
     * match the {value}.
     * @param options The options parameters.
     */
    list(options?: PolicySetDefinitionsListOptionalParams): PagedAsyncIterableIterator<PolicySetDefinition>;
    /**
     * This operation retrieves a list of all the built-in policy set definitions that match the optional
     * given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all
     * built-in policy set definitions whose category match the {value}.
     * @param options The options parameters.
     */
    listBuiltIn(options?: PolicySetDefinitionsListBuiltInOptionalParams): PagedAsyncIterableIterator<PolicySetDefinition>;
    /**
     * This operation retrieves a list of all the policy set definitions in a given management group that
     * match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq
     * {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all
     * policy set definitions associated with the management group, including those that apply directly or
     * from management groups that contain the given management group. If $filter=atExactScope() is
     * provided, the returned list only includes all policy set definitions that at the given management
     * group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy
     * set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn
     * and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all
     * policy set definitions whose category match the {value}.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listByManagementGroup(managementGroupId: string, options?: PolicySetDefinitionsListByManagementGroupOptionalParams): PagedAsyncIterableIterator<PolicySetDefinition>;
    /**
     * This operation creates or updates a policy set definition in the given subscription with the given
     * name.
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @param options The options parameters.
     */
    createOrUpdate(policySetDefinitionName: string, parameters: PolicySetDefinition, options?: PolicySetDefinitionsCreateOrUpdateOptionalParams): Promise<PolicySetDefinitionsCreateOrUpdateResponse>;
    /**
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param options The options parameters.
     */
    delete(policySetDefinitionName: string, options?: PolicySetDefinitionsDeleteOptionalParams): Promise<void>;
    /**
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param options The options parameters.
     */
    get(policySetDefinitionName: string, options?: PolicySetDefinitionsGetOptionalParams): Promise<PolicySetDefinitionsGetResponse>;
    /**
     * This operation retrieves the built-in policy set definition with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param options The options parameters.
     */
    getBuiltIn(policySetDefinitionName: string, options?: PolicySetDefinitionsGetBuiltInOptionalParams): Promise<PolicySetDefinitionsGetBuiltInResponse>;
    /**
     * This operation creates or updates a policy set definition in the given management group with the
     * given name.
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, parameters: PolicySetDefinition, options?: PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams): Promise<PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse>;
    /**
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: PolicySetDefinitionsDeleteAtManagementGroupOptionalParams): Promise<void>;
    /**
     * This operation retrieves the policy set definition in the given management group with the given
     * name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    getAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: PolicySetDefinitionsGetAtManagementGroupOptionalParams): Promise<PolicySetDefinitionsGetAtManagementGroupResponse>;
}

/** Optional parameters. */
export declare interface PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAtManagementGroup operation. */
export declare type PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicySetDefinition;

/** Optional parameters. */
export declare interface PolicySetDefinitionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PolicySetDefinitionsCreateOrUpdateResponse = PolicySetDefinition;

/** Optional parameters. */
export declare interface PolicySetDefinitionsDeleteAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PolicySetDefinitionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PolicySetDefinitionsGetAtManagementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAtManagementGroup operation. */
export declare type PolicySetDefinitionsGetAtManagementGroupResponse = PolicySetDefinition;

/** Optional parameters. */
export declare interface PolicySetDefinitionsGetBuiltInOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuiltIn operation. */
export declare type PolicySetDefinitionsGetBuiltInResponse = PolicySetDefinition;

/** Optional parameters. */
export declare interface PolicySetDefinitionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PolicySetDefinitionsGetResponse = PolicySetDefinition;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListBuiltInNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuiltInNext operation. */
export declare type PolicySetDefinitionsListBuiltInNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListBuiltInOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listBuiltIn operation. */
export declare type PolicySetDefinitionsListBuiltInResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListByManagementGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByManagementGroupNext operation. */
export declare type PolicySetDefinitionsListByManagementGroupNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListByManagementGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the listByManagementGroup operation. */
export declare type PolicySetDefinitionsListByManagementGroupResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PolicySetDefinitionsListNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export declare interface PolicySetDefinitionsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. */
    filter?: string;
    /** Maximum number of records to return. When the $top filter is not provided, it will return 500 records. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type PolicySetDefinitionsListResponse = PolicySetDefinitionListResult;

/**
 * Defines values for PolicyType. \
 * {@link KnownPolicyType} can be used interchangeably with PolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **BuiltIn** \
 * **Custom** \
 * **Static**
 */
export declare type PolicyType = string;

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "None";

/** The resource type aliases definition. */
export declare interface ResourceTypeAliases {
    /** The resource type name. */
    resourceType?: string;
    /** The aliases for property names. */
    aliases?: Alias[];
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

export declare interface UserAssignedIdentitiesValue {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export { }
